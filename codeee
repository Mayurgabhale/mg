
export default function EmployeeCard({ emp }) {
  const [locationData, setLocationData] = useState(null); // ✅ Hook first

  if (!emp) return null; // ✅ Now after the hook

  const rawStatus = emp.Employee_Status || "Deactive";
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isTerminated = normalizedStatus === "terminated";

  return (
    // ...rest of your JSX
  );
}








Compiled with problems:
×
ERROR in ./src/components/EmployeeCard.jsx 321:0-148
Module not found: Error: Can't resolve 'react-icons/fa' in 'C:\Users\W0024618\Desktop\employee-verification\frontend\src\components'
ERROR
[eslint] 
src\components\EmployeeCard.jsx
  Line 373:43:  React Hook "useState" is called conditionally. React Hooks must be called in the exact same order in every component render  react-hooks/rules-of-hooks

Search for the keywords to learn more about each error.

// CurrentLocation.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";

export default function CurrentLocation({ empId, onLocationUpdate }) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    if (!empId) {
      if (onLocationUpdate) onLocationUpdate(null);
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError("");

    axios
      .get(`http://localhost:5001/api/employees/${empId}/location`, { timeout: 5000 })
      .then((res) => {
        if (cancelled) return;
        const loc = res.data;

        if (loc && loc.found) {
          const istDate = loc.timestampUTC
            ? new Date(loc.timestampUTC).toLocaleDateString("en-IN", {
                timeZone: "Asia/Kolkata"
              })
            : "";

          const istTime = loc.timestampUTC
            ? new Date(loc.timestampUTC).toLocaleTimeString("en-IN", {
                timeZone: "Asia/Kolkata"
              })
            : "";

          const formattedLoc = {
            found: true,
            partition: loc.partition || "—",
            floor: loc.floor || "",
            Zone: loc.Zone || "—",
            date: istDate || "—",
            time: istTime || "—",
            door: loc.door || "—",
            direction: loc.direction || "—"
          };

          if (onLocationUpdate) onLocationUpdate(formattedLoc);
        } else {
          if (onLocationUpdate) onLocationUpdate({ found: false });
        }
      })
      .catch((err) => {
        if (cancelled) return;
        console.error("Location load error", err?.message || err);
        setError("Failed to load location");
        if (onLocationUpdate) onLocationUpdate(null);
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId, onLocationUpdate]);

  // This component doesn't render anything itself
  return null;
}









// Inside EmployeeCard.jsx
import React, { useState } from "react";
import CurrentLocation from "./CurrentLocation";
import {
  FaIdBadge,
  FaUserTie,
  FaUserCheck,
  FaCreditCard,
  FaMapMarkerAlt,
  FaCalendarAlt,
  FaClock,
  FaDoorOpen,
  FaExchangeAlt
} from "react-icons/fa";

export default function EmployeeCard({ emp }) {
  if (!emp) return null;

  const [locationData, setLocationData] = useState(null);

  const rawStatus = emp.Employee_Status || "Deactive";
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isTerminated = normalizedStatus === "terminated";

  return (
    <div
      style={{
        display: "flex",
        gap: "1.5rem",
        background: "#fff",
        padding: "1.5rem",
        borderRadius: "16px",
        boxShadow: "0 4px 14px rgba(0,0,0,0.08)",
        maxWidth: 700
      }}
    >
      {/* Photo Section (unchanged) */}
      <div style={{ minWidth: 140, position: "relative" }}>
        <img
          src={`http://localhost:5001${emp.imageUrl}`}
          alt={emp.EmpName}
          style={{
            width: 120,
            height: 120,
            objectFit: "cover",
            borderRadius: 8,
            border: "2px solid #f0f0f0"
          }}
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = "/images/no-photo.jpg";
          }}
        />
        <span
          style={{
            position: "absolute",
            bottom: 6,
            left: "50%",
            transform: "translateX(-50%)",
            background: normalizedStatus === "active" ? "#0b9" : "#999",
            color: "#fff",
            padding: "4px 8px",
            borderRadius: 6,
            fontSize: 12
          }}
        >
          {rawStatus}
        </span>
      </div>

      {/* Details Table */}
      <div style={{ flex: 1 }}>
        <h2 style={{ margin: "0 0 12px", fontSize: 20, fontWeight: 600 }}>
          {emp.EmpName}
        </h2>
        <div
          style={{
            display: "grid",
            gridTemplateColumns: "auto 1fr",
            gap: "8px 12px",
            fontSize: 14
          }}
        >
          <span><FaIdBadge /> Employee ID</span>
          <span>{emp.EmployeeID || "—"}</span>

          <span><FaUserTie /> Personnel Type</span>
          <span>{emp.PersonnelType || "—"}</span>

          <span><FaUserCheck /> Manager</span>
          <span>{emp.Manager_Name || "—"}</span>

          <span><FaIdBadge /> Manager WU ID</span>
          <span>{emp.Manager_WU_ID || "—"}</span>

          <span><FaUserCheck /> Status</span>
          <span>{rawStatus}</span>

          <span><FaCreditCard /> Total Cards</span>
          <span>{emp.Total_Cards ?? 0}</span>

          <span><FaCreditCard /> Active Cards</span>
          <span>{emp.Active_Cards ?? 0}</span>

          {/* Location Info */}
          {locationData?.found && (
            <>
              <span><FaMapMarkerAlt /> Location</span>
              <span>{locationData.partition} {locationData.floor ? `· ${locationData.floor}` : ""}</span>

              <span><FaMapMarkerAlt /> Zone</span>
              <span>{locationData.Zone}</span>

              <span><FaCalendarAlt /> Date</span>
              <span>{locationData.date}</span>

              <span><FaClock /> Time</span>
              <span>{locationData.time}</span>

              <span><FaDoorOpen /> Door</span>
              <span>{locationData.door}</span>

              <span><FaExchangeAlt /> Direction</span>
              <span>{locationData.direction}</span>
            </>
          )}
        </div>

        {/* Live Location Fetch */}
        <CurrentLocation empId={emp.id} onLocationUpdate={setLocationData} />
      </div>
    </div>
  );
}
