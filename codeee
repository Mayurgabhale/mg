import React from "react";
import CurrentLocation from "./CurrentLocation";
import {
  User,
  IdCard,
  Briefcase,
  UserCheck,
  Layers,
} from "lucide-react";

export default function EmployeeCard({ emp }) {
  if (!emp) return null;

  const rawStatus = emp.Employee_Status || "Deactive";
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isActive = normalizedStatus === "active";

  return (
    <div
      className={`rounded-2xl shadow-lg p-6 flex flex-wrap gap-6 max-w-full transition-all duration-300 ${
        isActive
          ? "bg-gradient-to-r from-green-600 to-emerald-500 text-white"
          : "bg-gradient-to-r from-gray-700 to-gray-900 text-gray-200"
      }`}
    >
      {/* Profile Image */}
      <div className="flex-shrink-0 w-full sm:w-72 text-center relative">
        <img
          src={`http://localhost:5001${emp.imageUrl}`}
          alt={emp.EmpName}
          className="rounded-xl border-4 border-white/20 object-cover w-full h-auto"
          onError={(e) => {
            e.target.onerror = null;
            e.target.src = "/images/no-photo.jpg";
          }}
        />
        <span
          className={`absolute bottom-3 left-1/2 -translate-x-1/2 px-3 py-1 text-xs font-semibold rounded-full ${
            isActive ? "bg-green-500 text-white" : "bg-gray-500 text-white"
          }`}
        >
          {rawStatus}
        </span>
      </div>

      {/* Employee Info */}
      <div className="flex-1 min-w-[250px]">
        <h2 className="flex items-center gap-2 text-2xl font-bold">
          <User size={22} /> {emp.EmpName}
        </h2>

        <div className="mt-4 grid grid-cols-[150px_1fr] gap-x-4 gap-y-2 text-sm">
          <label className="flex items-center gap-1">
            <IdCard size={14} /> Employee ID
          </label>
          <span>{emp.EmployeeID || "—"}</span>

          <label className="flex items-center gap-1">
            <Briefcase size={14} /> Personnel Type
          </label>
          <span>{emp.PersonnelType || "—"}</span>

          <label className="flex items-center gap-1">
            <UserCheck size={14} /> Manager
          </label>
          <span>{emp.Manager_Name || "—"}</span>

          <label>Manager WU ID</label>
          <span>{emp.Manager_WU_ID || "—"}</span>

          <label>Status</label>
          <span>{rawStatus}</span>

          <label className="flex items-center gap-1">
            <Layers size={14} /> Total Cards
          </label>
          <span>{emp.Total_Cards ?? 0}</span>

          <label>Active Cards</label>
          <span>{emp.Active_Cards ?? 0}</span>
        </div>

        {/* Current Location */}
        <div className="mt-6">
          <CurrentLocation empId={emp.id} />
        </div>
      </div>
    </div>
  );
}












import React, { useEffect, useState } from "react";
import axios from "axios";
import { MapPin, Clock, DoorClosed, Compass } from "lucide-react";

export default function CurrentLocation({ empId }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState("");

  useEffect(() => {
    if (!empId) {
      setLoc(null);
      setError("");
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError("");
    setLoc(null);

    axios
      .get(`http://localhost:5001/api/employees/${empId}/location`, {
        timeout: 5000,
      })
      .then((res) => {
        if (cancelled) return;
        setLoc(res.data);
      })
      .catch(() => {
        if (cancelled) return;
        setError("Failed to load location");
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="bg-white/10 rounded-xl p-4 shadow-md text-sm backdrop-blur-sm">
      <h4 className="flex items-center gap-2 font-semibold mb-3">
        <MapPin size={16} /> Swipe Details
      </h4>

      {loading && <div>Loading location…</div>}
      {error && <div className="text-red-400">{error}</div>}
      {!loading && loc && !loc.found && (
        <div className="text-green-400">No recent swipe</div>
      )}

      {!loading && loc?.found && (
        <div className="grid gap-2">
          <div className="font-semibold">
            {loc.partition || "—"} {loc.floor ? `· ${loc.floor}` : ""}
          </div>

          {loc.timestampUTC && (() => {
            const istDate = new Date(loc.timestampUTC).toLocaleDateString(
              "en-IN",
              { timeZone: "Asia/Kolkata" }
            );
            const istTime = new Date(loc.timestampUTC).toLocaleTimeString(
              "en-IN",
              { timeZone: "Asia/Kolkata" }
            );
            return (
              <>
                <div className="flex items-center gap-2">
                  <Clock size={14} /> Date: {istDate}
                </div>
                <div className="flex items-center gap-2">
                  <Clock size={14} /> Time: {istTime}
                </div>
              </>
            );
          })()}

          {loc.door && (
            <div className="flex items-center gap-2">
              <DoorClosed size={14} /> Door: {loc.door}
            </div>
          )}
          {loc.direction && (
            <div className="flex items-center gap-2">
              <Compass size={14} /> Direction: {loc.direction}
            </div>
          )}
        </div>
      )}
    </div>
  );
}