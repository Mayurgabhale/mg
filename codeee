import React from 'react';
import CurrentLocation from './CurrentLocation';
import { User, IdCard, Briefcase, UserCheck, Layers } from 'lucide-react';

export default function EmployeeCard({ emp }) {
  if (!emp) return null;

  const rawStatus = emp.Employee_Status || 'Deactive';
  const normalizedStatus = rawStatus.trim().toLowerCase();

  const bgColor =
    normalizedStatus === 'active'
      ? 'linear-gradient(135deg, #0f9d58, #34a853)'
      : 'linear-gradient(135deg, #5f6368, #3c4043)';

  return (
    <div
      style={{
        background: bgColor,
        borderRadius: '16px',
        padding: '1.5rem',
        display: 'flex',
        flexWrap: 'wrap',
        gap: '1.5rem',
        alignItems: 'flex-start',
        boxShadow: '0 6px 15px rgba(0,0,0,0.2)',
        color: '#fff',
        maxWidth: '100%',
        transition: 'transform 0.2s ease, box-shadow 0.2s ease',
      }}
      className="employee-card"
    >
      {/* Profile Image */}
      <div style={{ flex: '0 0 250px', textAlign: 'center', flexShrink: 0 }}>
        <div style={{ position: 'relative' }}>
          <img
            src={`http://localhost:5001${emp.imageUrl}`}
            alt={emp.EmpName}
            style={{
              width: '100%',
              height: 'auto',
              borderRadius: '12px',
              border: '3px solid rgba(255,255,255,0.2)',
              objectFit: 'cover',
              boxShadow: '0 4px 8px rgba(0,0,0,0.25)'
            }}
            onError={(e) => { e.target.onerror = null; e.target.src = '/images/no-photo.jpg'; }}
          />
          <span
            style={{
              position: 'absolute',
              bottom: 8,
              left: '50%',
              transform: 'translateX(-50%)',
              background: 'rgba(0,0,0,0.6)',
              backdropFilter: 'blur(4px)',
              color: '#fff',
              padding: '6px 12px',
              borderRadius: '20px',
              fontSize: '12px',
              fontWeight: 600
            }}
          >
            {rawStatus}
          </span>
        </div>
      </div>

      {/* Employee Info */}
      <div style={{ flex: '1', minWidth: '250px' }}>
        <h2
          style={{
            margin: 0,
            fontSize: '1.6rem',
            fontWeight: 700,
            display: 'flex',
            alignItems: 'center',
            gap: '10px'
          }}
        >
          <User size={20} /> {emp.EmpName}
        </h2>

        <div
          style={{
            marginTop: '1rem',
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))',
            gap: '10px 16px'
          }}
        >
          <InfoRow icon={<IdCard size={14} />} label="Employee ID" value={emp.EmployeeID || '—'} />
          <InfoRow icon={<Briefcase size={14} />} label="Personnel Type" value={emp.PersonnelType || '—'} />
          <InfoRow icon={<UserCheck size={14} />} label="Manager" value={emp.Manager_Name || '—'} />
          <InfoRow label="Manager WU ID" value={emp.Manager_WU_ID || '—'} />
          <InfoRow label="Status" value={rawStatus} />
          <InfoRow icon={<Layers size={14} />} label="Total Cards" value={emp.Total_Cards ?? 0} />
          <InfoRow label="Active Cards" value={emp.Active_Cards ?? 0} />
        </div>

        {/* Current Location */}
        <CurrentLocation empId={emp.id} />
      </div>
    </div>
  );
}

function InfoRow({ icon, label, value }) {
  return (
    <>
      <label style={{ opacity: 0.9, fontSize: 13, display: 'flex', alignItems: 'center', gap: '6px' }}>
        {icon} {label}
      </label>
      <span style={{ fontWeight: 500 }}>{value}</span>
    </>
  );
}





















import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { MapPin, Clock, DoorClosed, Compass } from 'lucide-react';

export default function CurrentLocation({ empId }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!empId) {
      setLoc(null);
      setError('');
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError('');
    setLoc(null);

    axios
      .get(`http://localhost:5001/api/employees/${empId}/location`, { timeout: 5000 })
      .then((res) => {
        if (cancelled) return;
        setLoc(res.data);
      })
      .catch(() => {
        if (cancelled) return;
        setError('Failed to load location');
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId]);

  if (!empId) return null;

  return (
    <div
      style={{
        background: 'rgba(0,0,0,0.2)',
        borderRadius: '12px',
        padding: '1rem',
        marginTop: '1rem',
        fontSize: '14px',
        color: '#fff',
        backdropFilter: 'blur(6px)',
      }}
    >
      <h4
        style={{
          margin: '0 0 0.5rem 0',
          fontSize: 16,
          fontWeight: 600,
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}
      >
        <MapPin size={16} /> Swipe Details
      </h4>

      {loading && <div>Loading location…</div>}
      {error && <div style={{ color: '#ff6b6b' }}>{error}</div>}
      {!loading && loc && !loc.found && <div style={{ color: '#2ced0e' }}>No recent swipe</div>}

      {!loading && loc && loc.found && (
        <div style={{ display: 'grid', gap: '6px' }}>
          <div style={{ fontWeight: 600 }}>
            {loc.partition || '—'} {loc.floor ? `· ${loc.floor}` : ''}
          </div>

          {loc.timestampUTC && (() => {
            const istDate = new Date(loc.timestampUTC).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' });
            const istTime = new Date(loc.timestampUTC).toLocaleTimeString('en-IN', { timeZone: 'Asia/Kolkata' });
            return (
              <>
                <InfoItem icon={<Clock size={14} />} label={`Date: ${istDate}`} />
                <InfoItem icon={<Clock size={14} />} label={`Time: ${istTime}`} />
              </>
            );
          })()}

          {loc.door && <InfoItem icon={<DoorClosed size={14} />} label={`Door: ${loc.door}`} />}
          {loc.direction && <InfoItem icon={<Compass size={14} />} label={`Direction: ${loc.direction}`} />}
        </div>
      )}
    </div>
  );
}

function InfoItem({ icon, label }) {
  return (
    <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>
      {icon} {label}
    </div>
  );
}