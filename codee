// src/components/ERTOverview.jsx
import React, { useMemo, useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaEnvelopeOpenText,
  FaMobileAlt,
  FaMapMarkerAlt,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers,
  FaEye,
  FaEyeSlash,
  FaFilter,
  FaDownload,
  FaPrint
} from 'react-icons/fa';

/**
 * Modern ERT overview (Tailwind + Framer Motion)
 * Usage: <ERTOverview ertStatus={ertStatus} />
 *
 * Requirements:
 *  - Tailwind CSS set up in your project
 *  - framer-motion and react-icons installed
 *    npm install framer-motion react-icons
 */

const DEFAULT_PHOTO = '/photos/default.png';

const ROLE_ICONS = {
  'Site Head': <FaUserTie className="text-sky-400" />,
  'BCM Team / Site Operations': <FaUserShield className="text-emerald-400" />,
  HR: <FaUserTie className="text-violet-400" />,
  'Incident Controller': <FaUserShield className="text-amber-400" />,
  'ERT Team Leader': <FaUserShield className="text-red-400" />,
  'ERT Team Members': <FaUsers className="text-blue-400" />,
  'First Aid Team': <FaUserNurse className="text-orange-400" />
};

const BASE_LOCATION_BY_ROLE = {
  'Site Head': 'Podium Floor – Red Zone',
  HR: 'Podium Floor – Red Zone',
  'Incident Controller': 'Podium Floor – Red Zone',
  'First Aid Team': 'Podium Floor – Green Zone',
  'ERT Team Leader': 'Podium Floor – Green Zone',
  'BCM Team / Site Operations': 'Podium Floor – Red Zone'
};

const FLOORS = ['Podium Floor', '2nd Floor', 'Tower B'];
const FLOOR_ICONS = {
  'Podium Floor': <FaHome />,
  '2nd Floor': <FaBuilding />,
  'Tower B': <FaLayerGroup />
};

// helpers
const toSlug = (name = '') =>
  name
    .toString()
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '_') // replace non-alphanumerics with underscore
    .replace(/^_+|_+$/g, ''); // trim leading/trailing underscores

const getPhotoSrc = (member) => {
  if (!member) return DEFAULT_PHOTO;
  if (member.photo) return member.photo;
  const name = member.name || member.Name;
  if (name) return `/photos/${toSlug(name)}.png`;
  return DEFAULT_PHOTO;
};

// CSV download helper (client-side)
function downloadCSV(filename, rows) {
  if (!rows || !rows.length) return;
  const escape = (s = '') => s.toString().replace(/"/g, '""');
  const header = Object.keys(rows[0] || {})
    .map((h) => `"${escape(h)}"`)
    .join(',');
  const body = rows
    .map((r) =>
      Object.values(r)
        .map((v) => `"${escape(v ?? '')}"`)
        .join(',')
    )
    .join('\n');
  const csv = header + '\n' + body;
  const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.setAttribute('download', filename);
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

export default function ERTOverview({ ertStatus = {} }) {
  const [query, setQuery] = useState('');
  const [filterFloor, setFilterFloor] = useState(null);
  const [showAll, setShowAll] = useState(false);
  const [compactMode, setCompactMode] = useState(false);

  // flatten members
  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus || {}).forEach(([role, members]) => {
      (members || []).forEach((m) => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  const floorCounts = useMemo(() => {
    const c = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };
    allMembers.forEach((m) => {
      if (!m.present) return;
      const z = (m.zone || '').toLowerCase();
      if (z.includes('2nd')) c['2nd Floor']++;
      else if (z.includes('tower b')) c['Tower B']++;
      else c['Podium Floor']++;
    });
    return c;
  }, [allMembers]);

  // role filtering & searching
  const membersForRole = (role) => {
    const raw = (ertStatus[role] || []).map((m) => ({ role, ...m }));
    const filtered = raw.filter((m) => {
      if (filterFloor) {
        const zoneMatch = (m.zone || m.Floor || '').toLowerCase().includes(filterFloor.toLowerCase());
        const baseMatch = (BASE_LOCATION_BY_ROLE[role] || '').toLowerCase().includes(filterFloor.toLowerCase());
        if (!zoneMatch && !baseMatch) return false;
      }
      if (query) {
        const text = `${m.name || m.Name || ''} ${m.email || m.Email || ''} ${m.phone || m.Phone || ''}`.toLowerCase();
        if (!text.includes(query.toLowerCase())) return false;
      }
      return true;
    });
    filtered.sort((a, b) => (b.present ? 1 : 0) - (a.present ? 1 : 0));
    return filtered;
  };

  // leaders list
  const leaders = useMemo(() => membersForRole('ERT Team Leader'), [ertStatus, filterFloor, query]);

  // members list
  const members = useMemo(() => {
    const list = (ertStatus['ERT Team Members'] || []).map((m) => ({
      role: 'ERT Team Members',
      ...m,
      name: m.Name || m.name,
      baseLocation: m['Base Location'] || m.Floor || m.zone
    }));

    let filtered = list.filter((m) => {
      if (filterFloor) {
        const live = (m.zone || m.liveLocation || '').toLowerCase();
        const base = (m.baseLocation || '').toLowerCase();
        if (!(live.includes(filterFloor.toLowerCase()) || base.includes(filterFloor.toLowerCase()))) return false;
      }
      if (query) {
        const text = `${m.name || ''} ${m.email || ''} ${m.phone || ''}`.toLowerCase();
        if (!text.includes(query.toLowerCase())) return false;
      }
      return true;
    });

    filtered.sort((a, b) => {
      const p = (b.present ? 1 : 0) - (a.present ? 1 : 0);
      if (p !== 0) return p;
      return (a.name || '').localeCompare(b.name || '');
    });

    return showAll ? filtered : filtered.slice(0, 8);
  }, [ertStatus, filterFloor, query, showAll]);

  // export visible
  const exportVisible = () => {
    const rows = allMembers
      .filter((m) => {
        if (filterFloor) {
          const live = (m.zone || '').toLowerCase();
          const base = (BASE_LOCATION_BY_ROLE[m.role] || '').toLowerCase();
          if (!live.includes(filterFloor.toLowerCase()) && !base.includes(filterFloor.toLowerCase())) return false;
        }
        if (query) {
          const text = `${m.name || m.Name || ''} ${m.email || m.Email || ''} ${m.phone || m.Phone || ''}`.toLowerCase();
          if (!text.includes(query.toLowerCase())) return false;
        }
        return true;
      })
      .map((m) => ({
        name: m.name || m.Name || '',
        role: m.role || '',
        present: m.present ? 'Available' : 'Away',
        email: m.email || m.Email || '',
        phone: m.phone || m.Phone || '',
        zone: m.zone || ''
      }));

    if (!rows.length) {
      window.alert('No visible members to export');
      return;
    }
    downloadCSV('ert-visible.csv', rows);
  };

  // keyboard '/' focuses search
  useEffect(() => {
    function onKey(e) {
      if (e.key === '/') {
        const el = document.getElementById('ert-search-input');
        if (el) {
          e.preventDefault();
          el.focus();
        }
      }
    }
    window.addEventListener('keydown', onKey);
    return () => window.removeEventListener('keydown', onKey);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-950 p-6 text-slate-100">
      <div className="mx-auto max-w-7xl">
        {/* Header */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
          <div>
            <h1 className="text-2xl sm:text-3xl font-extrabold">ERT • Live Roster</h1>
            <p className="text-sm text-slate-400 mt-1">At-a-glance availability and contact for Emergency Response Teams.</p>
          </div>

          <div className="flex items-center gap-3">
            <div className="flex items-center bg-slate-800/30 ring-1 ring-slate-700 rounded-full px-3 py-2 gap-2">
              <FaFilter className="text-slate-300" />
              <input
                id="ert-search-input"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                placeholder="Search name, email, phone... (press /)"
                className="bg-transparent outline-none placeholder:text-slate-500 text-sm text-slate-100 w-64"
                aria-label="Search people"
              />
            </div>

            <button
              onClick={() => setShowAll((s) => !s)}
              className="inline-flex items-center gap-2 rounded-lg bg-slate-800/40 px-3 py-2 text-sm hover:bg-slate-800/60"
              aria-pressed={showAll}
            >
              {showAll ? <><FaEyeSlash /> Show Less</> : <><FaEye /> Show More</>}
            </button>

            <button
              onClick={() => exportVisible()}
              className="inline-flex items-center gap-2 rounded-lg bg-slate-800/40 px-3 py-2 text-sm hover:bg-slate-800/60"
              title="Export visible members as CSV"
            >
              <FaDownload /> Export
            </button>

            <button
              onClick={() => window.print()}
              className="inline-flex items-center gap-2 rounded-lg bg-slate-800/40 px-3 py-2 text-sm hover:bg-slate-800/60"
              title="Print roster"
            >
              <FaPrint /> Print
            </button>

            <button
              onClick={() => setCompactMode((c) => !c)}
              className="ml-1 inline-flex items-center gap-2 rounded-lg bg-slate-800/30 px-2 py-2 text-xs hover:bg-slate-800/50"
              aria-pressed={compactMode}
            >
              {compactMode ? 'Compact' : 'Comfort'}
            </button>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 mb-6">
          <div className="bg-gradient-to-b from-slate-800/50 to-slate-800/30 rounded-2xl p-4 shadow-lg flex flex-col items-center">
            <div className="text-xs text-slate-400">Total Active</div>
            <div className="text-2xl font-bold mt-1">{allMembers.filter((m) => m.present).length}</div>
          </div>

          {FLOORS.map((f) => {
            const count = floorCounts[f] || 0;
            const active = filterFloor === f;
            return (
              <button
                key={f}
                onClick={() => setFilterFloor((prev) => (prev === f ? null : f))}
                className={`rounded-2xl p-4 shadow-lg flex flex-col items-center transition-transform hover:-translate-y-1 focus:outline-none focus:ring-2 ${
                  active ? 'ring-2 ring-sky-500 bg-sky-900/20' : 'bg-slate-800/40'
                }`}
                aria-pressed={active}
              >
                <div className="text-lg text-slate-200">{FLOOR_ICONS[f]}</div>
                <div className="text-sm text-slate-400 mt-1">{f}</div>
                <div className="text-xl font-semibold mt-1">{count}</div>
              </button>
            );
          })}
        </div>

        {/* Main layout */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left: fixed roles */}
          <div className="space-y-4">
            {['Site Head', 'BCM Team / Site Operations', 'HR', 'Incident Controller'].map((role) => {
              const list = membersForRole(role);
              return (
                <motion.div
                  key={role}
                  initial={{ opacity: 0, y: 6 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -6 }}
                  className="bg-slate-800/30 rounded-2xl p-4 shadow-md"
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <div className="text-xl">{ROLE_ICONS[role] || <FaUserTie />}</div>
                      <div className="font-semibold">{role}</div>
                    </div>
                    <div className="text-sm text-slate-400">{(ertStatus[role] || []).length} assigned</div>
                  </div>

                  <div className={`${compactMode ? 'space-y-1' : 'space-y-3'} max-h-96 overflow-auto pr-2`}>
                    <AnimatePresence>
                      {list.length ? list.map((m, i) => (
                        <motion.div
                          layout
                          key={`${role}-${m.name || i}`}
                          initial={{ opacity: 0, y: 6 }}
                          animate={{ opacity: 1, y: 0 }}
                          exit={{ opacity: 0, y: -6 }}
                          className={`flex items-center justify-between ${compactMode ? 'py-1' : 'py-3'}`}
                        >
                          <div className="flex items-center">
                            <div
                              className={`flex items-center justify-center rounded-full overflow-hidden mr-3 ${compactMode ? 'w-10 h-10' : 'w-12 h-12'}`}
                              style={{ border: m.present ? '2px solid rgba(34,197,94,0.9)' : '2px solid rgba(148,163,184,0.18)' }}
                            >
                              <img
                                src={getPhotoSrc(m)}
                                alt={m.name || 'Member'}
                                className="object-cover w-full h-full"
                                onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = DEFAULT_PHOTO; }}
                              />
                            </div>
                            <div>
                              <div className="font-medium text-slate-100">{m.name}</div>
                              <div className="text-xs text-slate-400">{m.present ? (m.zone || 'Unknown Zone') : (BASE_LOCATION_BY_ROLE[role] || '')}</div>
                            </div>
                          </div>

                          <div className="flex items-center gap-3">
                            <a href={`mailto:${m.email || m.Email || ''}`} className="text-sky-300 text-sm truncate">{m.email}</a>
                            <span className={`px-2 py-1 text-xs font-semibold rounded-full ${m.present ? 'bg-emerald-100 text-emerald-800' : 'bg-rose-100 text-rose-800'}`}>{m.present ? 'Available' : 'Away'}</span>
                          </div>
                        </motion.div>
                      )) : (
                        <div className="text-center text-slate-400 py-6">No members</div>
                      )}
                    </AnimatePresence>
                  </div>
                </motion.div>
              );
            })}
          </div>

          {/* Middle: Leaders */}
          <div className="space-y-4">
            <div className="bg-slate-800/30 rounded-2xl p-4 shadow-md h-full flex flex-col">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-3">
                  <div className="text-xl">{ROLE_ICONS['ERT Team Leader']}</div>
                  <div className="font-semibold">ERT Team Leaders</div>
                </div>
                <div className="text-sm text-slate-400">{(ertStatus['ERT Team Leader'] || []).length} total</div>
              </div>

              <div className="flex-1 overflow-auto">
                <AnimatePresence>
                  {leaders.length ? leaders.map((m, i) => (
                    <motion.div
                      key={`leader-${m.name || i}`}
                      layout
                      initial={{ opacity: 0, y: 6 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -6 }}
                      className="flex items-center justify-between py-3 border-b border-slate-700 last:border-0"
                    >
                      <div className="flex items-center">
                        <div className="w-12 h-12 rounded-full overflow-hidden mr-3" style={{ border: m.present ? '2px solid rgba(34,197,94,0.9)' : '2px solid rgba(148,163,184,0.18)' }}>
                          <img src={getPhotoSrc(m)} alt={m.name} className="w-full h-full object-cover" onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = DEFAULT_PHOTO; }} />
                        </div>
                        <div>
                          <div className="font-medium">{m.name}</div>
                          <div className="text-xs text-slate-400">{m.present ? (m.zone || 'Unknown Zone') : BASE_LOCATION_BY_ROLE['ERT Team Leader']}</div>
                        </div>
                      </div>
                      <div className="flex items-center gap-3">
                        <a href={`mailto:${m.email || m.Email || ''}`} className="text-sky-300 text-sm truncate">{m.email}</a>
                        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${m.present ? 'bg-emerald-100 text-emerald-800' : 'bg-rose-100 text-rose-800'}`}>{m.present ? 'Available' : 'Away'}</span>
                      </div>
                    </motion.div>
                  )) : (
                    <div className="text-center text-slate-400 py-6">No leaders</div>
                  )}
                </AnimatePresence>
              </div>
            </div>

            {/* stacked other role cards */}
            {Object.keys(ertStatus).filter((r) => !['Site Head', 'BCM Team / Site Operations', 'HR', 'Incident Controller', 'ERT Team Leader', 'ERT Team Members'].includes(r)).map((role) => (
              <div key={role} className="bg-slate-800/30 rounded-2xl p-4 shadow-md">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center gap-3">
                    <div className="text-xl">{ROLE_ICONS[role] || <FaUserTie />}</div>
                    <div className="font-semibold">{role}</div>
                  </div>
                  <div className="text-sm text-slate-400">{(ertStatus[role] || []).length} assigned</div>
                </div>
                <div className="space-y-2">
                  {(ertStatus[role] || []).slice(0, 6).map((m, idx) => (
                    <div key={idx} className="flex items-center gap-3">
                      <div className="w-10 h-10 rounded-full overflow-hidden" style={{ border: m.present ? '2px solid rgba(34,197,94,0.9)' : '2px solid rgba(148,163,184,0.18)' }}>
                        <img src={getPhotoSrc(m)} alt={m.name} className="w-full h-full object-cover" onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = DEFAULT_PHOTO; }} />
                      </div>
                      <div>
                        <div className="font-medium">{m.name}</div>
                        <div className="text-xs text-slate-400">{m.present ? (m.zone || 'Unknown') : (BASE_LOCATION_BY_ROLE[role] || '')}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>

          {/* Right: members list */}
          <div className="space-y-4">
            <div className="bg-slate-800/30 rounded-2xl p-4 shadow-md h-full flex flex-col">
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-3">
                  <div className="text-xl">{ROLE_ICONS['ERT Team Members']}</div>
                  <div className="font-semibold">ERT Team Members</div>
                </div>
                <div className="text-sm text-slate-400">{(ertStatus['ERT Team Members'] || []).length} total</div>
              </div>

              <div className="flex-1 overflow-auto">
                <AnimatePresence>
                  {members.length ? members.map((m, idx) => (
                    <motion.div
                      key={`member-${m.name || idx}`}
                      layout
                      initial={{ opacity: 0, y: 6 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -6 }}
                      className="flex items-start justify-between py-3 border-b border-slate-700 last:border-0"
                    >
                      <div className="flex items-start gap-3">
                        <div className="w-12 h-12 rounded-full overflow-hidden" style={{ border: m.present ? '3px solid rgba(34,197,94,0.9)' : '2px solid rgba(148,163,184,0.18)' }}>
                          <img src={getPhotoSrc(m)} alt={m.name} className="w-full h-full object-cover" onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = DEFAULT_PHOTO; }} />
                        </div>
                        <div style={{ minWidth: 0 }}>
                          <div className="font-medium text-slate-100">{m.name}</div>
                          <div className="text-xs text-slate-400">{m.present ? (m.liveLocation || m.zone || 'Unknown Zone') : (m.baseLocation || '')}</div>
                          <div className="mt-2 text-xs text-slate-300 flex flex-wrap gap-3">
                            <a href={`mailto:${m.email || m.Email || ''}`} className="text-sky-300 truncate">{m.email || ''}</a>
                            <span className="text-emerald-300">{m.phone || ''}</span>
                          </div>
                        </div>
                      </div>

                      <div className="flex flex-col items-end gap-2">
                        <span className={`px-2 py-1 text-xs font-semibold rounded-full ${m.present ? 'bg-emerald-100 text-emerald-800' : 'bg-rose-100 text-rose-800'}`}>{m.present ? 'Available' : 'Away'}</span>
                      </div>
                    </motion.div>
                  )) : (
                    <div className="text-center text-slate-400 py-6">No members</div>
                  )}
                </AnimatePresence>
              </div>

              <div className="mt-3 flex items-center justify-between">
                <div className="text-xs text-slate-400">Showing {members.length} of {(ertStatus['ERT Team Members'] || []).length}</div>
                <div>
                  <button onClick={() => setShowAll((s) => !s)} className="inline-flex items-center gap-2 rounded-lg bg-slate-800/40 px-3 py-2 text-sm">
                    {showAll ? <><FaEyeSlash /> Show Less</> : <><FaEye /> Show More</>}
                  </button>
                </div>
              </div>
            </div>

            {/* legend and quick actions */}
            <div className="flex items-center justify-between gap-4">
              <div className="flex items-center gap-4 text-sm text-slate-300">
                <div className="flex items-center gap-2"><span className="inline-block w-3 h-3 rounded-full bg-emerald-400" /> Available</div>
                <div className="flex items-center gap-2"><span className="inline-block w-3 h-3 rounded-full bg-rose-400" /> Away</div>
              </div>
              <div className="flex items-center gap-2">
                <button onClick={() => window.print()} className="px-3 py-2 rounded-md bg-slate-800/40 text-sm">Print</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}