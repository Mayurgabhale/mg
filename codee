// Handler: GET /api/occupancy-at?at=<ISO-8601>
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // Treat the incoming `at` as a UTC instant (this is what frontend sends).
    // Convert that instant into the local calendar date in Asia/Kolkata.
    const asOfLocalDate = DateTime.fromJSDate(atDate, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');

    // Fetch events in the 24h window ending at atDate (same as before)
    const events = await fetchEventsWindow(atDate);

    // Keep only events whose Dateonly (SQL) equals the requested Asia/Kolkata calendar date
    const filteredEvents = events.filter(evt => String(evt.Dateonly) === asOfLocalDate);

    // Build occupancy and visited stats from the filtered events only
    const occupancy = await buildOccupancy(filteredEvents);
    const visitedStats = buildVisitedForDate(filteredEvents, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };

    // Return `asOf` as the client-requested UTC instant (so frontend still gets what it asked)
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};