
const detailRows = useMemo(() => {
  if (!data || !pickedDate || !showDetails) return [];
  const ds = format(pickedDate, 'yyyy-MM-dd');

  // a) all swipes that day for our partitions
  const all = data.details.filter(r =>
    filteredPartitionKeys.includes(r.PartitionName2) &&
    r.LocaleMessageTime && r.LocaleMessageTime.startsWith(ds)
  );

  // b) oldest â†’ newest
  all.sort((a, b) => new Date(a.LocaleMessageTime) - new Date(b.LocaleMessageTime));

  // c) last swipe per person
  const lastByPerson = {};
  all.forEach(r => { lastByPerson[r.PersonGUID] = r; });

  // d) only those whose final swipe was an entry (original behaviour kept)
  let result = Object.values(lastByPerson);

  // NEW: if a company is selected, filter by company name (case-insensitive, trimmed)
  if (selectedCompany) {
    const sc = String(selectedCompany).trim().toLowerCase();
    result = result.filter(r => {
      const comp = (r.CompanyName || 'Unknown').toString().trim().toLowerCase();
      return comp === sc;
    });
  }

  return result;
}, [data, pickedDate, filteredPartitionKeys, selectedCompany, showDetails]);


....
// inside companyRows.map((r, i) => { ... })
const companyOnly = r.company; // company string only
const isSelectedCompany = selectedCompany === companyOnly;

return (
  <TableRow
    key={`${r.company}-${i}`}
    onClick={() => {
      // toggle selection by company name (NOT country||city||company)
      if (selectedCompany === companyOnly) {
        setSelectedCompany(null);
        setShowDetails(true);
      } else {
        setSelectedCompany(companyOnly);
        setShowDetails(true);
      }
    }}
    sx={{
      cursor: 'pointer',
      '&:hover': { backgroundColor: '#474747' },
      ...(isSelectedCompany ? { backgroundColor: '#474747' } : {})
    }}
    tabIndex={0}
    role="button"
  >
    <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
    <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
    <TableCell sx={{ border: '2px solid #000' }}>{r.company}</TableCell>
    <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
      {r.total}
    </TableCell>
  </TableRow>
);

.......



// inside companyRows.map((r, i) => { ... })
const companyOnly = r.company; // company string only
const isSelectedCompany = selectedCompany === companyOnly;

return (
  <TableRow
    key={`${r.company}-${i}`}
    onClick={() => {
      // toggle selection by company name (NOT country||city||company)
      if (selectedCompany === companyOnly) {
        setSelectedCompany(null);
        setShowDetails(true);
      } else {
        setSelectedCompany(companyOnly);
        setShowDetails(true);
      }
    }}
    sx={{
      cursor: 'pointer',
      '&:hover': { backgroundColor: '#474747' },
      ...(isSelectedCompany ? { backgroundColor: '#474747' } : {})
    }}
    tabIndex={0}
    role="button"
  >
    <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
    <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
    <TableCell sx={{ border: '2px solid #000' }}>{r.company}</TableCell>
    <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
      {r.total}
    </TableCell>
  </TableRow>
);

