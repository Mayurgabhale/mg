// Export helpers for rejections (creates a nicer Excel workbook with a small summary sheet)
const mapRejectionForExport = (r) => {
  let localDate = '';
  let localTime = '';
  try {
    if (r.LocaleMessageTime) {
      const dt = new Date(r.LocaleMessageTime);
      localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
      localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
    } else if (r.DateOnly) {
      localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0,10) : new Date(r.DateOnly).toISOString().slice(0,10));
      localTime = r.SwipeTime || '';
    }
  } catch (e) {
    localDate = (r.DateOnly || '').slice(0,10);
    localTime = r.SwipeTime || '';
  }

  return {
    Date: localDate,
    Time: localTime,
    Name: r.ObjectName1 || '',
    EmployeeID: r.EmployeeID || '',
    CardNumber: r.CardNumber || '',
    PersonnelType: r.PersonnelType || '',
    Door: r.Door || r.Location || '',
    RejectionType: r.RejectionType || '',
    DerivedFloor: deriveFloorFromRecord(r) || ''
  };
};

const exportRejectionsToExcel = (rows, fileName = 'rejections.xlsx') => {
  if (!rows || rows.length === 0) return;
  const mapped = rows.map(mapRejectionForExport);

  // main sheet
  const ws = XLSX.utils.json_to_sheet(mapped, { header: ['Date','Time','Name','EmployeeID','CardNumber','PersonnelType','Door','RejectionType','DerivedFloor'] });

  // set some column widths for a nicer look
  ws['!cols'] = [
    { wch: 6 },  // index column (we'll keep # when viewing)
    { wch: 12 }, // Date
    { wch: 10 }, // Time
    { wch: 28 }, // Name
    { wch: 14 }, // EmployeeID
    { wch: 14 }, // CardNumber
    { wch: 16 }, // PersonnelType
    { wch: 48 }, // Door
    { wch: 20 }, // RejectionType
    { wch: 12 }  // DerivedFloor
  ];

  // Summary sheet with small metadata
  const summary = [
    { Key: 'Export Date', Value: new Date().toLocaleString('en-CA') },
    { Key: 'Record Count', Value: mapped.length },
    { Key: 'Generated By', Value: 'FloorInOutTable' }
  ];
  const wsSummary = XLSX.utils.json_to_sheet(summary);
  wsSummary['!cols'] = [{ wch: 20 }, { wch: 30 }];

  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Rejections');
  XLSX.utils.book_append_sheet(wb, wsSummary, 'Summary');

  // force download
  XLSX.writeFile(wb, fileName);
};





.....


{/* Rejection details modal (today) */}
<Modal show={showRejectionModal} onHide={() => setShowRejectionModal(false)} size="lg" centered>
  <Modal.Header closeButton>
    <Modal.Title>Rejections Today - {selectedRejectionFloor}</Modal.Title>
  </Modal.Header>
  <Modal.Body>
    {selectedRejectionList.length === 0 ? (
      <div>No rejections recorded today for {selectedRejectionFloor}</div>
    ) : (
      <Table striped bordered hover size="sm">
        <thead>
          <tr>
            <th>#</th>
            <th>Date</th>
            <th>Time</th>
            <th>Name</th>
            <th>EmployeeID</th>
            <th>CardNumber</th>
            <th>PersonnelType</th>
            <th>Door</th>
            <th>RejectionType</th>
          </tr>
        </thead>
        <tbody>
          {selectedRejectionList.map((r, i) => {
            let localDate = '';
            let localTime = '';
            try {
              if (r.LocaleMessageTime) {
                const dt = new Date(r.LocaleMessageTime);
                localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
              } else if (r.DateOnly) {
                localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0,10) : new Date(r.DateOnly).toISOString().slice(0,10));
                localTime = r.SwipeTime || '';
              }
            } catch (e) {
              localDate = (r.DateOnly || '').slice(0,10);
              localTime = r.SwipeTime || '';
            }

            return (
              <tr key={i}>
                <td>{i + 1}</td>
                <td>{localDate}</td>
                <td>{localTime}</td>
                <td>{r.ObjectName1}</td>
                <td>{r.EmployeeID}</td>
                <td>{r.CardNumber || '—'}</td>
                <td>{r.PersonnelType || '—'}</td>
                <td style={{ maxWidth: 280, wordBreak: 'break-word' }}>{r.Door || r.Location || '—'}</td>
                <td>{r.RejectionType || '—'}</td>
              </tr>
            );
          })}
        </tbody>
      </Table>
    )}
  </Modal.Body>
  <Modal.Footer>
    <Button
      style={{ background: '#FFC72C', borderColor: '#FFC72C', color: '#000', fontWeight: 600 }}
      onClick={() => exportRejectionsToExcel(selectedRejectionList, `rejections-${(selectedRejectionFloor||'floor').replace(/\s+/g,'_')}-${new Date().toISOString().slice(0,10)}.xlsx`)}
    >
      Export Excel
    </Button>
    <Button variant="secondary" onClick={() => setShowRejectionModal(false)}>Close</Button>
  </Modal.Footer>
</Modal>






....


{/* NEW: All Rejections Modal (header click) */}
<Modal show={showAllRejectionsModal} onHide={() => setShowAllRejectionsModal(false)} size="lg" centered>
  <Modal.Header closeButton>
    <Modal.Title>All Rejections Today</Modal.Title>
  </Modal.Header>
  <Modal.Body>
    {(!rejectionAllDetailsToday || rejectionAllDetailsToday.length === 0) ? (
      <div>No rejections recorded today</div>
    ) : (
      <Table striped bordered hover size="sm">
        <thead>
          <tr>
            <th>#</th>
            <th>Date</th>
            <th>Time</th>
            <th>Name</th>
            <th>EmployeeID</th>
            <th>CardNumber</th>
            <th>PersonnelType</th>
            <th>Door</th>
            <th>RejectionType</th>
          </tr>
        </thead>
        <tbody>
          {rejectionAllDetailsToday.map((r, i) => {
            let localDate = '';
            let localTime = '';
            try {
              if (r.LocaleMessageTime) {
                const dt = new Date(r.LocaleMessageTime);
                localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
              } else if (r.DateOnly) {
                localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0,10) : new Date(r.DateOnly).toISOString().slice(0,10));
                localTime = r.SwipeTime || '';
              }
            } catch (e) {
              localDate = (r.DateOnly || '').slice(0,10);
              localTime = r.SwipeTime || '';
            }

            return (
              <tr key={i}>
                <td>{i + 1}</td>
                <td>{localDate}</td>
                <td>{localTime}</td>
                <td>{r.ObjectName1}</td>
                <td>{r.EmployeeID}</td>
                <td>{r.CardNumber || '—'}</td>
                <td>{r.PersonnelType || '—'}</td>
                <td style={{ maxWidth: 280, wordBreak: 'break-word' }}>{r.Door || r.Location || '—'}</td>
                <td>{r.RejectionType || '—'}</td>
              </tr>
            );
          })}
        </tbody>
      </Table>
    )}
  </Modal.Body>
  <Modal.Footer>
    <Button
      style={{ background: '#FFC72C', borderColor: '#FFC72C', color: '#000', fontWeight: 600 }}
      onClick={() => exportRejectionsToExcel(rejectionAllDetailsToday, `all-rejections-${new Date().toISOString().slice(0,10)}.xlsx`)}
    >
      Export Excel
    </Button>
    <Button variant="secondary" onClick={() => setShowAllRejectionsModal(false)}>Close</Button>
  </Modal.Footer>
</Modal>
