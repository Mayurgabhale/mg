let poolPromise = null;

async function getPool(attempts = 10) {
  if (poolPromise) return poolPromise;

  poolPromise = (async () => {
    try {
      const pool = await sql.connect(config);
      console.log('✅ MSSQL pool connected');

      // attach pool-level error listener so we can reset and attempt reconnects
      pool.on('error', err => {
        console.error('❌ MSSQL pool error:', err);
        // Reset promise so next getPool() tries to reconnect
        poolPromise = null;
      });

      return pool;
    } catch (err) {
      console.error('❌ MSSQL pool connection failed:', err);
      poolPromise = null;
      if (attempts > 0) {
        console.log(`⏳ Retrying MSSQL connect (${attempts} left)…`);
        await new Promise(res => setTimeout(res, 3000));
        return getPool(attempts - 1);
      }
      throw err;
    }
  })();

  // Global sql error: log but do not crash the process
  sql.on('error', err => {
    console.error('❌ MSSQL global error:', err);
    // Consider resetting poolPromise only for fatal errors:
    // poolPromise = null;
  });

  return poolPromise;
}