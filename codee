// Helper: try to decide whether an occupant object represents someone currently "in office".
// Adjust this if your source uses different field names for presence.
function isPresent(o = {}) {
  // explicit boolean flags that mean "out"
  if (o.OutOfOffice === true) return false;
  if (o.IsOut === true) return false;
  if (o.IsOnLeave === true) return false;
  if (o.Absent === true) return false;
  if (o.OnLeave === true) return false;

  // explicit presence flag
  if (o.IsPresent === false) return false;
  if (o.InOffice === false) return false;

  // textual status (common)
  const status = (o.Status || o.PersonnelStatus || o.WorkStatus || '').toString().toLowerCase();
  if (status && /(out|absent|leave|vacation|remote|off|offsite|wfh|working from home)/.test(status)) return false;

  // last direction fields (if last swipe direction indicates OUT)
  const dir = (o.LastSwipeDirection || o.Direction || o.SwipeDirection || '').toString().toLowerCase();
  if (dir && /(out|exit)/.test(dir)) return false;

  // Location type: remote / home office
  const workloc = (o.WorkLocation || o.LocationType || '').toString().toLowerCase();
  if (workloc && /(remote|home|offsite|wfh)/.test(workloc)) return false;

  // If nothing explicitly says "out", assume present (safer to show security if unsure).
  return true;
}

const securityByFloor = useMemo(() => {
  const byFloor = {};

  (floorBreakdown || []).forEach(fb => {
    const people = [];
    (fb.occupants || []).forEach(o => {
      const empId = normalizeId(o.EmployeeID);
      if (!securitySet.has(empId)) return;
      // Only count this occupant if they look "present"
      if (!isPresent(o)) return;
      people.push(o);
    });
    if (people.length) {
      byFloor[fb.floor] = (byFloor[fb.floor] || []).concat(people);
    }
  });

  // inOnlyPersons are assumed to be "in" by the existing upstream logic
  (floorInOutSummary || []).forEach(f => {
    (f.inOnlyPersons || []).forEach(pid => {
      const empId = normalizeId(pid);
      if (securitySet.has(empId)) {
        byFloor[f.floor] = (byFloor[f.floor] || []).concat([
          { EmployeeID: empId, ObjectName1: "(Unknown)", Swipe_Time: "—", Door: "—", PersonnelType: "—" }
        ]);
      }
    });
  });

  return byFloor;
}, [floorBreakdown, floorInOutSummary, securitySet]);





....

<td
  style={{
    color: row.securityCount > 0 ? '#FFC72C' : '#aaa',
    fontWeight: row.securityCount > 0 ? 'bold' : 'normal',
    cursor: row.securityCount > 0 ? 'pointer' : 'default',
    textDecoration: row.securityCount > 0 ? 'underline' : 'none'
  }}
  onClick={() => { if (row.securityCount > 0) handleSecurityCellClick(row.floor); }}
>
  {row.securityCount > 0 ? row.securityCount : ''}
</td>