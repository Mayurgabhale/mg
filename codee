// src/components/FloorOccupancyChart.jsx
import React from "react";
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  LabelList,
  Customized,
  Cell,
} from "recharts";
import { Card } from "react-bootstrap";
import {
  FaSearch,
  FaStar,
  FaEnvelope,
  FaChartBar,
  FaUsers,
} from "react-icons/fa";
import floorCapacities from "../constants/floorCapacities";

// Distinct infographic colors (like sample image)
const CYLINDER_COLORS = [
  ["#00BFFF", "#66CCFF"], // Light Blue
  ["#004AAD", "#4DA6FF"], // Dark Blue
  ["#D94F80", "#FF80A6"], // Pink
  ["#FF8C00", "#FFB84D"], // Orange
  ["#32CD32", "#90EE90"], // Green
];

// Icons for each floor (repeat if more floors)
const CYLINDER_ICONS = [FaUsers, FaStar, FaEnvelope, FaChartBar, FaSearch];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // --- Your same logic (unchanged) ---
  const enriched = data.map((floorObj) => {
    const { floor, total: liveCount } = floorObj;
    const capacity = floorCapacities[floor] ?? 0;
    const usedPct =
      capacity > 0 ? ((liveCount / capacity) * 100).toFixed(1) : "0.0";
    return {
      ...floorObj,
      capacity,
      liveCount,
      usedPct: Number(usedPct),
      label: `${liveCount}/${capacity}`,
    };
  });

  const totalLive = enriched.reduce((sum, f) => sum + f.liveCount, 0);
  const totalCap = enriched.reduce((sum, f) => sum + f.capacity, 0);
  const totalUsedPct = totalCap > 0
    ? ((totalLive / totalCap) * 100).toFixed(1)
    : "0.0";

  const totalEntry = {
    floor: "Pune Office Total",
    liveCount: totalLive,
    capacity: totalCap,
    usedPct: Number(totalUsedPct),
    label: `${totalLive}/${totalCap}`,
  };

  const sortedFloors = [...enriched].sort((a, b) => b.liveCount - a.liveCount);
  const chartData = [totalEntry, ...sortedFloors];

  const maxCapacity = Math.max(...chartData.map((f) => f.capacity)) || 0;

  // --- Tooltip unchanged ---
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload?.length) return null;
    const floorObj = payload[0].payload;
    const { liveCount, capacity, usedPct } = floorObj;

    return (
      <div
        style={{
          backgroundColor: "#1a1a1a",
          color: "#FFD100",
          border: "1px solid var(--wu-yellow)",
          borderRadius: 4,
          padding: "0.75rem",
          minWidth: 180,
        }}
      >
        <strong>{floorObj.floor}</strong>
        <div style={{ marginTop: 4 }}>
          Live: {liveCount} / {capacity} ({usedPct}%)
        </div>
      </div>
    );
  };

  // --- Custom cylinder shape ---
  const CylinderShape = (props) => {
    const { x, y, width, height, fill, index, payload } = props;
    const cx = x + width / 2;
    const topRy = Math.max(6, width * 0.12);
    const bottomRy = Math.max(8, width * 0.14);
    const bottomY = y + height;

    // Pick icon
    const Icon = CYLINDER_ICONS[index % CYLINDER_ICONS.length];

    return (
      <g>
        {/* Shadow */}
        <ellipse
          cx={cx}
          cy={bottomY + bottomRy * 0.9}
          rx={width * 0.6}
          ry={bottomRy * 0.45}
          fill="rgba(0,0,0,0.25)"
        />
        {/* Body */}
        <rect
          x={x}
          y={y}
          width={width}
          height={height}
          rx={8}
          ry={8}
          fill={fill}
        />
        {/* Top */}
        <ellipse cx={cx} cy={y} rx={width / 2} ry={topRy} fill={fill} />
        {/* Bottom highlight */}
        <ellipse
          cx={cx}
          cy={bottomY}
          rx={width / 2}
          ry={bottomRy}
          fill="rgba(0,0,0,0.06)"
        />
        {/* Icon & number */}
        <foreignObject
          x={x}
          y={y + height / 3}
          width={width}
          height={80}
          style={{ textAlign: "center", color: "#fff" }}
        >
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "1rem",
              fontWeight: "bold",
            }}
          >
            <Icon size={20} style={{ marginBottom: 6 }} />
            {String(index + 1).padStart(2, "0")}
          </div>
        </foreignObject>
      </g>
    );
  };

  // --- Curve through bar tops ---
  const CurveOverlay = ({ width, height, xAxisMap, yAxisMap }) => {
    const xScale = xAxisMap[Object.keys(xAxisMap)[0]].scale;
    const yScale = yAxisMap[Object.keys(yAxisMap)[0]].scale;

    const points = chartData.map((d, i) => {
      const x = xScale(d.floor) + xScale.bandwidth() / 2;
      const y = yScale(d.liveCount);
      return { x, y, label: String.fromCharCode(65 + i) };
    });

    // build smooth curve path
    let path = `M${points[0].x},${points[0].y}`;
    for (let i = 1; i < points.length; i++) {
      const prev = points[i - 1];
      const curr = points[i];
      const cx = (prev.x + curr.x) / 2;
      const cy = (prev.y + curr.y) / 2;
      path += ` Q${prev.x},${prev.y} ${cx},${cy}`;
    }
    path += ` T${points[points.length - 1].x},${points[points.length - 1].y}`;

    return (
      <g>
        <path d={path} stroke="#FFD100" strokeWidth={3} fill="none" />
        {points.map((pt, idx) => (
          <g key={idx}>
            <circle cx={pt.x} cy={pt.y} r={5} fill="#fff" />
            <text
              x={pt.x}
              y={pt.y - 8}
              textAnchor="middle"
              fontSize={12}
              fontWeight="bold"
              fill="#333"
            >
              {pt.label}
            </text>
          </g>
        ))}
      </g>
    );
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: "var(--wu-yellow)" }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold" style={{ borderBottom: "2px solid var(--wu-yellow)", fontSize: "1.2rem" }}>
        Western Union - Pune Occupancy Infographic
      </Card.Header>

      <Card.Body style={{ height: "60vh", padding: 0, backgroundColor: "var(--wu-gray-dark)" }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 40, right: 24, left: 0, bottom: 40 }}
            barCategoryGap="20%"
          >
            <CartesianGrid stroke="#444" strokeDasharray="3 3" />
            <XAxis dataKey="floor" tick={{ fill: "#fff", fontSize: 12 }} />
            <YAxis tick={{ fill: "#fff", fontSize: 12 }} domain={[0, Math.ceil(maxCapacity / 50) * 50]} />
            <Tooltip content={renderTooltip} />

            <Bar
              dataKey="liveCount"
              shape={<CylinderShape />}
              barSize={90}
            >
              {chartData.map((_, idx) => (
                <Cell
                  key={idx}
                  fill={`url(#grad-${idx})`}
                />
              ))}
            </Bar>

            {/* Define gradients */}
            <defs>
              {chartData.map((_, idx) => {
                const [c1, c2] = CYLINDER_COLORS[idx % CYLINDER_COLORS.length];
                return (
                  <linearGradient
                    id={`grad-${idx}`}
                    key={idx}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={c1} />
                    <stop offset="100%" stopColor={c2} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* Curve overlay */}
            <Customized component={CurveOverlay} />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}