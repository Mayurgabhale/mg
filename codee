import React, { useEffect, useState } from 'react';
import { Button, InputGroup, FormControl, Spinner } from 'react-bootstrap';

/**
 * TimeTravelControl
 * - local UI to pick a datetime (uses <input type="datetime-local">)
 * - calls onApply(isoTimestamp) when user applies a timestamp (ISO UTC)
 * - calls onLive() when user wants to return to live mode
 *
 * Notes:
 * - Keeps local input in sync when parent changes currentTimestamp.
 * - Produces ISO with seconds and ms zeroed: "YYYY-MM-DDTHH:mm:00.000Z"
 */
export default function TimeTravelControl({ currentTimestamp, onApply, onLive, loading }) {
  // store local value as datetime-local string (no timezone)
  const [local, setLocal] = useState(currentTimestamp ? isoToLocalDatetimeInput(currentTimestamp) : '');

  // keep local input synced when parent changes the timestamp (apply / clear)
  useEffect(() => {
    if (currentTimestamp) {
      setLocal(isoToLocalDatetimeInput(currentTimestamp));
    } else {
      setLocal('');
    }
  }, [currentTimestamp]);

  function handleApply() {
    if (!local) return;
    // Convert local datetime (browser local) to an ISO UTC string and zero seconds/ms
    const d = new Date(local);
    d.setSeconds(0, 0);
    const iso = d.toISOString(); // this is UTC ISO
    onApply(iso);
  }

  function handleLive() {
    setLocal('');
    onLive();
  }

  return (
    <div style={{ display: 'flex', gap: 8, alignItems: 'center', minWidth: 340 }}>
      <InputGroup>
        <FormControl
          type="datetime-local"
          value={local}
          onChange={(e) => setLocal(e.target.value)}
          placeholder="Select date & time"
        />
      </InputGroup>

      <div style={{ display: 'flex', gap: 6 }}>
        <Button variant="outline-warning" onClick={handleApply} disabled={loading || !local}>
          {loading ? <><Spinner animation="border" size="sm" />&nbsp;Applying</> : 'Apply'}
        </Button>
        <Button variant="warning" onClick={handleLive} disabled={loading}>
          Live
        </Button>
      </div>
    </div>
  );
}

/** helpers **/
function pad(n) {
  return String(n).padStart(2, '0');
}

/** Convert ISO (UTC) -> "YYYY-MM-DDTHH:mm" local input value */
function isoToLocalDatetimeInput(iso) {
  if (!iso) return '';
  const d = new Date(iso); // JS Date will correctly represent the instant
  // Use local date/time components so <input type=datetime-local> shows local equivalent
  const year = d.getFullYear();
  const month = pad(d.getMonth() + 1);
  const day = pad(d.getDate());
  const hours = pad(d.getHours());
  const minutes = pad(d.getMinutes());
  return `${year}-${month}-${day}T${hours}:${minutes}`;
}