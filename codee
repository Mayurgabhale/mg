// src/App.js
// ... (keep all the imports and initial state declarations)

function App() {
  // ... (keep all the existing state declarations)

  // --- This useEffect handles both the initial suggestions and search results
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return;
    }

    const filtered = allEmployees.filter(emp => {
      const id = (emp.EmployeeID || '').toLowerCase();
      const name = (emp.EmpName || '').toLowerCase();
      return id.includes(term) || name.includes(term);
    });

    const rankOf = (emp) => {
      const id = (emp.EmployeeID || '').toLowerCase();
      const name = (emp.EmpName || '').toLowerCase();
      if (name === term || id === term) return 0;
      if (name.startsWith(term) || id.startsWith(term)) return 1;
      return 2;
    };

    const pos = (str) => {
      const i = str.indexOf(term);
      return i === -1 ? Number.POSITIVE_INFINITY : i;
    };

    const sorted = filtered
      .map((emp, idx) => ({ emp, idx }))
      .sort((a, b) => {
        const an = (a.emp.EmpName || '').toLowerCase();
        const bn = (b.emp.EmpName || '').toLowerCase();
        const ai = (a.emp.EmployeeID || '').toLowerCase();
        const bi = (b.emp.EmployeeID || '').toLowerCase();

        const ra = rankOf(a.emp);
        const rb = rankOf(b.emp);
        if (ra !== rb) return ra - rb;

        const pa = Math.min(pos(an), pos(ai));
        const pb = Math.min(pos(bn), pos(bi));
        if (pa !== pb) return pa - pb;

        if (an.length !== bn.length) return an.length - bn.length;
        return a.idx - b.idx;
      })
      .slice(0, 40)
      .map(x => x.emp);

    setSuggestions(sorted);
  }, [searchTerm, allEmployees]);

  const handleSearch = () => {
    setError('');
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return setError('Please enter name or ID');
    }

    // The useEffect above will handle updating suggestions
    // Now just find and select exact match if it exists
    const match = allEmployees.find(emp => {
      const id = (emp.EmployeeID || '').toLowerCase();
      const name = (emp.EmpName || '').toLowerCase();
      return name === term || id === term;
    });

    if (match) {
      selectEmployee(match);
    } else {
      setSelected(null);
      setError('No exact match found');
    }
  };

  // ... (keep all the other existing functions)

  return (
    // ... (keep the existing JSX)
  );
}

export default App;