useEffect(() => {
  const term = searchTerm.trim().toLowerCase();
  if (!term) {
    setSuggestions([]);
    return;
  }

  // Filter only matches
  const matches = allEmployees.filter(emp =>
    (emp.EmployeeID || '').toLowerCase().includes(term) ||
    (emp.EmpName || '').toLowerCase().includes(term)
  );

  // Sort so best matches come first
  const sortedMatches = matches.sort((a, b) => {
    const aName = (a.EmpName || '').toLowerCase();
    const bName = (b.EmpName || '').toLowerCase();
    const aID = (a.EmployeeID || '').toLowerCase();
    const bID = (b.EmployeeID || '').toLowerCase();

    // 1. Exact ID match
    if (aID === term && bID !== term) return -1;
    if (bID === term && aID !== term) return 1;

    // 2. Exact name match
    if (aName === term && bName !== term) return -1;
    if (bName === term && aName !== term) return 1;

    // 3. Starts with term in name
    if (aName.startsWith(term) && !bName.startsWith(term)) return -1;
    if (bName.startsWith(term) && !aName.startsWith(term)) return 1;

    // 4. Starts with term in ID
    if (aID.startsWith(term) && !bID.startsWith(term)) return -1;
    if (bID.startsWith(term) && !aID.startsWith(term)) return 1;

    // Keep original order for others
    return 0;
  });

  setSuggestions(sortedMatches.slice(0, 40));
}, [searchTerm, allEmployees]);

.....


i search lloyds

but his show n last 



i want ot show here 
..... 
15th Floor Construction 18, Howell
15th Floor Construction 18, Howell
15th Floor Construction 19, Howell
15th Floor Construction 19, Howell
Bellotto, Alessandro (196742)
Bellotto, Alessandro (196742)
15th Floor Construction 18, Howell
15th Floor Construction 19, Howell
15th Floor Construction 18, Howell
15th Floor Construction 18, Howell
15th Floor Construction 19, Howell
15th Floor Construction 19, Howell
Bellotto, Alessandro (196742)
Dass, Lloyds (314345)

useEffect(() => {
  const term = searchTerm.trim().toLowerCase();
  if (!term) {
    setSuggestions([]);
    return;
  }
  
  // First try to find exact matches (name or ID)
  const exactMatches = allEmployees.filter(emp => 
    (emp.EmpName || '').toLowerCase() === term ||
    (emp.EmployeeID || '').toLowerCase() === term
  );
  
  // Then find partial matches excluding exact matches
  const partialMatches = allEmployees.filter(emp => 
    !exactMatches.includes(emp) && (
      (emp.EmployeeID || '').toLowerCase().includes(term) ||
      (emp.EmpName || '').toLowerCase().includes(term)
    )
  );
  
  // Combine results with exact matches first
  setSuggestions([...exactMatches, ...partialMatches].slice(0, 40));
}, [searchTerm, allEmployees]);



.....

// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);

  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return;
    }
    const matches = allEmployees.filter(emp =>
      (emp.EmployeeID || '').toLowerCase().includes(term) ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );
    setSuggestions(matches.slice(0, 40));
  }, [searchTerm, allEmployees]);

  const handleSearch = () => {
    setError('');
    const term = searchTerm.trim().toLowerCase();
    if (!term) return setError('Please enter name or ID');

    const found = allEmployees.find(emp =>
      (emp.EmployeeID || '').toLowerCase() === term ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );

    setSuggestions([]);

    if (!found) {
      setSelected(null);
      setError('No matching employee');
    } else {
      selectEmployee(found);
    }
  };

  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName);
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  const pickSuggestion = emp => {
    if (!emp) {
      setSuggestions([]);
      return;
    }
    selectEmployee(emp);
    setSuggestions([]);
  };

  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
              suggestions={suggestions}
              onSelectSuggestion={pickSuggestion}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

        <div className="right-panel">
          <div className="lists-container">
            
            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map(emp => (
                  <li key={emp.id} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </div>
  );
}

export default App;

