// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LabelList,
  Sector
} from 'recharts';
import { Card } from 'react-bootstrap';
import {
  FaUsers,
  FaUserTie,
  FaUserNurse,
  FaUserCog,
  FaUserShield,
  FaUserAstronaut,
  FaUserSecret
} from 'react-icons/fa'; // Example icons for personnel types
import './PersonnelDonutChart.css'; // Custom CSS for 3D-like styling (optional)

/*
  COLORS: start/end/light are used for gradients and subtle highlights
*/
const COLORS = [
  { start: '#FFD100', end: '#FFA000', light: '#FFF8E1' }, // WU Yellow
  { start: '#009E60', end: '#006D3F', light: '#E8F5E8' }, // WU Green
  { start: '#88B04B', end: '#5F7A2E', light: '#F0F7E8' }, // Olive
  { start: '#FF6F61', end: '#D9453A', light: '#FFE8E6' }, // Coral
  { start: '#58595B', end: '#3D3F42', light: '#E9EAEB' }, // WU Gray
  { start: '#FFB800', end: '#CC9400', light: '#FFF3CD' }, // Accent Yellow
  { start: '#6B5B95', end: '#4A3F6E', light: '#EDE7F6' }  // Indigo
];

const getIconForType = (type) => {
  const iconMap = {
    Manager: <FaUserTie />,
    Engineer: <FaUserCog />,
    Nurse: <FaUserNurse />,
    Security: <FaUserShield />,
    Admin: <FaUsers />,
    Specialist: <FaUserAstronaut />,
    Analyst: <FaUserSecret />
  };
  return iconMap[type] || <FaUsers />;
};

/* Active sector shape: slight lift and stroke to give 3D hover feel */
const renderActiveShape = (props) => {
  const {
    cx,
    cy,
    innerRadius,
    outerRadius,
    startAngle,
    endAngle,
    fill,
    index
  } = props;

  // subtle inner bevel using semi-transparent white
  const bevelFill = 'rgba(255,255,255,0.12)';

  return (
    <g>
      <Sector
        cx={cx}
        cy={cy}
        innerRadius={innerRadius}
        outerRadius={outerRadius + 6} // lift slightly
        startAngle={startAngle}
        endAngle={endAngle}
        fill={fill}
        stroke="#fff"
        strokeWidth={3}
        filter="url(#shadow)"
      />
      {/* bevel highlight: translucent inner band */}
      <Sector
        cx={cx}
        cy={cy}
        innerRadius={innerRadius}
        outerRadius={innerRadius + (outerRadius - innerRadius) * 0.18}
        startAngle={startAngle}
        endAngle={endAngle}
        fill={bevelFill}
      />
    </g>
  );
};

/* custom slice label: positions icon + two line label outside slice */
const renderCustomLabel = (entry) => {
  // LabelList content receives many props â€” destructure the ones we need
  const { name, percent, midAngle, cx, cy, outerRadius } = entry;

  const radian = Math.PI / 180;
  const sin = Math.sin(-midAngle * radian);
  const cos = Math.cos(-midAngle * radian);

  const labelX = cx + (outerRadius + 36) * cos;
  const labelY = cy + (outerRadius + 36) * sin;
  const iconX = cx + (outerRadius + 18) * cos;
  const iconY = cy + (outerRadius + 18) * sin;

  const isLeft = midAngle > 90 && midAngle < 270;

  return (
    <g>
      {/* small circular icon background */}
      <g transform={`translate(${iconX}, ${iconY})`}>
        <circle r={12} fill="rgba(255,255,255,0.06)" stroke="rgba(255,255,255,0.08)" />
        <foreignObject x="-10" y="-10" width="20" height="20">
          <div style={{
            width: 20, height: 20, display: 'flex', alignItems: 'center', justifyContent: 'center',
            color: '#fff', fontSize: 12
          }}>
            {getIconForType(name)}
          </div>
        </foreignObject>
      </g>

      {/* label text */}
      <text
        x={labelX}
        y={labelY}
        fill="#fff"
        textAnchor={isLeft ? 'end' : 'start'}
        dominantBaseline="middle"
        style={{ fontFamily: 'Inter, Arial, sans-serif' }}
      >
        <tspan x={labelX} dy={-8} fontSize="11" fontWeight={600}>{name}</tspan>
        <tspan x={labelX} dy={16} fontSize="11" fontWeight={700} fill="#FFD100">
          {(percent * 100).toFixed(0)}%
        </tspan>
      </text>
    </g>
  );
};

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value, percent } = payload[0];
  const icon = getIconForType(name);
  return (
    <div style={{
      background: '#0b1114',
      color: '#FFD100',
      border: '1px solid rgba(255,209,0,0.12)',
      padding: '0.5rem 0.75rem',
      borderRadius: 8,
      boxShadow: '0 6px 18px rgba(0,0,0,0.6)'
    }}>
      <div style={{ display: 'flex', gap: 8, alignItems: 'center' }}>
        <div style={{ width: 24, height: 24, display: 'flex', alignItems: 'center', justifyContent: 'center' }}>{icon}</div>
        <div style={{ fontWeight: 700 }}>{name}</div>
      </div>
      <div style={{ marginTop: 6 }}>Count: <strong style={{ color: '#fff' }}>{value}</strong></div>
      <div style={{ color: '#9CA3AF' }}>({(percent * 100).toFixed(1)}%)</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  // compute total
  const total = data.reduce((sum, e) => sum + e.count, 0);

  // Hooks must be declared before any early return:
  const [activeIndex, setActiveIndex] = React.useState(0);
  const onPieEnter = React.useCallback((_, index) => {
    setActiveIndex(index);
  }, []);

  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white p-4 text-center">No personnel data available</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  // darken utility for gradients fallback
  const darken = (hex, amount = 0.18) => {
    const c = hex.replace('#', '');
    const num = parseInt(c, 16);
    let r = (num >> 16) & 0xff;
    let g = (num >> 8) & 0xff;
    let b = num & 0xff;
    r = Math.max(0, Math.floor(r * (1 - amount)));
    g = Math.max(0, Math.floor(g * (1 - amount)));
    b = Math.max(0, Math.floor(b * (1 - amount)));
    return `rgb(${r}, ${g}, ${b})`;
  };

  return (
    <Card className="mb-4 personnel-card shadow-2xl border-0">
      <Card.Header className="bg-gradient-3d text-warning text-center fw-bold" style={{ background: 'linear-gradient(90deg,#071018,#08131a)' }}>
        <h5 className="mb-0">Personnel Type Headcount</h5>
        <div style={{ height: 2, background: 'rgba(255,209,0,0.08)', marginTop: 8 }} />
      </Card.Header>

      <Card.Body className="p-4 bg-dark position-relative" style={{ background: '#071018' }}>
        <ResponsiveContainer width="100%" height={450}>
          <PieChart className="enhanced-pie-3d">
            {/* SVG defs for 3D effects */}
            <defs>
              <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
                <feDropShadow dx="0" dy="3" stdDeviation="3" floodColor="#000" floodOpacity="0.32" />
              </filter>

              {COLORS.map((color, idx) => (
                <linearGradient key={idx} id={`grad-${idx}`} x1="0%" y1="0%" x2="0%" y2="100%">
                  <stop offset="0%" stopColor={color.start} stopOpacity="1" />
                  <stop offset="70%" stopColor={color.end} stopOpacity="0.9" />
                  <stop offset="100%" stopColor={color.end} stopOpacity="0.7" />
                </linearGradient>
              ))}

              <radialGradient id="center-glow" cx="50%" cy="50%" r="50%">
                <stop offset="0%" stopColor="#FFD100" stopOpacity="0.25" />
                <stop offset="100%" stopColor="#FFD100" stopOpacity="0" />
              </radialGradient>
            </defs>

            {/* Depth extrusion layer */}
            <g transform="translate(0, 8)">
              <Pie
                data={sorted}
                dataKey="count"
                nameKey="personnelType"
                cx="50%"
                cy="50%"
                innerRadius={80}
                outerRadius={120}
                paddingAngle={6}
                startAngle={90}
                endAngle={-270}
                isAnimationActive={false}
              >
                {sorted.map((entry, idx) => (
                  <Cell
                    key={`depth-${idx}`}
                    fill={darken(COLORS[idx % COLORS.length].start, 0.28)}
                    stroke="rgba(0,0,0,0)"
                  />
                ))}
              </Pie>
            </g>

            {/* Main 3D donut with hover lift */}
            <Pie
              activeIndex={activeIndex}
              activeShape={renderActiveShape}
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={80}
              outerRadius={120}
              paddingAngle={6}
              startAngle={90}
              endAngle={-270}
              onMouseEnter={onPieEnter}
              stroke="#fff"
              strokeWidth={3}
              cornerRadius={8}
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={2.5}
                />
              ))}
            </Pie>

            {/* External labels with icons */}
            <LabelList data={sorted} content={renderCustomLabel} />

            {/* Center box: total + glow + subtle star */}
            <circle cx="50%" cy="50%" r="60" fill="url(#center-glow)" />
            <text x="50%" y="48%" textAnchor="middle" fill="#fff" fontSize="12" fontWeight={700}>
              Total
            </text>
            <text x="50%" y="58%" textAnchor="middle" fill="#FFD100" fontSize="28" fontWeight={800}>
              {total.toLocaleString()}
            </text>

            {/* decorative center polygon (low opacity) */}
            <polygon
              points="50,16 58,34 76,38 62,50 66,68 50,58 34,68 38,50 24,38 42,34"
              transform="translate(-50,-50) scale(1.2)"
              fill="#FFD100"
              opacity="0.12"
            />

            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{
                paddingTop: 20,
                color: '#FFD100',
                fontSize: '1.05rem',
                fontWeight: 600
              }}
              iconType="circle"
              iconSize={12}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}