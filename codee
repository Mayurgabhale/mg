
// ---------- helpers ----------
  async function fetchSnapshot(datetimeISO) {
    setTimeTravelLoading(true);
    try {
      const url = `http://localhost:5000/api/occupancy-at?datetime=${encodeURIComponent(datetimeISO)}`;
      console.debug('[TimeTravel] fetching', url);
      const resp = await fetch(url, { headers: { Accept: 'application/json' } });
      if (!resp.ok) {
        window.alert(`Snapshot request failed (${resp.status})`);
        return;
      }
      const p = await resp.json();

      // map snapshot fields -> the same liveData shape your UI expects
      setLiveData({
        summary: Array.isArray(p.summary) ? p.summary : [],
        details: p.details || {},
        floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
        zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
        personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
        // snapshots use totalVisitedOnDate; fall back to totalVisitedToday for live payloads
        totalVisitedToday: typeof p.totalVisitedOnDate === 'number'
          ? p.totalVisitedOnDate
          : (typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0),
        personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
        // snapshots use visitedOnDate { employees, contractors, total }
        visitedToday: p.visitedOnDate
          ? {
              employees: p.visitedOnDate.employees || 0,
              contractors: p.visitedOnDate.contractors || 0,
              total: p.visitedOnDate.total || 0
            }
          : (p.visitedToday || { employees: 0, contractors: 0, total: 0 }),
        ertStatus: p.ertStatus || {}
      });

      setTimeTravelMode(true);
      setTimeTravelTimestamp(p?.asOf || datetimeISO);
    } catch (err) {
      console.error('Failed to fetch snapshot', err);
      window.alert('Failed to fetch snapshot');
    } finally {
      setTimeTravelLoading(false);
    }
  }









 ......

in frontedn this count is not disply 
Today's Total
0
Today's Employees
0
Today's Contractors
0
^^^^^^^
.......
Realtime Total
413
Realtime Employees
358
Realtime Contractors
55



 "totalVisitedOnDate": 484,
  "visitedOnDate": {
    "employees": 417,
    "contractors": 67,
    "total": 484,
^^^^^^^^^^




// C:\Users\W0024618\Desktop\swipeData\client\src\App.js

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link, useLocation } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';
import ZoneDetailsTable from './components/ZoneDetailsTable';
import DashboardHome from './pages/DashboardHome';
import ErtPage from './pages/ErtPage';
import TimeTravelControl from './components/TimeTravelControl';   // üîπ NEW
import './App.css';

function ZoneDetailsPage({ detailsData }) {
  const [searchTerm, setSearchTerm] = useState('');

  return (
    <>
      <div
        className="d-flex justify-content-between align-items-center mb-2"
        style={{ flexWrap: 'wrap', gap: '0.5rem' }}
      >
        <Link to="/" className="btn btn-secondary">‚Üê Back to Dashboard</Link>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ flexGrow: 1, maxWidth: 300, padding: '0.4rem 0.8rem', fontSize: '1rem', borderRadius: 4, border: '1px solid #ccc' }}
        />
      </div>
      <ZoneDetailsTable data={detailsData} searchTerm={searchTerm} />
    </>
  );
}

function App() {
  const location = useLocation();
  const headerText = location.pathname === '/ert'
    ? 'Emergency Response Team ‚Äî Western Union Pune'
    : 'Live Occupancy ‚Äî Western Union Pune';

  // ---------- data state ----------
  const [liveData, setLiveData] = useState({
    summary: [],
    details: {},
    floorBreakdown: [],
    zoneBreakdown: [],
    personnelBreakdown: [],
    totalVisitedToday: 0,
    personnelSummary: { employees: 0, contractors: 0 },
    visitedToday: { employees: 0, contractors: 0, total: 0 },
    ertStatus: {}
  });



  // helper inside App component (or above it)
  function formatAsKolkata(iso) {
    if (!iso) return '';
    try {
      const d = new Date(iso);
      // produce: "2025-09-11 04:00 PM"
      const parts = new Intl.DateTimeFormat('en-GB', {
        timeZone: 'Asia/Kolkata',
        year: 'numeric', month: '2-digit', day: '2-digit',
        hour: '2-digit', minute: '2-digit', hour12: true
      }).formatToParts(d);
      const get = (type) => (parts.find(p => p.type === type) || {}).value || '';
      const y = get('year'), m = get('month'), day = get('day');
      const hour = get('hour'), minute = get('minute'), ampm = get('dayPeriod');
      // output ISO-like date but human friendly: "2025-09-11 04:00 PM"
      return `${y}-${m}-${day} ${hour}:${minute} ${ampm}`;
    } catch (e) {
      return iso;
    }
  }

  // ---------- time travel state ----------
  const [timeTravelMode, setTimeTravelMode] = useState(false);
  const [timeTravelTimestamp, setTimeTravelTimestamp] = useState(null);
  const [timeTravelLoading, setTimeTravelLoading] = useState(false);

  // ---------- live SSE ----------
  useEffect(() => {
    if (timeTravelMode) return; // pause SSE when in history mode

    const es = new EventSource('http://localhost:5000/api/live-occupancy');
    es.onmessage = (e) => {
      try {
        const p = JSON.parse(e.data);
        setLiveData({
          summary: Array.isArray(p.summary) ? p.summary : [],
          details: p.details || {},
          floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
          zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
          personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
          totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
          personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
          visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
          ertStatus: p.ertStatus || {}
        });
      } catch {
        console.error('SSE parse error');
      }
    };

    es.onerror = (err) => {
      console.error('SSE error', err);
      try { es.close(); } catch (e) { }
    };

    return () => {
      try { es.close(); } catch (e) { }
    };
  }, [timeTravelMode]);

  // ---------- helpers ----------
  async function fetchSnapshot(datetimeISO) {
    setTimeTravelLoading(true);
    try {
      const url = `http://localhost:5000/api/occupancy-at?datetime=${encodeURIComponent(datetimeISO)}`;
      console.debug('[TimeTravel] fetching', url);
      const resp = await fetch(url, { headers: { Accept: 'application/json' } });
      if (!resp.ok) {
        window.alert(`Snapshot request failed (${resp.status})`);
        return;
      }
      const p = await resp.json();
      setLiveData({
        summary: Array.isArray(p.summary) ? p.summary : [],
        details: p.details || {},
        floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
        zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
        personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
        totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
        personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
        visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
        ertStatus: p.ertStatus || {}
      });
      setTimeTravelMode(true);
      setTimeTravelTimestamp(p?.asOf || datetimeISO);
    } catch (err) {
      console.error('Failed to fetch snapshot', err);
      window.alert('Failed to fetch snapshot');
    } finally {
      setTimeTravelLoading(false);
    }
  }

  function clearTimeTravel() {
    setTimeTravelLoading(true);
    setTimeTravelMode(false);
    setTimeTravelTimestamp(null);
    setTimeTravelLoading(false);
  }

  // ---------- render ----------
  return (
    <>
      <Navbar bg="dark" variant="dark" expand="lg" className="px-4">
        <Navbar.Brand as={Link} to="/" className="wu-brand">{headerText}</Navbar.Brand>
        <Nav className="ms-auto align-items-center">
          <div className="me-3" style={{ display: 'flex', alignItems: 'center' }}>
            <TimeTravelControl
              currentTimestamp={timeTravelTimestamp}
              onApply={(iso) => fetchSnapshot(iso)}
              onLive={() => clearTimeTravel()}
              loading={timeTravelLoading}
            />
          </div>
          <Nav.Link as={Link} to="/" className="nav-item-infographic"><i className="bi bi-house"></i></Nav.Link>
          <Nav.Link href="http://10.199.22.57:3000/partition/Pune/history" className="nav-item-infographic"><i className="bi bi-clock-history"></i></Nav.Link>
          <Nav.Link as={Link} to="/details" className="nav-item-infographic"><i className="fa-solid fa-calendar-day"></i></Nav.Link>
          <Nav.Link as={Link} to="/ert" className="nav-item-infographic">ERT Overview</Nav.Link>
          <Nav.Link className="theme-toggle-icon" title="Dark mode only"><FaSun /></Nav.Link>
        </Nav>
      </Navbar>

      <Container fluid className="mt-2">
        {timeTravelMode && (
          <div style={{
            background: '#2b2b2b',
            color: '#FFD100',
            padding: '8px 16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderLeft: '4px solid #FFD100',
            marginBottom: 8
          }}>
            <div>
              Viewing historical snapshot:&nbsp;
             
              <strong>{formatAsKolkata(timeTravelTimestamp)}</strong>
            </div>
            <div>
              <button className="btn btn-sm btn-outline-warning" onClick={() => clearTimeTravel()} disabled={timeTravelLoading}>
                Return to Live
              </button>
            </div>
          </div>
        )}

        <Routes>
          <Route
            path="/"
            element={
              <DashboardHome
                summaryData={liveData.summary}
                detailsData={liveData.details}
                floorData={liveData.floorBreakdown}
                zoneBreakdown={liveData.zoneBreakdown}
                personnelBreakdown={liveData.personnelBreakdown}
                totalVisitedToday={liveData.totalVisitedToday}
                personnelSummary={liveData.personnelSummary}
                visitedToday={liveData.visitedToday}
                ertStatus={liveData.ertStatus}
              />
            }
          />
          <Route path="/details" element={<ZoneDetailsPage detailsData={liveData.details} />} />
          <Route path="/ert" element={<ErtPage ertStatus={liveData.ertStatus} />} />
        </Routes>
      </Container>
    </>
  );
}

export default function WrappedApp() {
  return (
    <BrowserRouter>
      <div className="dark-theme">
        <App />
      </div>
    </BrowserRouter>
  );
}



// *****************************************
// /////////////////////////////////////////  start


// ---------- NEW: fetchEventsUntil / helpers / controller for occupancy-at ----------
async function fetchEventsUntil(until) {
  // until: a JS Date object (UTC instant) ‚Äî same style as fetchNewEvents uses
  const pool = await getPool();
  const req  = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/**
 * Build visited counts for a specific local date (yyyy-LL-dd in Asia/Kolkata)
 * Re-implements the same "dedupe last swipe for the day" logic as buildVisitedToday but for any date.
 */
function buildVisitedForDate(allEvents, dateStr) {
  // dateStr expected 'yyyy-LL-dd' (Asia/Kolkata local date)
  const dateOnly = dateStr;

  const ins = allEvents.filter(evt => {
    return evt.Direction === 'InDirection' && evt.Dateonly === dateOnly;
  });

  // dedupe by PersonGUID keeping the latest LocaleMessageTime
  const dedup = new Map();
  for (const e of ins) {
    const key = e.PersonGUID || e.EmployeeID || e.CardNumber || e.ObjectName1;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());

  const employees = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}


// ...................

exports.getOccupancyAtTime = async (req, res) => {
  try {
    // parse incoming date/time
    const { datetime, date, time } = req.query;

    let dt; // Luxon DateTime in Asia/Kolkata
    if (datetime) {
      // try parse as ISO first; if no zone provided, assume Asia/Kolkata
      dt = DateTime.fromISO(datetime, { zone: 'Asia/Kolkata' });
      if (!dt.isValid) {
        // try RFC or generic parse as fallback
        dt = DateTime.fromRFC2822(datetime, { zone: 'Asia/Kolkata' });
      }
    } else {
      // build from date + time (with sensible defaults)
      const theDate = date || getTodayString(); // already returns yyyy-LL-dd in Asia/Kolkata
      const theTime = time || '00:00';
      // try multiple time formats
      const tryFormats = [
        'yyyy-LL-dd h:mm a',
        'yyyy-LL-dd hh:mm a',
        'yyyy-LL-dd H:mm',
        'yyyy-LL-dd HH:mm',
        'yyyy-LL-dd h:mm',
        'yyyy-LL-dd hh:mm'
      ];
      for (const fmt of tryFormats) {
        const cand = DateTime.fromFormat(`${theDate} ${theTime}`, fmt, { zone: 'Asia/Kolkata' });
        if (cand.isValid) { dt = cand; break; }
      }
      // as last resort, try ISO combine
      if (!dt) {
        const isoStr = `${theDate}T${theTime}`;
        dt = DateTime.fromISO(isoStr, { zone: 'Asia/Kolkata' });
      }
    }

    if (!dt || !dt.isValid) {
      return res.status(400).json({
        error: 'Invalid/Unparseable datetime. Use datetime=ISO or date=yyyy-LL-dd & time="10:00 PM" or "22:00".'
      });
    }

    // Convert to JS Date (UTC instant) to pass into SQL parameter
    const untilJSDate = dt.toJSDate();

    // Fetch all events up to that instant (inclusive)
    const eventsAll = await fetchEventsUntil(untilJSDate);

    // === IMPORTANT CHANGE: keep only events from the requested local date (Asia/Kolkata) ===
    const requestedDateStr = dt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
    const events = eventsAll.filter(evt => String(evt.Dateonly) === requestedDateStr);

    // buildOccupancy expects the events array with same shape; it will compute the headcount
    const occupancy = await buildOccupancy(events);

    // Adjust the asOf to the requested (local) timestamp instead of "now"
    occupancy.asOf = dt.setZone('Asia/Kolkata').toISO();

    // Also provide visited counts for that local date (uses same-day events)
    const visited = buildVisitedForDate(events, requestedDateStr);
    occupancy.totalVisitedOnDate = visited.total;
    occupancy.visitedOnDate = {
      employees: visited.employees,
      contractors: visited.contractors,
      total: visited.total,
      date: requestedDateStr
    };

    return res.json(occupancy);

  } catch (err) {
    console.error('Error in getOccupancyAtTime:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};

// *****************************************
// ///////////////////////////////////////// end


