Css not apply for this page. chech what is the isse
import React, { useEffect, useMemo, useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import {
  FiDownload as Download,
  FiSearch as Search,
  FiCalendar as Calendar,
  FiRefreshCw as Refresh,
  FiUsers as Users,
  FiUser as User,
  FiPieChart as PieChartIcon,
  FiTrendingUp as TrendingUp,
  FiFilter,
  FiCheckSquare,
  FiX

} from "react-icons/fi";
import "./MonthlySummary.css";
export default function PuneMonthlyDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth = initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => { alive = false; };
  }, [month]);

  const days = useMemo(
    () => (data?.attendanceSheet?.length ? Object.keys(data.attendanceSheet[0]).filter(k => /^\d{4}-\d{2}-\d{2}$/.test(k)) : data?.days || []),
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter(r => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term);
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const topVisitors = data?.top10Visitors || [];

  // derive distribution for pie
  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = ["#4F46E5", "#10B981", "#F59E0B", "#EF4444", "#8B5CF6", "#EC4899", "#06B6D4"];

  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance;
    const headers = ["employeeId", "name", "personnelType", "daysPresent", "attendancePercent"];
    const csv = [headers.join(",")].concat(
      rows.map(r => headers.map(h => `"${(r[h] ?? "").toString().replace(/"/g, '""')}"`).join(","))
    ).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `attendance-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function humanDay(d) { return d.slice(8); }

  function pctColorClass(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-gray-100 text-gray-700";
    if (n >= 90) return "bg-emerald-500 text-white";
    if (n >= 75) return "bg-amber-500 text-white";
    return "bg-rose-500 text-white";
  }

  return (
    <div className="pune-dashboard">
      <div className="container">
        <div className="min-h-screen bg-gray-50 p-6">
          <div className="max-w-[1400px] mx-auto">
            {/* Header */}
            <header className="bg-white rounded-xl shadow-sm p-6 mb-6">
              <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
                <div>
                  <h1 className="text-2xl md:text-3xl font-bold text-gray-900 flex items-center gap-2">
                    <div className="w-10 h-10 rounded-lg bg-indigo-100 flex items-center justify-center text-indigo-600">
                      <Users size={24} />
                    </div>
                    Pune — Monthly Attendance Dashboard
                  </h1>
                  <p className="text-sm text-gray-500 mt-2">
                    Comprehensive attendance, occupancy and visitor insights • <span className="font-medium text-indigo-600">{month}</span>
                  </p>
                </div>

                <div className="flex flex-col sm:flex-row items-start gap-3">
                  <div className="flex items-center gap-2 bg-gray-100 rounded-lg px-3 py-2">
                    <Calendar className="text-gray-500" size={18} />
                    <input
                      aria-label="Select month"
                      type="month"
                      value={month}
                      onChange={(e) => setMonth(e.target.value)}
                      className="outline-none bg-transparent text-sm font-medium"
                    />
                  </div>

                  <button
                    onClick={() => { setLoading(true); setTimeout(() => setLoading(false), 600); }}
                    className="flex items-center gap-2 bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm font-medium hover:bg-gray-50 transition-colors"
                  >
                    <Refresh size={16} />
                    Refresh
                  </button>

                  <div className="flex gap-2">
                    <button
                      onClick={downloadCSV}
                      className="inline-flex items-center gap-2 bg-indigo-600 text-white text-sm px-3 py-2 rounded-lg shadow hover:bg-indigo-700 transition-colors"
                    >
                      <Download size={16} />
                      CSV
                    </button>
                    <button
                      onClick={downloadJSON}
                      className="inline-flex items-center gap-2 border border-gray-200 text-sm px-3 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <Download size={16} />
                      JSON
                    </button>
                  </div>
                </div>
              </div>
            </header>

            {loading && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {[1, 2, 3].map(i => (
                    <div key={i} className="p-4 bg-white rounded-xl shadow-sm animate-pulse h-32" />
                  ))}
                </div>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  <div className="col-span-2 p-4 bg-white rounded-xl shadow-sm animate-pulse h-80" />
                  <div className="p-4 bg-white rounded-xl shadow-sm animate-pulse h-80" />
                </div>
                <div className="p-4 bg-white rounded-xl shadow-sm animate-pulse h-96" />
              </div>
            )}

            {error && (
              <div className="p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg flex items-center gap-3">
                <div className="w-10 h-10 rounded-full bg-red-100 flex items-center justify-center">
                  <FiX size={20} className="text-red-600" />
                </div>
                <div>
                  <div className="font-medium">Error loading data</div>
                  <div className="text-sm">{error}</div>
                </div>
              </div>
            )}

            {!loading && data && (
              <main className="space-y-6">
                {/* KPI Cards */}
                <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                  <div className="bg-white p-5 rounded-xl shadow-sm border-l-4 border-indigo-500">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-sm text-gray-500 font-medium">Avg Daily Headcount</div>
                        <div className="text-2xl font-bold text-gray-900 mt-1">{data.avgDailyHeadcount ?? '—'}</div>
                        <div className="text-xs text-gray-400 mt-2">Monthly average of unique headcount</div>
                      </div>
                      <div className="w-12 h-12 rounded-lg bg-indigo-100 flex items-center justify-center">
                        <Users className="text-indigo-600" size={24} />
                      </div>
                    </div>
                  </div>

                  <div className="bg-white p-5 rounded-xl shadow-sm border-l-4 border-emerald-500">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-sm text-gray-500 font-medium">Distinct People</div>
                        <div className="text-2xl font-bold text-gray-900 mt-1">{data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}</div>
                        <div className="text-xs text-gray-400 mt-2">Who recorded at least one swipe</div>
                      </div>
                      <div className="w-12 h-12 rounded-lg bg-emerald-100 flex items-center justify-center">
                        <User className="text-emerald-600" size={24} />
                      </div>
                    </div>
                  </div>

                  <div className="bg-white p-5 rounded-xl shadow-sm border-l-4 border-amber-500">
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-sm text-gray-500 font-medium">Days in Month</div>
                        <div className="text-2xl font-bold text-gray-900 mt-1">{data.summary?.daysInMonth ?? (data.days?.length ?? days.length)}</div>
                        <div className="text-xs text-gray-400 mt-2">{month}</div>
                      </div>
                      <div className="w-12 h-12 rounded-lg bg-amber-100 flex items-center justify-center">
                        <Calendar className="text-amber-600" size={24} />
                      </div>
                    </div>
                  </div>
                </section>

                {/* Charts Section */}
                <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                  <div className="col-span-2 bg-white rounded-xl shadow-sm p-5">
                    <div className="flex items-center justify-between mb-5">
                      <div className="flex items-center gap-2">
                        <TrendingUp size={20} className="text-indigo-600" />
                        <h3 className="text-lg font-semibold text-gray-900">Peak Occupancy</h3>
                      </div>
                      <div className="text-sm text-gray-500">Daily peaks across the month</div>
                    </div>
                    <div style={{ height: 260 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart data={data.peakOccupancy || []} margin={{ top: 6, right: 12, left: 0, bottom: 6 }}>
                          <CartesianGrid strokeDasharray="3 3" stroke="#E6E9EE" />
                          <XAxis dataKey="date" tickFormatter={d => d.slice(8)} />
                          <YAxis />
                          <Tooltip
                            formatter={(v) => [v, 'Peak']}
                            contentStyle={{ borderRadius: '8px', border: '1px solid #E5E7EB' }}
                          />
                          <Bar dataKey="peak" fill="#4F46E5" radius={[6, 6, 0, 0]} />
                          <Line type="monotone" dataKey="peak" stroke="#06B6D4" strokeWidth={2} dot={false} />
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                  </div>

                  <div className="bg-white rounded-xl shadow-sm p-5">
                    <div className="flex items-center justify-between mb-5">
                      <div className="flex items-center gap-2">
                        <PieChartIcon size={20} className="text-indigo-600" />
                        <h3 className="text-lg font-semibold text-gray-900">People by Type</h3>
                      </div>
                      <div className="text-sm text-gray-500">Breakdown of personnel</div>
                    </div>
                    <div style={{ height: 200 }}>
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={personnelDistribution}
                            dataKey="value"
                            nameKey="name"
                            outerRadius={70}
                            innerRadius={40}
                            paddingAngle={4}
                            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                          >
                            {personnelDistribution.map((entry, idx) => (
                              <Cell key={`c-${idx}`} fill={COLORS[idx % COLORS.length]} />
                            ))}
                          </Pie>
                          <Tooltip />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>

                    <div className="mt-4 space-y-3">
                      {personnelDistribution.map((p, i) => (
                        <div key={p.name} className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <div className="w-3 h-3 rounded-full" style={{ background: COLORS[i % COLORS.length] }} />
                            <div className="text-sm font-medium text-gray-700">{p.name}</div>
                          </div>
                          <div className="text-sm font-bold text-gray-900">{p.value}</div>
                        </div>
                      ))}
                    </div>
                  </div>
                </section>

                {/* Data Table Section */}
                <section className="bg-white rounded-xl shadow-sm p-5">
                  <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-5">
                    <div className="flex flex-col sm:flex-row gap-3">
                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <Search className="text-gray-400" size={18} />
                        </div>
                        <input
                          className="pl-10 pr-4 py-2 border border-gray-200 rounded-lg text-sm w-full lg:w-64 focus:ring-2 focus:ring-indigo-200 focus:border-indigo-500"
                          placeholder="Search name or ID..."
                          value={q}
                          onChange={(e) => setQ(e.target.value)}
                        />
                      </div>

                      <div className="relative">
                        <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                          <FiFilter className="text-gray-400" size={18} />
                        </div>
                        <select
                          className="pl-10 pr-8 py-2 border border-gray-200 rounded-lg text-sm w-full appearance-none focus:ring-2 focus:ring-indigo-200 focus:border-indigo-500"
                          value={personnelFilter}
                          onChange={(e) => setPersonnelFilter(e.target.value)}
                        >
                          {personnelTypes.map((pt) => (
                            <option key={pt} value={pt}>{pt}</option>
                          ))}
                        </select>
                      </div>

                      <label className="flex items-center gap-2 text-sm text-gray-700 bg-gray-100 rounded-lg px-3 py-2">
                        <FiCheckSquare size={16} />
                        <input
                          type="checkbox"
                          checked={showTopOnly}
                          onChange={(e) => setShowTopOnly(e.target.checked)}
                          className="rounded focus:ring-indigo-500"
                        />
                        Show top 50 only
                      </label>
                    </div>

                    <div className="flex items-center gap-3 text-sm text-gray-500">
                      <div>Showing <strong className="text-gray-900">{filteredAttendance.length}</strong> records</div>
                      <div className="h-4 w-px bg-gray-300"></div>
                      <div>Updated: <span className="font-medium text-gray-700">{new Date().toLocaleTimeString()}</span></div>
                    </div>
                  </div>

                  <div className="overflow-auto border border-gray-200 rounded-lg">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee</th>
                          <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                          {days.map(d => (
                            <th key={d} className="px-2 py-3 text-xs text-center text-gray-500 uppercase tracking-wider">{humanDay(d)}</th>
                          ))}
                          <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Present</th>
                          <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">%</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {(showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance).map((r, idx) => (
                          <tr key={(r.employeeId || idx) + "-" + idx} className="hover:bg-gray-50 transition-colors">
                            <td className="px-4 py-3 text-sm font-medium text-gray-900">{idx + 1}</td>
                            <td className="px-4 py-3">
                              <div className="flex items-center gap-3">
                                <div className="w-9 h-9 rounded-full bg-indigo-100 flex items-center justify-center text-sm font-semibold text-indigo-700">
                                  {(r.name || "?").split(" ").map(s => s[0]).slice(0, 2).join("")}
                                </div>
                                <div>
                                  <div className="text-sm font-medium text-gray-900">{r.name}</div>
                                  <div className="text-xs text-gray-500">{r.employeeId}</div>
                                </div>
                              </div>
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-700">
                              <span className="px-2 py-1 bg-gray-100 rounded-md text-xs">{r.personnelType}</span>
                            </td>
                            {days.map(d => {
                              const v = r[d];
                              const isP = String(v).toUpperCase() === 'P' || v === true;
                              return (
                                <td key={d} className="px-1 py-1 text-center">
                                  <div className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-semibold ${isP ? 'bg-emerald-100 text-emerald-800' : 'bg-gray-100 text-gray-500'}`}>
                                    {isP ? 'P' : 'A'}
                                  </div>
                                </td>
                              );
                            })}
                            <td className="px-4 py-3 text-sm font-medium text-gray-900 text-right">{r.daysPresent ?? '—'}</td>
                            <td className="px-4 py-3 text-right">
                              <span className={`inline-flex items-center justify-center px-2 py-1 text-xs font-bold rounded-full ${pctColorClass(r.attendancePercent)}`}>
                                {r.attendancePercent ? `${r.attendancePercent}%` : '—'}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </section>

                <footer className="text-xs text-gray-500 p-4 bg-white rounded-lg shadow-sm">
                  <div>Notes: Present = any InDirection swipe (Asia/Kolkata). Data fetched from <code className="bg-gray-100 px-1 py-0.5 rounded">/api/monthly-summary?month=YYYY-MM</code>.</div>
                </footer>
              </main>
            )}
          </div>

        </div>
      </div>
    </div>
  );
}


/* C:\Users\W0024618\Desktop\swipeData\client\src\components\MonthlySummary.css */

:root {
    --bg: #f6f7fb;
    --card-bg: #ffffff;
    --muted: #6b7280;
    --accent-indigo: #4f46e5;
    --accent-emerald: #10b981;
    --accent-amber: #f59e0b;
    --danger: #ef4444;
    --glass: rgba(255, 255, 255, 0.6);
    --shadow-sm: 0 4px 10px rgba(18, 24, 46, 0.04);
    --shadow-md: 0 10px 30px rgba(18, 24, 46, 0.08);
    --radius: 14px;
}

/* Layout */
.pune-dashboard {
    min-height: 100vh;
    background: linear-gradient(180deg, var(--bg), #ffffff);
    padding: 28px;
    font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    color: #0f172a;
}

.pune-dashboard .container {
    max-width: 1400px;
    margin: 0 auto;
}

/* Header */
.pune-header {
    background: linear-gradient(90deg, rgba(79, 70, 229, 0.06), rgba(16, 185, 129, 0.03));
    border-radius: var(--radius);
    padding: 22px;
    display: flex;
    gap: 18px;
    align-items: center;
    justify-content: space-between;
    box-shadow: var(--shadow-sm);
    border: 1px solid rgba(79, 70, 229, 0.06);
    transition: transform .28s ease, box-shadow .28s ease;
}

.pune-header:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-md);
}

.pune-header h1 {
    font-size: 20px;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
}

.pune-header p {
    margin: 6px 0 0 0;
    color: var(--muted);
    font-size: 13px;
}

.pune-header .brand-badge {
    width: 44px;
    height: 44px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(180deg, #eef2ff, #ede9fe);
    color: var(--accent-indigo);
    box-shadow: inset 0 -6px 18px rgba(79, 70, 229, 0.04);
}

.header-controls {
    display: flex;
    align-items: center;
    gap: 10px;
}

.header-controls .control {
    background: transparent;
    border-radius: 10px;
    padding: 8px 10px;
    display: flex;
    gap: 8px;
    align-items: center;
    border: 1px solid rgba(15, 23, 42, .04);
}

.header-controls .btn {
    cursor: pointer;
    border-radius: 10px;
    padding: 9px 12px;
    border: none;
    display: inline-flex;
    gap: 8px;
    align-items: center;
    font-weight: 600;
    font-size: 14px;
}

.btn-primary {
    background: var(--accent-indigo);
    color: white;
    box-shadow: 0 6px 18px rgba(79, 70, 229, 0.12);
}

.btn-ghost {
    background: transparent;
    border: 1px solid rgba(15, 23, 42, 0.06);
}

/* KPI cards */
.kpi-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 18px;
}

.kpi-card {
    background: var(--card-bg);
    padding: 18px;
    border-radius: 12px;
    box-shadow: var(--shadow-sm);
    border-left: 6px solid rgba(0, 0, 0, 0.03);
    transition: transform .22s ease, box-shadow .22s ease;
    overflow: hidden;
    position: relative;
}

.kpi-card:hover {
    transform: translateY(-6px);
    box-shadow: var(--shadow-md);
}

.kpi-card .kpi-label {
    font-size: 13px;
    color: var(--muted);
}

.kpi-card .kpi-value {
    font-size: 26px;
    font-weight: 800;
    margin-top: 6px;
    color: #0b1220;
    letter-spacing: -0.02em;
}

.kpi-card .kpi-meta {
    font-size: 12px;
    color: #9aa1b2;
    margin-top: 8px;
}

.kpi-card .kpi-icon {
    width: 48px;
    height: 48px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.kpi-card.indigo {
    border-left-color: var(--accent-indigo);
}

.kpi-card.emerald {
    border-left-color: var(--accent-emerald);
}

.kpi-card.amber {
    border-left-color: var(--accent-amber);
}

/* gentle floating animation for icons */
@keyframes floaty {
    0% {
        transform: translateY(0);
    }

    50% {
        transform: translateY(-6px);
    }

    100% {
        transform: translateY(0);
    }
}

.kpi-card .kpi-icon {
    animation: floaty 6s ease-in-out infinite;
}

/* Charts */
.charts-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 18px;
}

.chart-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 18px;
    box-shadow: var(--shadow-sm);
    transition: transform .22s ease;
    overflow: hidden;
}

.chart-card:hover {
    transform: translateY(-6px);
    box-shadow: var(--shadow-md);
}

.chart-card .card-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 12px;
}

.chart-card .title-left {
    display: flex;
    align-items: center;
    gap: 10px;
}

.chart-card .sparkline {
    height: 260px;
}

/* Pie legend */
.pie-legend {
    margin-top: 10px;
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.pie-legend .row {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.pie-legend .dot {
    width: 10px;
    height: 10px;
    border-radius: 4px;
    margin-right: 8px;
}

/* Data table */
.table-wrapper {
    border-radius: 10px;
    overflow: auto;
    box-shadow: var(--shadow-sm);
    border: 1px solid rgba(15, 23, 42, 0.04);
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 980px;
}

.data-table thead th {
    position: sticky;
    top: 0;
    background: linear-gradient(180deg, #fff, #fbfdff);
    z-index: 10;
    padding: 12px;
    font-size: 12px;
    color: var(--muted);
    text-align: left;
    border-bottom: 1px solid rgba(15, 23, 42, 0.04);
}

.data-table td {
    padding: 10px 12px;
    vertical-align: middle;
    border-bottom: 1px solid rgba(15, 23, 42, 0.03);
}

.data-table tbody tr:hover {
    background: linear-gradient(90deg, rgba(79, 70, 229, 0.02), rgba(16, 185, 129, 0.01));
}

/* Avatar */
.avatar {
    width: 38px;
    height: 38px;
    border-radius: 50%;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: 700;
    color: var(--accent-indigo);
    background: linear-gradient(180deg, #eef2ff, #f8f7ff);
}

/* Attendance bubbles */
.att-bubble {
    width: 28px;
    height: 28px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    font-weight: 700;
    font-size: 12px;
}

.att-present {
    background: linear-gradient(180deg, #ecfdf5, #bbf7d0);
    color: #065f46;
    box-shadow: 0 3px 8px rgba(16, 185, 129, 0.08);
}

.att-absent {
    background: #f3f4f6;
    color: #6b7280;
}

/* Percent badges */
.pct-badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 6px 10px;
    border-radius: 999px;
    font-weight: 800;
    font-size: 12px;
}

.pct-high {
    background: var(--accent-emerald);
    color: white;
}

.pct-med {
    background: var(--accent-amber);
    color: white;
}

.pct-low {
    background: var(--danger);
    color: white;
}

/* Search & filters */
.search-input {
    position: relative;
}

.search-input input {
    padding: 10px 12px 10px 40px;
    border-radius: 10px;
    border: 1px solid rgba(15, 23, 42, 0.06);
    min-width: 220px;
}

.search-input .icon {
    position: absolute;
    left: 12px;
    top: 50%;
    transform: translateY(-50%);
    color: #9aa1b2;
}

/* small helpers */
.row {
    display: flex;
    gap: 12px;
    align-items: center;
}

.small {
    font-size: 13px;
    color: var(--muted);
}

/* Loading skeletons */
.skel {
    background: linear-gradient(90deg, rgba(255, 255, 255, 0.4) 0%, rgba(245, 245, 245, 0.6) 50%, rgba(255, 255, 255, 0.4) 100%);
    background-size: 200% 100%;
    animation: shimmer 1.4s linear infinite;
}

@keyframes shimmer {
    0% {
        background-position: 200% 0
    }

    100% {
        background-position: -200% 0
    }
}

/* Responsive */
@media (max-width: 1024px) {
    .kpi-grid {
        grid-template-columns: repeat(2, 1fr);
    }

    .charts-grid {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 640px) {
    .kpi-grid {
        grid-template-columns: 1fr;
    }

    .pune-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 12px;
    }
}

/* subtle page entrance */
.pune-dashboard .card {
    opacity: 0;
    transform: translateY(8px) scale(.995);
    animation: cardIn .45s ease forwards;
}

.pune-dashboard .card:nth-child(1) {
    animation-delay: 0.05s;
}

.pune-dashboard .card:nth-child(2) {
    animation-delay: 0.12s;
}

@keyframes cardIn {
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

/* Utility color helpers for pie labels (keeps parity with existing color palette) */
.pie-color-0 {
    background: #4F46E5;
}

.pie-color-1 {
    background: #10B981;
}

.pie-color-2 {
    background: #F59E0B;
}

.pie-color-3 {
    background: #EF4444;
}

.pie-color-4 {
    background: #8B5CF6;
}

.pie-color-5 {
    background: #EC4899;
}

.pie-color-6 {
    background: #06B6D4;
}

/* Footer */
.pune-footer {
    color: var(--muted);
    font-size: 12px;
    background: transparent;
    padding: 14px;
    margin-top: 6px;
}

/* Tiny accessibility focus styles */
:focus {
    outline: 3px solid rgba(79, 70, 229, 0.12);
    outline-offset: 2px;
}

/* End of dashboard.css */
