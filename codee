



{
  "summary": [
    {
      "floor": "Out of office",
      "rejectionCount": 44
    }
  ],
  "details": [
    {
      "LocaleMessageTime": "2025-09-15T15:06:01.000Z",
      "DateOnly": "2025-09-15T00:00:00.000Z",
      "SwipeTime": "1970-01-01T15:06:01.000Z",
      "CardNumber": "610043",
      "PersonnelType": "Employee",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 06. Fitness Center West_11:01:B9",
      "RejectionType": "Clearance",
      "floor": "Out of office"
    },
    {
      "LocaleMessageTime": "2025-09-15T12:30:46.000Z",
      "DateOnly": "2025-09-15T00:00:00.000Z",
      "SwipeTime": "1970-01-01T12:30:46.000Z",
      "CardNumber": "618918",
      "PersonnelType": "Contractor",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
      "RejectionType": "Expired",
      "floor": "Out of office"
    },
    {
      "LocaleMessageTime": "2025-09-15T12:30:40.000Z",
      "DateOnly": "2025-09-15T00:00:00.000Z",
      "SwipeTime": "1970-01-01T12:30:40.000Z",
      "CardNumber": "618918",
      "PersonnelType": "Contractor",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
      "RejectionType": "Expired",
      "floor": "Out of office"
    },
    {
floor i dont want Out of office 
floor if Out of office then chekc  "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
in door "US.CO.HQ. 12 this means floor 12 ok 
   "Door": "US.CO.HQ. 06. Fitness Center West_11:01:B9", this US.CO.HQ. 06 means floor 6 ok
 floor 6: 12
floor 12: 20 liket that ok





// controllers/denverRejection.js
const { denver } = require("../config/siteConfig");
const doorFloorMap = require("../data/denverDoorFloorMap");
const normalizeKey = require("../data/normalizeKey"); // import normalizeKey

// helper: regex fallback to extract floor number from Door string
function extractFloorFromDoor(door) {
  if (!door) return "Unknown";
  const match = door.match(/HQ\.\s*(\d{2})\./i);
  if (match) {
    return `Floor ${parseInt(match[1], 10)}`;
  }
  return "Unknown";
}

async function getRejections(req, res) {
  try {
    const pool = await denver.poolPromise;

    const query = `
      WITH CombinedQuery AS (
        SELECT
          DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
          t1.ObjectName1      AS ObjectName1,
          t1.ObjectName2      AS Door,
          t1.PartitionName2   AS PartitionName2,
          COALESCE(
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
            sc.value
          )                    AS CardNumber,
          t3.Name              AS PersonnelType,
          t5_rej.value         AS RejectionType
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] AS t1
        LEFT JOIN [ACVSCore].[Access].[Personnel] AS t2
          ON t1.ObjectIdentity1 = t2.GUID
        LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
          ON t2.PersonnelTypeId = t3.ObjectID
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] AS t_xml
          ON t1.XmlGUID = t_xml.GUID
        LEFT JOIN (
          SELECT GUID, value
          FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
          WHERE Name IN ('Card','CHUID')
        ) AS sc
          ON t1.XmlGUID = sc.GUID
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] AS t5_rej
          ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
        WHERE
          t1.MessageType = 'CardRejected'
          AND t1.PartitionName2 = 'US.CO.OBS' -- ✅ only this location
          AND CONVERT(DATE,
               DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)
              ) >= DATEADD(DAY, -7, CONVERT(DATE, GETDATE()))
      )
      SELECT
        LocaleMessageTime,
        CONVERT(date, LocaleMessageTime)    AS DateOnly,
        CONVERT(time(0), LocaleMessageTime) AS SwipeTime,
        CardNumber,
        PersonnelType,
        PartitionName2                     AS Location,
        Door,
        RejectionType
      FROM CombinedQuery
      ORDER BY LocaleMessageTime DESC;
    `;

    const result = await pool.request().query(query);

    // Post-process in JS
    const details = result.recordset.map(r => {
      let floor = "Unknown";

      try {
        const [doorRaw, dirRaw] = (r.Door || "").split("___");
        const normKey = normalizeKey(doorRaw || "", dirRaw || "");

        // 1️⃣ try doorFloorMap first
        if (doorFloorMap[normKey]) {
          floor = doorFloorMap[normKey];
        } else {
          // 2️⃣ fallback to regex parsing
          floor = extractFloorFromDoor(r.Door);
        }
      } catch (e) {
        console.warn("Failed to resolve floor for door:", r.Door, e.message);
      }

      return { ...r, floor };
    });

    // Floor-wise rejection count
    const summary = details.reduce((acc, row) => {
      if (!acc[row.floor]) acc[row.floor] = 0;
      acc[row.floor]++;
      return acc;
    }, {});

    const summaryArr = Object.entries(summary).map(([floor, rejectionCount]) => ({
      floor,
      rejectionCount
    }));

    res.json({
      summary: summaryArr,
      details
    });

  } catch (err) {
    console.error("Error fetching rejection data:", err);
    res.status(500).send("Server Error");
  }
}

module.exports = { getRejections };
