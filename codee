// src/components/FloorOccupancyChart.jsx
import React from 'react';
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  Cell,
  LabelList,
  Legend,
  Customized,
  CartesianGrid
} from 'recharts';
import { Card } from 'react-bootstrap';
import { FaUsers } from 'react-icons/fa';
import floorCapacities from '../constants/floorCapacities';

/* Color pairs for the bars (repeats if more floors) */
const CYLINDER_COLORS = [
  ['#BEE9FF', '#4DB8FF'],
  ['#DDEBFF', '#2F80ED'],
  ['#FFDEE1', '#E74C7C'],
  ['#FFF1D6', '#FF9A3D'],
  ['#E6FCD7', '#46C853']
];

export default function FloorOccupancyChart({ data = [] }) {
  if (!data || !data.length) {
    return (
      <Card body className="bg-dark text-white">
        No floor data available
      </Card>
    );
  }

  // enrich with capacity, usedPct, label, and preserve breakdown
  const enriched = data.map((floorObj) => {
    const { floor, total: liveCount = 0 } = floorObj;
    const capacity = floorCapacities[floor] ?? 0;
    const usedPct = capacity > 0 ? Number(((liveCount / capacity) * 100).toFixed(1)) : 0;
    return {
      ...floorObj,
      capacity,
      liveCount,
      usedPct,
      label: `${liveCount}/${capacity}`
    };
  });

  // totals and chart data
  const totalLive = enriched.reduce((s, f) => s + f.liveCount, 0);
  const totalCap = enriched.reduce((s, f) => s + f.capacity, 0);
  const totalUsedPct = totalCap > 0 ? Number(((totalLive / totalCap) * 100).toFixed(1)) : 0;

  const totalEntry = {
    floor: 'Pune Office Total',
    liveCount: totalLive,
    capacity: totalCap,
    usedPct: totalUsedPct,
    label: `${totalLive}/${totalCap}`
  };

  const sortedFloors = [...enriched].sort((a, b) => b.liveCount - a.liveCount);
  const chartData = [totalEntry, ...sortedFloors];

  // Y domain logic (so bars look nice)
  const maxLive = Math.max(...chartData.map(f => f.liveCount), ...chartData.map(f => f.capacity)) || 10;
  const yDomainMax = Math.ceil((maxLive * 1.15) / 10) * 10;

  // Tooltip
  const renderTooltip = ({ active, payload }) => {
    if (!active || !payload?.length) return null;
    const floorObj = payload[0].payload;
    const { liveCount, capacity, usedPct } = floorObj;
    const breakdownEntries = Object.entries(floorObj).filter(
      ([key]) => !['floor', 'liveCount', 'capacity', 'usedPct', 'label'].includes(key)
    );

    return (
      <div style={{
        backgroundColor: '#0f1724',
        color: '#FFD100',
        border: '1px solid rgba(255,209,0,0.18)',
        borderRadius: 8,
        padding: '10px',
        minWidth: 220
      }}>
        <div style={{ fontSize: 14, marginBottom: 6, fontWeight: 700 }}>{floorObj.floor}</div>
        <div style={{ fontSize: 13, marginBottom: 6 }}>
          <strong style={{ color: '#fff' }}>{liveCount}</strong> / {capacity} &nbsp;
          <span style={{ color: '#FFD100' }}>({usedPct}%)</span>
        </div>
        {breakdownEntries.map(([k, v]) => (
          <div key={k} style={{ display: 'flex', justifyContent: 'space-between', color: '#E6EEF8', fontSize: 13 }}>
            <div style={{ opacity: 0.85 }}>{k.charAt(0).toUpperCase() + k.slice(1)}</div>
            <div style={{ fontWeight: 700 }}>{v}</div>
          </div>
        ))}
      </div>
    );
  };

  // -----------------------
  // Flat, modern bar shape
  // -----------------------
  // Draws a rounded rectangle with gradient, then centers the usedPct inside,
  // and shows the live/cap label below the percent (inside the bar).
  const FlatBarShape = (props) => {
    const { x, y, width, height, payload } = props;
    const floorName = payload && payload.floor;
    const idx = chartData.findIndex(d => d.floor === floorName);
    const [c1, c2] = CYLINDER_COLORS[idx % CYLINDER_COLORS.length];
    const gradId = `grad-${idx}`;

    const cx = x + width / 2;
    const percentText = `${payload.usedPct}%`;
    const labelText = payload.label || '';

    // If height is too small, nudge vertical positions to avoid overlap
    const pctY = height > 36 ? y + height * 0.45 : y + Math.max(10, height - 8);
    const labelY = pctY + 16;

    return (
      <g>
        <defs>
          <linearGradient id={gradId} x1="0" y1="0" x2="0" y2="1">
            <stop offset="0%" stopColor={c1} stopOpacity={1} />
            <stop offset="100%" stopColor={c2} stopOpacity={1} />
          </linearGradient>
          {/* subtle inner highlight to give modern flat depth */}
          <linearGradient id={`hi-${idx}`} x1="0" y1="0" x2="0" y2="1">
            <stop offset="0%" stopColor="rgba(255,255,255,0.18)" />
            <stop offset="50%" stopColor="rgba(255,255,255,0.06)" />
            <stop offset="100%" stopColor="rgba(255,255,255,0.02)" />
          </linearGradient>
        </defs>

        {/* background rounded rect (same color but with low opacity to give track feel) */}
        <rect
          x={x}
          y={y}
          width={width}
          height={height}
          rx={10}
          ry={10}
          fill={`url(#${gradId})`}
          stroke="rgba(0,0,0,0.12)"
          strokeWidth={1}
        />

        {/* subtle overlay highlight for sophistication */}
        <rect
          x={x}
          y={y}
          width={width}
          height={height * 0.5}
          rx={10}
          ry={10}
          fill={`url(#hi-${idx})`}
          opacity={0.55}
        />

        {/* centered percentage */}
        <text
          x={cx}
          y={pctY}
          textAnchor="middle"
          fontSize={Math.max(12, Math.round(width * 0.14))}
          fontWeight="700"
          fill="#ffffff"
        >
          {percentText}
        </text>

        {/* small live/cap label under percentage (contrast for readability) */}
        <text
          x={cx}
          y={labelY}
          textAnchor="middle"
          fontSize={Math.max(10, Math.round(width * 0.11))}
          fontWeight="600"
          fill="rgba(255,255,255,0.88)"
        >
          {labelText}
        </text>
      </g>
    );
  };

  // Curve overlay (keeps the line that ties the bars visually)
  const CurveOverlay = (props) => {
    const { xAxisMap, yAxisMap } = props;
    if (!xAxisMap || !yAxisMap) return null;
    const xKey = Object.keys(xAxisMap)[0];
    const yKey = Object.keys(yAxisMap)[0];
    const xScale = xAxisMap[xKey].scale;
    const yScale = yAxisMap[yKey].scale;
    if (!xScale || !yScale) return null;

    const points = chartData.map(d => {
      const x = xScale(d.floor) + (xScale.bandwidth ? xScale.bandwidth() / 2 : 0);
      const y = yScale(d.liveCount);
      return { x, y };
    });
    if (points.length < 2) return null;

    let path = `M ${points[0].x} ${points[0].y}`;
    for (let i = 1; i < points.length; i++) {
      const prev = points[i - 1];
      const cur = points[i];
      const midX = (prev.x + cur.x) / 2;
      const midY = (prev.y + cur.y) / 2;
      path += ` Q ${prev.x} ${prev.y} ${midX} ${midY}`;
    }
    const last = points[points.length - 1];
    path += ` T ${last.x} ${last.y}`;

    return (
      <g>
        <path d={path} fill="none" stroke="rgba(255,255,255,0.12)" strokeWidth={3} strokeOpacity={0.5} />
        <path d={path} fill="none" stroke="#FFD100" strokeWidth={2.5} strokeOpacity={0.95} strokeLinecap="round" />
      </g>
    );
  };

  return (
    <Card className="mb-3 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header className="bg-dark text-warning text-center fw-bold" style={{ borderBottom: '2px solid var(--wu-yellow)', fontSize: '1.08rem' }}>
        Western Union - Pune Headcount vs Occupancy
      </Card.Header>

      <Card.Body style={{ height: '50vh', padding: 0, backgroundColor: 'var(--wu-gray-dark)' }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={chartData}
            margin={{ top: 18, right: 20, left: 20, bottom: 36 }}
            barCategoryGap="22%"
          >
            {/* per-bar gradients */}
            <defs>
              {chartData.map((_, idx) => {
                const [c1, c2] = CYLINDER_COLORS[idx % CYLINDER_COLORS.length];
                return (
                  <linearGradient id={`cyl-grad-${idx}`} key={`cyl-grad-${idx}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={c1} stopOpacity={1} />
                    <stop offset="100%" stopColor={c2} stopOpacity={1} />
                  </linearGradient>
                );
              })}
            </defs>

            {/* light grid for reference */}
            <CartesianGrid stroke="rgba(255,255,255,0.04)" vertical={false} strokeDasharray="3 3" />

            <XAxis
              dataKey="floor"
              tick={{ fontSize: 12, fill: '#E8EEF8' }}
              interval={0}
              height={64}
            />
            <YAxis
              tick={{ fontSize: 12, fill: '#E8EEF8' }}
              domain={[0, yDomainMax]}
              width={56}
            />

            <Tooltip content={renderTooltip} />

            <Legend verticalAlign="top" align="center" wrapperStyle={{ color: '#fff', paddingBottom: 6 }} payload={[{ value: 'Live Headcount', type: 'square', color: CYLINDER_COLORS[0][1] }]} />

            {/* use the custom flat bar shape */}
            <Bar dataKey="liveCount" barSize={80} shape={<FlatBarShape />}>
              {chartData.map((d, idx) => (
                <Cell key={`cyl-cell-${idx}`} fill={`url(#cyl-grad-${idx})`} />
              ))}
              {/* small numeric label on top */}
              <LabelList dataKey="liveCount" position="top" formatter={(v) => v} style={{ fill: '#fff', fontSize: 13, fontWeight: 700 }} />
            </Bar>

            {/* curve overlay */}
            <Customized component={(props) => <CurveOverlay {...props} />} />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}