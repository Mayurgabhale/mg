import ExcelJS from 'exceljs'; // add this import at the top

  const handleExportSummary = async () => {
    const wb = new ExcelJS.Workbook();
    const ws = wb.addWorksheet('Summary');

    // Headers
    const headers = ['Country', 'City', 'Employee', 'Contractors'];
    if (isCostaRica) headers.push('Temp Badge');
    headers.push('Total');

    ws.addRow(headers);

    // Header style
    ws.getRow(1).eachCell(cell => {
      cell.font = { bold: true, color: { argb: 'FFFFFFFF' } };
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF000000' } };
      cell.alignment = { horizontal: 'center' };
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });

    // Data rows
    partitionRows.forEach((r, i) => {
      const row = [
        r.country,
        r.city,
        r.employee,
        r.contractor,
        ...(isCostaRica ? [r.tempBadge] : []),
        r.total
      ];
      ws.addRow(row);

      const excelRow = ws.getRow(ws.lastRow.number);
      excelRow.eachCell(cell => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' }
        };
      });

      // zebra striping
      if (i % 2 === 0) {
        excelRow.eachCell(cell => {
          cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF9F9F9' } };
        });
      }
    });

    // Totals row
    const totalRow = [
      'Total', '',
      partitionRows.reduce((s, r) => s + r.employee, 0),
      partitionRows.reduce((s, r) => s + r.contractor, 0),
      ...(isCostaRica ? [partitionRows.reduce((s, r) => s + r.tempBadge, 0)] : []),
      partitionRows.reduce((s, r) => s + r.total, 0)
    ];
    ws.addRow(totalRow);

    const last = ws.lastRow;
    last.eachCell(cell => {
      cell.font = { bold: true, color: { argb: 'FFFFFFFF' } };
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF666666' } };
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
    });

    // Auto-fit columns
    ws.columns.forEach(col => {
      let maxLength = 0;
      col.eachCell({ includeEmpty: true }, cell => {
        const v = cell.value ? cell.value.toString() : '';
        maxLength = Math.max(maxLength, v.length);
      });
      col.width = maxLength + 2;
    });

    const buf = await wb.xlsx.writeBuffer();
    saveAs(new Blob([buf]), `summary_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };





...


<Box display="flex" justifyContent="center" sx={{ mt: 1, gap: 2 }}>
                <Button variant="outlined" sx={{ borderColor: '#FFC107', color: '#FFC107' }}
                  onClick={handleExportSummary}
                  disabled={!partitionRows.length}
                >
                  Export Summary to Excel
                </Button>

                <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }}
                  onClick={() => setShowDetails(v => !v)}>
                  {showDetails ? 'Hide Details' : 'See Details'}
                </Button>
                {showDetails && (
                  <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                    onClick={handleExport}>
                    Export to Excel
                  </Button>
                )}
              </Box>