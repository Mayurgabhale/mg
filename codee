to select time and data to get correct  occupnacy..
i want to change all dashboard to select time and date chart or graph ok 
how to add this in frontedn and where to 

// C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\Header.jsx
import React, { useEffect, useState } from 'react';
import {
  AppBar,
  Toolbar,
  Box,
  Typography,
  Select,
  MenuItem,
  IconButton
} from '@mui/material';
import { Link, useNavigate, useLocation } from 'react-router-dom';

import HomeIcon from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import ListAltIcon from '@mui/icons-material/ListAlt';

import WuLogo from '../assets/wu-logo.png';
import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag from '../assets/flags/argentina.png';
import MexicoFlag from '../assets/flags/mexico.png';
import PeruFlag from '../assets/flags/peru.png';
import BrazilFlag from '../assets/flags/brazil.png';
import PanamaFlag from '../assets/flags/panama.png';
import LacaFlag from '../assets/laca-flag.png';

import { partitionList } from '../services/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

import { Nav } from 'react-bootstrap'; // ✅ Add this

const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'MX.Mexico City': 'Mexico',
  'AR.Cordoba': 'Cordoba',
  'PA.Panama City': 'Panama',
  'PE.Lima': 'Lima',
  'BR.Sao Paulo': 'Sao Paulo'
};

export default function Header() {
  const navigate = useNavigate();
  const loc = useLocation();
  // live‐update timer in header
  const { data } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  const parts = loc.pathname.split('/').filter(Boolean);
  const isPartitionPath = parts[0] === 'partition' && Boolean(parts[1]);
  const currentPartition = isPartitionPath ? decodeURIComponent(parts[1]) : '';
  const suffixSegments = isPartitionPath
    ? parts.slice(2)
    : parts[0] === 'history'
      ? ['history']
      : [];

  const flagMap = {
    'CR.Costa Rica Partition': CostaRicaFlag,
    'AR.Cordoba': ArgentinaFlag,
    'MX.Mexico City': MexicoFlag,
    'PE.Lima': PeruFlag,
    'BR.Sao Paulo': BrazilFlag,
    'PA.Panama City': PanamaFlag,
  };
  const selectedFlag = flagMap[currentPartition] || LacaFlag;

  const makePartitionPath = suffix => {
    const base = `/partition/${encodeURIComponent(currentPartition)}`;
    return suffix ? `${base}/${suffix}` : base;
  };

  const handlePartitionChange = newPartition => {
    if (!newPartition) return navigate('/');
    const base = `/partition/${encodeURIComponent(newPartition)}`;
    const full = suffixSegments.length
      ? `${base}/${suffixSegments.join('/')}`
      : base;
    navigate(full);
  };

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between', alignItems: 'center' }}>
        {/* Left: Logo, Title, Nav */}
        <Box display="flex" alignItems="center" sx={{ flexGrow: 1 }}>
          <Box component="img" src={WuLogo} alt="WU Logo" sx={{ height: 36, mr: 2 }} />

          <Typography variant="h6" sx={{ fontWeight: 600, mr: 3 }}>
            Western Union – LACA
            {currentPartition && <> • {displayNameMap[currentPartition] || currentPartition}</>}
          </Typography>

          {/* Live update timer */}
          <Typography
            variant="caption"
            sx={{
              color: '#FFC72C',
              ml: 2,
              gap: 20,
              fontStyle: 'Aptos Narrow',
              opacity: data ? 1 : 0,
              transition: 'opacity 0.8s'
            }}
          >
            {/* {lastUpdate} */}
          </Typography>
          {/* Home/History/Details icons */}
          <IconButton size="large" color="inherit"
            onClick={() => navigate(currentPartition ? `/partition/${encodeURIComponent(currentPartition)}` : '/')}>
            <HomeIcon sx={{ color: '#4caf50' }} />
          </IconButton>
          <IconButton size="large" color="inherit"
            onClick={() => navigate(currentPartition ? makePartitionPath('history') : '/history')}>
            <HistoryIcon sx={{ color: '#F88379' }} />
          </IconButton>
          {/* Details icon always shown; defaults to Costa Rica if no partition yet */}
          <IconButton size="large" color="inherit"
            onClick={() => {
              const target = currentPartition
                ? makePartitionPath('details')
                : '/partition/CR.Costa%20Rica%20Partition/details';
              navigate(target);
            }}>
            <ListAltIcon sx={{ color: '#2196f3' }} />
          </IconButton>

          <Nav.Link as={Link} to="/ErtPage" className="nav-item-infographic">
            ERT Overview
          </Nav.Link>

        </Box>

        {/* Right: Selector + Flag */}
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={currentPartition}
            displayEmpty
            onChange={e => handlePartitionChange(e.target.value)}
            sx={{ bgcolor: 'background.paper', mr: 2, minWidth: 150 }}
          >
            <MenuItem value="">— Select Partition —</MenuItem>
            {partitionList.map(p => (
              <MenuItem key={p} value={p}>
                {displayNameMap[p] || p}
              </MenuItem>
            ))}
          </Select>
          <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 50 }} />
        </Box>
      </Toolbar>
    </AppBar>
  );
}

??????????


// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton, Fade } from '@mui/material';
import { useNavigate } from 'react-router-dom';

// Flags
import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag from '../assets/flags/argentina.png';
import MexicoFlag from '../assets/flags/mexico.png';
import PeruFlag from '../assets/flags/peru.png';
import BrazilFlag from '../assets/flags/brazil.png';
import PanamaFlag from '../assets/flags/panama.png';

import Header from '../components/Header';
import SummaryCard from '../components/SummaryCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
// import seatCapacities from '../data/seatCapacities';
import seatCapacities from '../data/seatCapacities';
import buildingCapacities from '../data/buildingCapacities';
import CompositeChartCard from '../components/CompositeChartCard';
import LineChartCard from '../components/LineChartCard';
import PieChartCard from '../components/PieChartCard';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';

const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba': 'Argentina',
  'MX.Mexico City': 'Mexico',
  'PE.Lima': 'Peru',
  'BR.Sao Paulo': 'Brazil',
  'PA.Panama City': 'Panama'
};

const colorsMap = {
  'CR.Costa Rica Partition': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063', '#ec7063'],
  'AR.Cordoba': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
  'MX.Mexico City': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PE.Lima': ['#FFF2CC', '#fcf3cf', '#2ecc71', '#ec7063'],
  'BR.Sao Paulo': ['#FFD666', '#fcf3cf', '#2ecc71', '#ec7063'],
  'PA.Panama City': ['#FFE599', '#fcf3cf', '#2ecc71', '#ec7063'],
};

const widgetMap = {
  'CR.Costa Rica Partition': 'composite',
  'AR.Cordoba': 'line',
  'BR.Sao Paulo': 'pie',
  'MX.Mexico City': 'pie',
  'PE.Lima': 'pie',
  'PA.Panama City': 'pie',
};

const palette15 = [
  '#FFC107', '#E57373', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

export default function Dashboard() {
  const { data, loading, error } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');
  const navigate = useNavigate();
  useEffect(() => {
    if (data) {
      setLastUpdate(new Date().toLocaleTimeString());
    }
  }, [data]);

  if (error) {
    return (
      <Box width="100vw%" py={4}>
        <Typography color="error" align="center">
          Error loading live data
        </Typography>
      </Box>
    );
  }

  const regions = data?.realtime || {};
  const flagMap = {
    'CR.Costa Rica Partition': CostaRicaFlag,
    'AR.Cordoba': ArgentinaFlag,
    'MX.Mexico City': MexicoFlag,
    'PE.Lima': PeruFlag,
    'BR.Sao Paulo': BrazilFlag,
    'PA.Panama City': PanamaFlag,
  };

  const partitions = partitionList.map(name => {
    const key = Object.keys(regions).find(k => k.includes(name));
    const p = key ? regions[key] : {};
    return {
      name,
      total: p.total || 0,
      Employee: p.Employee || 0,
      Contractor: p.Contractor || 0,
      floors: p.floors || {},
      flag: flagMap[name], // ✅ Assign the correct flag here
    };
  }).sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total ?? 0;
  const todayEmp = data?.today?.Employee ?? 0;
  const todayCont = data?.today?.Contractor ?? 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);
  const crPartition = partitions.find(p => p.name === 'CR.Costa Rica Partition');
  const arPartition = partitions.find(p => p.name === 'AR.Cordoba');
  const smallOnes = partitions.filter(p =>
    ['MX.Mexico City', 'BR.Sao Paulo', 'PE.Lima', 'PA.Panama City'].includes(p.name)
  );

if (loading) {
  return (
    <Box
      sx={{
        position: 'fixed',
        top: 0,
        left: 0,
        width: '100vw',
        height: '100vh',
        bgcolor: 'rgba(0, 0, 0, 0.85)',
        zIndex: 9999,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',}}>
      <LoadingSpinner />
    </Box>
  );
}
  return (
    <>
      <Header />
      <Container
        maxWidth={false}
        disableGutters
        // sx={{ py: 3, px: 2, background: 'rgba(0, 0, 0, 0.93)' }}
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
          // minHeight: '100vh'
        }}>

        {/* Last updated */}
        <Typography
          variant="caption"
          sx={{ color: 'white', mb: 1, opacity: data ? 1 : 0, transition: 'opacity 0.6s' }}
        >
          {/* Last updated: {lastUpdate} */}
        </Typography>

        {/* Top six summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {[
            {
              title: "Today's Total Headcount",

              color: '#FFE599',
              value: todayTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFB300',

            },
            {
              title: "Today's Employees Count",
              value: todayEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#8BC34A'
            },
            {
              title: "Today's Contractors Count",
              value: todayCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#E57373'
            },
            {
              title: "Realtime Headcount",
              value: realtimeTot,
              icon: <i className="fa-solid fa-users" style={{ fontSize: 25, color: '#FFB300' }} />,
              border: '#FFD180'
            },
            {
              title: "Realtime Employees Count",
              value: realtimeEmp,
              icon: <i className="bi bi-people" style={{ fontSize: 25, color: '#EF5350' }} />,
              border: '#AED581'
            },
            {
              title: "Realtime Contractors Count",
              value: realtimeCont,
              icon: <i className="fa-solid fa-circle-user" style={{ fontSize: 25, color: '#8BC34A' }} />,
              border: '#E57373'
            }
          ].map(c => (
            <Box key={c.title} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={c.title}
                total={c.value}
                stats={[]}
                icon={c.icon}
                sx={{ height: 140, border: `2px solid ${c.border}` }}
              />
            </Box>
          ))}
        </Box>

        {/* Partition cards */}
        {/* Region Cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {loading
            ? <Skeleton variant="rectangular" width="90%" height={200} />
            :
            partitions.map((p, index) => (
              <Box
                key={p.name}
                sx={{ flex: '1 1 calc(16.66% - 8px)' }}
              >
                <SummaryCard
                  title={
                    <Typography
                      variant="subtitle1"
                      sx={{
                        fontWeight: 'bold',
                        color: '#FFC107',  // Change this to your desired color
                        fontSize: '1.3rem'
                      }}
                    >
                      {p.name.replace(/^.*\./, '')}
                    </Typography>
                  }
                  total={p.total}
                  stats={[
                    { label: 'Employees', value: p.Employee, color: '#40E0D0' },
                    { label: 'Contractors', value: p.Contractor, color: 'green' }
                  ]}
                  sx={{
                    width: '100%',
                    border: `2px solid ${palette15[index % palette15.length]}`
                  }}
                  icon={
                    <Box
                      component="img"
                      src={p.flag}
                      sx={{ width: 48, height: 32 }}
                    />
                  }
                />
              </Box>
            ))
          }

        </Box>

        {/* Partition detail widgets: 3 in one row */}
        {loading ? (
          <Skeleton variant="rectangular" width="100%" height={500} />
        ) : (
          <Box mt={4} display="flex" gap={2} justifyContent="space-between" flexWrap="wrap">

            {/* 1) Costa Rica composite */}
            <Box
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                border: '1px solid #FFE599',
                borderRadius: 2,
                boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
                '&:hover': { transform: 'scale(1.02)' },
                overflow: 'hidden',
                transition: 'transform 0.3s'
              }}
            >
              {crPartition.total === 0
                ? <Typography align="center" sx={{ py: 4, color: 'white' }}>
                  No realtime employee data
                </Typography>
                : <CompositeChartCard
                  title="Costa Rica"
                  data={Object.entries(crPartition.floors).map(([f, c]) => ({
                    name: f.trim(), headcount: c,
                    // capacity: seatCapacities[`Costa Rica-${f.trim()}`]||0
                    capacity: buildingCapacities[f.trim()] || 0
                  }))}
                  barColor={palette15[0]}
                  lineColor={palette15[1]}
                  height={350}
                  animationDuration={1500}
                  animationEasing="ease-in-out"
                />
              }
            </Box>

            {/* 2) Argentina line */}
            <Box
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                border: '1px solid #FFE599',
                borderRadius: 2,
                boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
                '&:hover': { transform: 'scale(1.02)' },
                overflow: 'hidden',
                transition: 'transform 0.3s'
              }}
            >
              {arPartition.total === 0
                ? <Typography align="center" sx={{ py: 4, color: 'white' }}>
                  No realtime employee data
                </Typography>
                : <LineChartCard
                  title="Argentina"
                  data={Object.entries(arPartition.floors).map(([f, c]) => ({
                    name: f.trim(), headcount: c,
                    capacity: seatCapacities[`Argentina-${f.trim()}`] || 0
                  }))}
                  totalCapacity={450}
                  lineColor1={palette15[2]}
                  lineColor2={palette15[3]}
                  height={350}
                  animationDuration={1500}
                  animationEasing="ease-in-out"
                />
              }
            </Box>

            {/* 3) Combined Pie */}
            <Box
              sx={{
                flex: '1 1 32%',
                minWidth: 280,
                border: '1px solid #FFE599',
                borderRadius: 2,
                boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
                '&:hover': { transform: 'scale(1.02)' },
                overflow: 'hidden',
                transition: 'transform 0.3s'
              }}
            >

              <PieChartCard
                title="Latin America"
                data={smallOnes.map(p => ({
                  name: displayNameMap[p.name],
                  value: p.total,
                  emp: p.Employee,
                  cont: p.Contractor
                }))}
                colors={[
                  palette15[4], palette15[5],
                  palette15[6], palette15[7]
                ]}
                height={350}
                showZeroSlice={true}
                animationDuration={1500}
                totalSeats={
                  smallOnes.reduce(
                    (sum, p) => sum + seatCapacities[displayNameMap[p.name]],
                    0
                  )
                }
              />
            </Box>
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}

const widgetBoxStyle = borderColor => ({
  flex: '1 1 32%',
  minWidth: 280,
  border: `1px solid ${borderColor}`,
  borderRadius: 2,
  boxShadow: '0 2px 6px rgba(0,0,0,0.5)',
  overflow: 'hidden',
  transition: 'transform 0.3s',
  '&:hover': { transform: 'scale(1.02)' }
});
function NoData({ text }) {
  return (
    <Typography align="center" sx={{ py: 4, color: 'white' }}>
      No realtime employee data in {text}
    </Typography>
  );
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
http://localhost:3001/api/occupancy/occupancy-at-time?date=2025-09-23&time=06:17:00&location=AR.Cordoba
http://localhost:3001/api/occupancy/occupancy-at-time?date=2025-09-23&time=06:17:00&location=CR.Costa%20Rica%20Partition

const { DateTime } = require('luxon'); // add at top of file if not already present

// Simple map from partition name -> IANA timezone. Update if you have a canonical map.
const partitionTimezoneMap = {
  'AR.Cordoba': 'America/Argentina/Cordoba',
  'BR.Sao Paulo': 'America/Sao_Paulo',
  'CR.Costa Rica Partition': 'America/Costa_Rica',
  'MX.Mexico City': 'America/Mexico_City',
  'PA.Panama City': 'America/Panama',
  'PE.Lima': 'America/Lima'
};


/**
 * Fetch occupancy snapshot for a specific date+time.
 * - date: 'YYYY-MM-DD'
 * - time: 'HH:MM' or 'HH:MM:SS'
 * - location: optional partition name (must match one in partitionList)
 *
 * Returns an array of raw rows (same shape as fetchLiveOccupancy / fetchHistoricalData),
 * where each row includes LocaleMessageTime (as a SQL datetime -> JS Date).
 */
exports.fetchSnapshotAtDateTime = async ({ date, time, location = null }) => {
  // validate simple formats (caller should already validate, but keep defensive)
  if (!date || !time) throw new Error('missing date or time');

  // choose timezone for the requested partition (default to UTC if unknown)
  const tz = location && partitionTimezoneMap[location]
    ? partitionTimezoneMap[location]
    : 'utc';

  // build a Luxon DateTime in that timezone
  const dtMatch = /^(\d{4})-(\d{2})-(\d{2})$/.exec(date);
  const timeMatch = /^([0-1]\d|2[0-3]):([0-5]\d)(?::([0-5]\d))?$/.exec(time);
  if (!dtMatch || !timeMatch) {
    throw new Error('invalid date/time format');
  }
  const year = Number(dtMatch[1]);
  const month = Number(dtMatch[2]);
  const day = Number(dtMatch[3]);
  const hour = Number(timeMatch[1]);
  const minute = Number(timeMatch[2]);
  const second = timeMatch[3] ? Number(timeMatch[3]) : 0;

  const atDt = DateTime.fromObject(
    { year, month, day, hour, minute, second, millisecond: 0 },
    { zone: tz }
  );

  if (!atDt.isValid) {
    throw new Error('invalid date+time combination');
  }

  // Convert to UTC Date for SQL parameter (SQL stores MessageUTC)
  const untilUtc = atDt.toUTC().toJSDate();

  const pool = await poolPromise;
  const req = pool.request();
  req.input('until', sql.DateTime, untilUtc);

  // partition filter: either single partition param or use configured partitionList
  let partitionFilterSql = `t1.PartitionName2 IN (${partitionList.map(p => `'${p.replace("'", "''")}'`).join(',')})`;
  if (location) {
    partitionFilterSql = `t1.PartitionName2 = @location`;
    req.input('location', sql.NVarChar, location);
  }

  // Query: compute LocaleMessageTime same as other service functions, but filter by MessageUTC window
  const q = `
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.MessageUTC,
        t1.ObjectName1,
        t1.ObjectName2            AS Door,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END                       AS EmployeeID,
        t2.text5                  AS Text5,
        t1.PartitionName2         AS PartitionName2,
        t1.ObjectIdentity1        AS PersonGUID,
        t3.Name                   AS PersonnelType,
        t2.Text4                  AS CompanyName,
        t2.Text5                  AS PrimaryLocation,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                         AS CardNumber,
        t5a.value                 AS AdmitCode,
        t5d.value                 AS Direction
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] AS t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     AS t2
        ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
        ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] AS t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] AS t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND ${partitionFilterSql}
        AND t1.MessageUTC <= @until
        AND DATEADD(HOUR, -24, @until) < t1.MessageUTC
    )
    SELECT *
    FROM CombinedQuery
    ORDER BY MessageUTC ASC;
  `;

  const result = await req.query(q);
  return { rows: result.recordset, atDtISO: atDt.toISO(), atDtZone: tz };
};





// ////////////////////////////////////////////////////




/**
 * Public wrapper: always last 7 days, all or by location.
 */
exports.fetchHistoricalOccupancy = async (location) => {
  return exports.fetchHistoricalData({ days: 7, location: location || null });
};

module.exports.partitionList = partitionList;




exports.getSnapshotAtDateTime = async (req, res) => {
  try {
    const { date, time, location } = req.query;
    if (!date || !time) {
      return res.status(400).json({
        success: false,
        message: 'missing query params: expected ?date=YYYY-MM-DD&time=HH:MM[:SS]&location=<optional partition>'
      });
    }

    // validate formats (same regex style used elsewhere)
    const dateMatch = /^(\d{4})-(\d{2})-(\d{2})$/.exec(date);
    const timeMatch = /^([0-1]\d|2[0-3]):([0-5]\d)(?::([0-5]\d))?$/.exec(time);
    if (!dateMatch) {
      return res.status(400).json({ success:false, message: 'invalid "date" format; expected YYYY-MM-DD' });
    }
    if (!timeMatch) {
      return res.status(400).json({ success:false, message: 'invalid "time" format; expected HH:MM or HH:MM:SS' });
    }

    // fetch raw rows
    const svcRes = await service.fetchSnapshotAtDateTime({ date, time, location });
    const rows = svcRes.rows || [];
    const asOfLocal = svcRes.atDtISO;
    const asOfZone = svcRes.atDtZone || 'utc';

    // convert LocaleMessageTime to ISO string and filter to requested local date (YYYY-MM-DD)
    const filtered = rows.map(r => {
      // LocaleMessageTime from SQL may be a Date or string; normalize to ISO
      const lmt = r.LocaleMessageTime instanceof Date ? r.LocaleMessageTime.toISOString() : (r.LocaleMessageTime || null);
      return { ...r, LocaleMessageTime: lmt };
    }).filter(r => {
      if (!r.LocaleMessageTime) return false;
      return r.LocaleMessageTime.slice(0,10) === date;
    });

    // compute unique visited-up-to-snapshot counts (first swipe per PersonGUID on that date)
    const firstByPerson = {};
    filtered.forEach(r => {
      const prev = firstByPerson[r.PersonGUID];
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!prev || t < new Date(prev.LocaleMessageTime).getTime()) {
        firstByPerson[r.PersonGUID] = r;
      }
    });
    const visitedRecs = Object.values(firstByPerson);
    const visitedCounts = { total: 0, Employee: 0, Contractor: 0, TempBadge: 0 };
    visitedRecs.forEach(r => {
      visitedCounts.total++;
      if (isTempBadgeType(r.PersonnelType)) visitedCounts.TempBadge++;
      else if (isEmployeeType(r.PersonnelType)) visitedCounts.Employee++;
      else visitedCounts.Contractor++;
    });

    return res.json({
      success: true,
      asOfLocal,          // ISO in requested partition zone
      asOfZone,
      asOfUTC: `${date}T${String(timeMatch[1]).padStart(2,'0')}:${String(timeMatch[2]).padStart(2,'0')}:${String(timeMatch[3] || '00').padStart(2,'0')}Z`,
      // totalRecords: filtered.length,
      totalVisitedToday: visitedCounts.total,
      visitedByType: visitedCounts,
      data: visitedRecs
    });

  } catch (err) {
    console.error('getSnapshotAtDateTime error:', err);
    return res.status(500).json({ success: false, message: 'Snapshot fetch failed' });
  }
};









