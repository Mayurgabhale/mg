const handleExportSummary = async () => {
    try {
      // dynamic import avoids issues with different bundler exports
      const excelModule = await import('exceljs');
      const Excel = excelModule.default || excelModule;

      // create workbook in a robust way depending on how exceljs was exported
      let wb;
      if (Excel && Excel.Workbook) {
        wb = new Excel.Workbook();
      } else if (typeof Excel === 'function') {
        // some builds export the constructor directly
        wb = new Excel();
      } else {
        throw new Error('ExcelJS Workbook constructor not found in imported module');
      }

      const ws = wb.addWorksheet('Summary');

      // Headers
      const headers = ['Country', 'City', 'Employee', 'Contractors'];
      if (isCostaRica) headers.push('Temp Badge');
      headers.push('Total');

      // Title row (date)
      ws.mergeCells(`A1:${String.fromCharCode(64 + headers.length)}1`);
      const titleCell = ws.getCell('A1');
      titleCell.value = format(pickedDate, 'EEEE, d MMMM, yyyy');
      titleCell.alignment = { horizontal: 'center', vertical: 'middle' };
      titleCell.font = { name: 'Calibri', size: 14, bold: true };

      // spacer
      ws.addRow([]);

      // Header row (row 3)
      const headerRow = ws.addRow(headers);
      headerRow.eachCell(cell => {
        cell.font = { bold: true, color: { argb: 'FFFFFFFF' } };
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF000000' } };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
        cell.border = {
          top: { style: 'thin', color: { argb: 'FF000000' } },
          left: { style: 'thin', color: { argb: 'FF000000' } },
          bottom: { style: 'thin', color: { argb: 'FF000000' } },
          right: { style: 'thin', color: { argb: 'FF000000' } },
        };
      });

      // Data rows
      partitionRows.forEach((r, i) => {
        const rowVals = [
          r.country,
          r.city,
          r.employee,
          r.contractor,
          ...(isCostaRica ? [r.tempBadge] : []),
          r.total
        ];
        const row = ws.addRow(rowVals);

        // borders & alignment
        row.eachCell((cell, colNumber) => {
          cell.border = {
            top: { style: 'thin', color: { argb: 'FFCCCCCC' } },
            left: { style: 'thin', color: { argb: 'FFCCCCCC' } },
            bottom: { style: 'thin', color: { argb: 'FFCCCCCC' } },
            right: { style: 'thin', color: { argb: 'FFCCCCCC' } },
          };
          cell.alignment = { vertical: 'middle', horizontal: (colNumber >= 3) ? 'right' : 'left' };
          cell.font = { name: 'Calibri', size: 11 };
        });

        // zebra
        if (i % 2 === 1) {
          row.eachCell(cell => {
            cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF7F7F7' } };
          });
        }
      });

      // Totals row
      const totalEmployees = partitionRows.reduce((s, r) => s + (r.employee || 0), 0);
      const totalContractors = partitionRows.reduce((s, r) => s + (r.contractor || 0), 0);
      const totalTempBadge = partitionRows.reduce((s, r) => s + (r.tempBadge || 0), 0);
      const totalTotal = partitionRows.reduce((s, r) => s + (r.total || 0), 0);

      const totals = [
        'Total', '',
        totalEmployees,
        totalContractors,
        ...(isCostaRica ? [totalTempBadge] : []),
        totalTotal
      ];
      const totalRow = ws.addRow(totals);

      totalRow.eachCell((cell, colNumber) => {
        cell.font = { name: 'Calibri', size: 12, bold: true, color: { argb: 'FFFFFFFF' } };
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF666666' } };
        cell.alignment = { horizontal: colNumber >= 3 ? 'right' : 'left', vertical: 'middle' };
        cell.border = {
          top: { style: 'thin', color: { argb: 'FF000000' } },
          left: { style: 'thin', color: { argb: 'FF000000' } },
          bottom: { style: 'thin', color: { argb: 'FF000000' } },
          right: { style: 'thin', color: { argb: 'FF000000' } },
        };
        if (colNumber >= 3) cell.numFmt = '#,##0';
      });

      // Auto-fit-ish columns
      ws.columns.forEach(col => {
        let maxLen = 10;
        col.eachCell({ includeEmpty: true }, c => {
          const v = c.value === null || c.value === undefined ? '' : String(c.value);
          maxLen = Math.max(maxLen, v.trim().length + 2);
        });
        col.width = Math.min(Math.max(maxLen, 8), 40);
      });

      // freeze header (title + spacer + header => freeze after row 3)
      ws.views = [{ state: 'frozen', ySplit: 3 }];

      const buf = await wb.xlsx.writeBuffer();
      saveAs(new Blob([buf]), `summary_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
    } catch (err) {
      // helpful debug message â€” inspect console if anything goes wrong in the environment
      // eslint-disable-next-line no-console
      console.error('handleExportSummary error:', err);
      // optional: surface a user-friendly alert
      // alert('Failed to export summary to Excel. See console for details.');
    }
  };