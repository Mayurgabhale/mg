// new: company click/filter state
  const [selectedCompany, setSelectedCompany] = useState(null);

  // helper: compute canonical company for a single detail row (same logic used by companyRows)
  const getCanonicalCompany = (r) => {
    const rawCompany = (r.CompanyName || '').toString().trim();
    const pt = (r.PersonnelType || '').toString().trim().toLowerCase();
    const s = rawCompany.toLowerCase();

    // If CompanyName contains CBRE and also mention of CLR or Facility -> CLR canonical
    if (s && /\bcbre\b/.test(s) && (/\bclr\b/.test(s) || /\bfacilit/i.test(s))) {
      return 'CLR  Facility Services Pvt.Ltd.';
    }
    // If CompanyName is exactly CBRE (or normalizes to CBRE) -> keep CBRE
    if (s && (s === 'cbre' || normalizeCompany(rawCompany) === 'CBRE')) {
      return 'CBRE';
    }
    // If CompanyName is blank -> use PersonnelType fallback rules
    if (!rawCompany) {
      if (pt.includes('contractor')) return 'CBRE';
      if (pt.includes('property') || pt.includes('management') || pt === 'property management') {
        return 'CBRE - CLR  Facility Services Pvt.Ltd.';
      }
      if (pt === 'employee') return 'Western Union';
      if (pt.includes('visitor')) return 'Visitor';
      if (pt.includes('temp')) return 'Temp Badge';
      return 'Unknown';
    }
    // otherwise use normalizeCompany
    return normalizeCompany(rawCompany);
  };






......



// clear company selection when date changes
  useEffect(() => {
    setSelectedCompany(null);
  }, [pickedDate]);







........



// ←——— FIXED detailRows: only filter by date & partition, no dedupe, no Direction check
  const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    return data.details
      .filter(r =>
        // match the date portion of the ISO timestamp
        r.LocaleMessageTime.slice(0, 10) === ds
        && (
          !backendFilterKey ||
          r.PartitionNameFriendly === backendFilterKey ||
          apacForwardKey[r.PartitionNameFriendly] === backendFilterKey
        )
        // if a company is selected, only include rows that map to that company
        && (
          !selectedCompany ||
          getCanonicalCompany(r) === selectedCompany
        )
      )
      .sort((a, b) =>
        a.LocaleMessageTime.localeCompare(b.LocaleMessageTime)
      );
  }, [data, pickedDate, showDetails, backendFilterKey, selectedCompany]);






....



{companyRows.length > 0 ? companyRows.map((r, i) => (
  <TableRow
    key={`${r.company}-${i}`}
    onClick={() => { setSelectedCompany(r.company); setShowDetails(true); }}
    sx={{
      cursor: 'pointer',
      '&:hover': { backgroundColor: '#f5f5f5' },
      ...(selectedCompany === r.company ? { backgroundColor: '#ffeaa7' } : {})
    }}
    tabIndex={0}
    role="button"
    onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') { setSelectedCompany(r.company); setShowDetails(true); } }}
  >
    <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
    <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
    <TableCell sx={{ border: '2px solid #000' }}>{r.company}</TableCell>
    <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
      {r.total}
    </TableCell>
  </TableRow>
)) : (
  <TableRow>
    <TableCell colSpan={4} sx={{ border: '2px solid #000', textAlign: 'center', color: '#666', fontStyle: 'italic' }}>
      No records for this date.
    </TableCell>
  </TableRow>
)}