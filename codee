import React, { useState, useMemo } from 'react';
import { Card, Row, Col, Badge, Button, Container, Form } from 'react-bootstrap';
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaEnvelope,
  FaPhone,
  FaMapMarkerAlt,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers,
  FaFilter,
  FaEye,
  FaEyeSlash,
  FaSearch,
  FaBell,
  FaUserCircle,
  FaCog,
  FaSignOutAlt,
  FaEllipsisV,
  FaIdCard
} from 'react-icons/fa';

const firstColumnRoles = [
  'Site Head',
  'BCM Team / Site Operations',
  'HR',
  'Incident Controller'
];

const roleIcons = {
  'Site Head': <FaUserTie className="text-info" />,
  'BCM Team / Site Operations': <FaUserShield className="text-success" />,
  'HR': <FaUserTie className="text-purple" />,
  'Incident Controller': <FaUserShield className="text-warning" />,
  'ERT Team Leader': <FaUserShield className="text-danger" />,
  'ERT Team Members': <FaUsers className="text-primary" />,
  'First Aid Team': <FaUserNurse className="text-orange" />
};

const baseLocationByRole = {
  'Site Head': 'Podium Floor – Red Zone',
  'HR': 'Podium Floor – Red Zone',
  'Incident Controller': 'Podium Floor – Red Zone',
  'First Aid Team': 'Podium Floor – Green Zone',
  'ERT Team Leader': 'Podium Floor – Green Zone',
  'BCM Team / Site Operations': 'Podium Floor – Red Zone'
};

// Sample data for demonstration
const sampleData = {
  'Site Head': [
    { name: 'John Smith', email: 'john.smith@example.com', phone: '+1 (555) 123-4567', present: true, zone: 'Podium Floor – Red Zone' },
    { name: 'Sarah Johnson', email: 'sarah.j@example.com', phone: '+1 (555) 987-6543', present: false, zone: 'Podium Floor – Red Zone' }
  ],
  'BCM Team / Site Operations': [
    { name: 'Michael Brown', email: 'm.brown@example.com', phone: '+1 (555) 456-7890', present: true, zone: 'Podium Floor – Red Zone' },
    { name: 'Emily Davis', email: 'emily.d@example.com', phone: '+1 (555) 234-5678', present: true, zone: 'Podium Floor – Red Zone' }
  ],
  'HR': [
    { name: 'Robert Wilson', email: 'r.wilson@example.com', phone: '+1 (555) 345-6789', present: true, zone: 'Podium Floor – Red Zone' }
  ],
  'Incident Controller': [
    { name: 'Jennifer Lee', email: 'j.lee@example.com', phone: '+1 (555) 567-8901', present: true, zone: 'Podium Floor – Red Zone' }
  ],
  'ERT Team Leader': [
    { name: 'Vishal Chaudhari', email: 'vishal.c@example.com', phone: '+1 (555) 111-2222', present: true, zone: 'Podium Floor – Green Zone' },
    { name: 'Vinit Kumar', email: 'vinit.k@example.com', phone: '+1 (555) 333-4444', present: true, zone: 'Podium Floor – Green Zone' }
  ],
  'ERT Team Members': [
    { name: 'Alex Thompson', email: 'alex.t@example.com', phone: '+1 (555) 555-6666', present: true, zone: '2nd Floor – Blue Zone' },
    { name: 'Lisa Garcia', email: 'lisa.g@example.com', phone: '+1 (555) 777-8888', present: true, zone: 'Tower B – Yellow Zone' },
    { name: 'David Kim', email: 'david.k@example.com', phone: '+1 (555) 999-0000', present: false, zone: 'Podium Floor – Green Zone' },
    { name: 'Maria Rodriguez', email: 'maria.r@example.com', phone: '+1 (555) 123-9876', present: true, zone: '2nd Floor – Blue Zone' },
    { name: 'James Wilson', email: 'james.w@example.com', phone: '+1 (555) 456-1234', present: true, zone: 'Tower B – Yellow Zone' },
    { name: 'Susan Chen', email: 'susan.c@example.com', phone: '+1 (555) 789-4561', present: true, zone: 'Podium Floor – Green Zone' },
    { name: 'Thomas Moore', email: 'thomas.m@example.com', phone: '+1 (555) 321-6549', present: false, zone: '2nd Floor – Blue Zone' }
  ],
  'First Aid Team': [
    { name: 'Emma Martinez', email: 'emma.m@example.com', phone: '+1 (555) 147-2580', present: true, zone: 'Podium Floor – Green Zone' },
    { name: 'Daniel White', email: 'daniel.w@example.com', phone: '+1 (555) 369-2580', present: true, zone: 'Podium Floor – Green Zone' }
  ]
};

const DEFAULT_PHOTO = 'https://via.placeholder.com/150/1e3a8a/ffffff?text=ERT';

const toSlug = (name = '') =>
  name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '_')
    .replace(/^_+|_+$/g, '');

const getPhotoSrc = (member) => {
  if (!member) return DEFAULT_PHOTO;
  if (member.photo) return member.photo;
  
  const name = member.name || member.Name;
  if (name) return `https://via.placeholder.com/150/1e3a8a/ffffff?text=${name.charAt(0)}`;
  
  return DEFAULT_PHOTO;
};

function MemberCard({ member, role }) {
  const location = member.present ? (member.zone || 'Unknown Zone') : baseLocationByRole[role];
  
  return (
    <div className="member-card">
      <div className="member-header">
        <div className="member-image">
          <img src={getPhotoSrc(member)} alt={member.name} />
          <div className={`status-indicator ${member.present ? 'present' : 'away'}`}></div>
        </div>
        <div className="member-info">
          <h5>{member.name}</h5>
          <Badge bg={member.present ? "success" : "secondary"}>{member.present ? "Available" : "Away"}</Badge>
        </div>
        <Button variant="outline-light" size="sm" className="member-actions">
          <FaEllipsisV />
        </Button>
      </div>
      
      <div className="member-details">
        <div className="detail-item">
          <FaEnvelope className="text-primary" />
          <a href={`mailto:${member.email}`}>{member.email}</a>
        </div>
        <div className="detail-item">
          <FaPhone className="text-success" />
          <span>{member.phone}</span>
        </div>
        <div className="detail-item">
          <FaMapMarkerAlt className="text-danger" />
          <span>{location}</span>
        </div>
      </div>
      
      <div className="member-footer">
        <small>Last updated: 12 mins ago</small>
        <Button size="sm" variant="outline-primary">Contact</Button>
      </div>
    </div>
  );
}

function RoleSection({ role, members, filterZone }) {
  const filteredMembers = filterZone
    ? members.filter(m =>
        m.present && (
          (m.zone && m.zone.includes(filterZone)) ||
          baseLocationByRole[role].includes(filterZone)
        )
      )
    : members;

  return (
    <Card className="role-section">
      <Card.Header>
        <div className="d-flex align-items-center">
          <span className="role-icon">{roleIcons[role]}</span>
          <h5 className="mb-0">{role}</h5>
          <Badge bg="light" text="dark" className="ms-2">{filteredMembers.length}/{members.length}</Badge>
        </div>
      </Card.Header>
      <Card.Body>
        <div className="members-grid">
          {filteredMembers.length > 0 ? (
            filteredMembers.map((member, index) => (
              <MemberCard key={index} member={member} role={role} />
            ))
          ) : (
            <div className="no-members">
              <FaIdCard size={32} />
              <p>No members available</p>
            </div>
          )}
        </div>
      </Card.Body>
    </Card>
  );
}

export default function ERTOverview() {
  const [filterZone, setFilterZone] = useState(null);
  const [showAllMembers, setShowAllMembers] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [ertStatus] = useState(sampleData);

  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus).forEach(([role, members]) => {
      members.forEach(m => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  const floorCounts = useMemo(() => {
    const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };
    allMembers.forEach(m => {
      if (!m.present) return;
      const z = m.zone?.toLowerCase() || '';
      if (z.includes('2nd')) counts['2nd Floor']++;
      else if (z.includes('tower b')) counts['Tower B']++;
      else counts['Podium Floor']++;
    });
    return counts;
  }, [allMembers]);

  const floorIcons = {
    'Podium Floor': <FaHome className="text-danger" />,
    '2nd Floor': <FaBuilding className="text-info" />,
    'Tower B': <FaLayerGroup className="text-success" />
  };

  return (
    <div className="ert-dashboard">
      {/* Header */}
      <header className="dashboard-header">
        <Container fluid>
          <div className="header-content">
            <div className="header-left">
              <h1>ERT Overview</h1>
              <p>Emergency Response Team Monitoring Dashboard</p>
            </div>
            <div className="header-right">
              <Form.Group className="search-box">
                <FaSearch className="search-icon" />
                <Form.Control 
                  type="text" 
                  placeholder="Search team members..." 
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
              </Form.Group>
              <Button variant="outline-light" className="notif-btn">
                <FaBell />
                <span className="notif-badge">3</span>
              </Button>
              <div className="user-profile">
                <img src="https://via.placeholder.com/40/1e3a8a/ffffff?text=U" alt="User" />
                <div className="user-info">
                  <span className="user-name">Admin User</span>
                  <span className="user-role">Administrator</span>
                </div>
              </div>
            </div>
          </div>
        </Container>
      </header>

      <Container fluid className="dashboard-content">
        {/* Stats Overview */}
        <Row className="stats-row">
          <Col xl={3} lg={6} className="mb-4">
            <Card className="stat-card total-card">
              <Card.Body>
                <div className="stat-icon">
                  <FaUsers />
                </div>
                <div className="stat-info">
                  <h3>{Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}</h3>
                  <p>Total Members</p>
                </div>
              </Card.Body>
            </Card>
          </Col>
          
          {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
            const count = floorCounts[floor] || 0;
            const isSelected = filterZone === floor;
            
            return (
              <Col xl={3} lg={6} key={floor} className="mb-4">
                <Card 
                  className={`stat-card location-card ${isSelected ? 'active' : ''}`}
                  onClick={() => setFilterZone(prev => prev === floor ? null : floor)}
                >
                  <Card.Body>
                    <div className="stat-icon">
                      {floorIcons[floor]}
                    </div>
                    <div className="stat-info">
                      <h3>{count}</h3>
                      <p>{floor}</p>
                    </div>
                    {isSelected && <div className="active-indicator"></div>}
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
        </Row>

        {/* Filter Bar */}
        <Card className="filter-bar mb-4">
          <Card.Body>
            <div className="d-flex justify-content-between align-items-center">
              <div className="filter-left">
                <span className="me-3">Filter by:</span>
                <Button 
                  variant={filterZone ? "outline-primary" : "primary"} 
                  size="sm"
                  className="me-2"
                  onClick={() => setFilterZone(null)}
                >
                  All Locations
                </Button>
                {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => (
                  <Button 
                    key={floor}
                    variant={filterZone === floor ? "primary" : "outline-primary"} 
                    size="sm"
                    className="me-2"
                    onClick={() => setFilterZone(floor)}
                  >
                    {floor}
                  </Button>
                ))}
              </div>
              <div className="filter-right">
                <span className="text-muted me-2">
                  {filterZone ? `Showing results for: ${filterZone}` : 'Showing all locations'}
                </span>
              </div>
            </div>
          </Card.Body>
        </Card>

        {/* Main Content */}
        <Row>
          {/* Left Column */}
          <Col lg={4} className="mb-4">
            {firstColumnRoles.map(role => (
              <RoleSection 
                key={role} 
                role={role} 
                members={ertStatus[role] || []} 
                filterZone={filterZone} 
              />
            ))}
          </Col>

          {/* Middle Column */}
          <Col lg={4} className="mb-4">
            <RoleSection 
              role="ERT Team Leader" 
              members={ertStatus['ERT Team Leader'] || []} 
              filterZone={filterZone} 
            />
          </Col>

          {/* Right Column */}
          <Col lg={4} className="mb-4">
            <RoleSection 
              role="ERT Team Members" 
              members={showAllMembers ? (ertStatus['ERT Team Members'] || []) : (ertStatus['ERT Team Members'] || []).slice(0, 4)} 
              filterZone={filterZone} 
            />
            
            <div className="text-center mt-3">
              <Button
                variant="outline-primary"
                onClick={() => setShowAllMembers(prev => !prev)}
              >
                {showAllMembers ? (
                  <>
                    <FaEyeSlash className="me-2" />
                    Show Less
                  </>
                ) : (
                  <>
                    <FaEye className="me-2" />
                    Show More
                  </>
                )}
              </Button>
            </div>
            
            <RoleSection 
              role="First Aid Team" 
              members={ertStatus['First Aid Team'] || []} 
              filterZone={filterZone} 
            />
          </Col>
        </Row>
      </Container>

      <style jsx>{`
        .ert-dashboard {
          background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
          min-height: 100vh;
          color: #e2e8f0;
        }
        
        .dashboard-header {
          background: rgba(15, 23, 42, 0.9);
          backdrop-filter: blur(10px);
          border-bottom: 1px solid #334155;
          padding: 1rem 0;
        }
        
        .header-content {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        
        .header-left h1 {
          font-weight: 700;
          margin-bottom: 0.25rem;
          color: #f8fafc;
        }
        
        .header-left p {
          color: #94a3b8;
          margin-bottom: 0;
        }
        
        .header-right {
          display: flex;
          align-items: center;
          gap: 1rem;
        }
        
        .search-box {
          position: relative;
          margin-bottom: 0;
        }
        
        .search-icon {
          position: absolute;
          left: 12px;
          top: 50%;
          transform: translateY(-50%);
          color: #64748b;
        }
        
        .search-box .form-control {
          background: rgba(15, 23, 42, 0.7);
          border: 1px solid #334155;
          border-radius: 8px;
          padding-left: 40px;
          color: #e2e8f0;
          min-width: 280px;
        }
        
        .search-box .form-control:focus {
          background: rgba(15, 23, 42, 0.9);
          border-color: #60a5fa;
          box-shadow: 0 0 0 0.2rem rgba(96, 165, 250, 0.25);
          color: #e2e8f0;
        }
        
        .notif-btn {
          position: relative;
          width: 40px;
          height: 40px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .notif-badge {
          position: absolute;
          top: -5px;
          right: -5px;
          background: #ef4444;
          color: white;
          border-radius: 50%;
          width: 18px;
          height: 18px;
          font-size: 0.6rem;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        
        .user-profile {
          display: flex;
          align-items: center;
          gap: 0.75rem;
          padding: 0.5rem;
          border-radius: 8px;
          background: rgba(15, 23, 42, 0.5);
        }
        
        .user-profile img {
          width: 40px;
          height: 40px;
          border-radius: 8px;
        }
        
        .user-info {
          display: flex;
          flex-direction: column;
        }
        
        .user-name {
          font-weight: 600;
          color: #f8fafc;
        }
        
        .user-role {
          font-size: 0.8rem;
          color: #94a3b8;
        }
        
        .dashboard-content {
          padding: 2rem 0;
        }
        
        .stat-card {
          background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
          border: 1px solid #475569;
          border-radius: 12px;
          transition: all 0.3s ease;
          height: 100%;
          overflow: hidden;
          position: relative;
        }
        
        .stat-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }
        
        .stat-card.active {
          border-color: #3b82f6;
          box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
        }
        
        .stat-card .card-body {
          display: flex;
          align-items: center;
          padding: 1.5rem;
        }
        
        .stat-icon {
          width: 60px;
          height: 60px;
          border-radius: 12px;
          background: rgba(96, 165, 250, 0.1);
          display: flex;
          align-items: center;
          justify-content: center;
          margin-right: 1rem;
          font-size: 1.5rem;
        }
        
        .total-card .stat-icon {
          background: rgba(96, 165, 250, 0.15);
          color: #60a5fa;
        }
        
        .stat-info h3 {
          font-weight: 700;
          margin-bottom: 0.25rem;
          color: #f8fafc;
        }
        
        .stat-info p {
          color: #94a3b8;
          margin-bottom: 0;
        }
        
        .active-indicator {
          position: absolute;
          top: 0;
          right: 0;
          width: 0;
          height: 0;
          border-top: 20px solid #3b82f6;
          border-left: 20px solid transparent;
        }
        
        .active-indicator::after {
          content: '✓';
          position: absolute;
          top: -18px;
          right: 2px;
          color: white;
          font-size: 10px;
        }
        
        .filter-bar {
          background: rgba(30, 41, 59, 0.7);
          border: 1px solid #475569;
          border-radius: 12px;
        }
        
        .filter-bar .card-body {
          padding: 1rem 1.5rem;
        }
        
        .role-section {
          background: rgba(30, 41, 59, 0.7);
          border: 1px solid #475569;
          border-radius: 12px;
          margin-bottom: 1.5rem;
        }
        
        .role-section .card-header {
          background: rgba(30, 41, 59, 0.9);
          border-bottom: 1px solid #475569;
          padding: 1rem 1.25rem;
        }
        
        .role-icon {
          font-size: 1.2rem;
          margin-right: 0.75rem;
        }
        
        .role-section .card-body {
          padding: 1.25rem;
        }
        
        .members-grid {
          display: grid;
          gap: 1rem;
        }
        
        .member-card {
          background: rgba(15, 23, 42, 0.5);
          border: 1px solid #334155;
          border-radius: 10px;
          padding: 1.25rem;
          transition: all 0.3s ease;
        }
        
        .member-card:hover {
          background: rgba(15, 23, 42, 0.8);
          transform: translateY(-3px);
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .member-header {
          display: flex;
          align-items: center;
          margin-bottom: 1rem;
        }
        
        .member-image {
          position: relative;
          margin-right: 1rem;
        }
        
        .member-image img {
          width: 50px;
          height: 50px;
          border-radius: 10px;
          object-fit: cover;
        }
        
        .status-indicator {
          position: absolute;
          bottom: 0;
          right: 0;
          width: 14px;
          height: 14px;
          border-radius: 50%;
          border: 2px solid #1e293b;
        }
        
        .status-indicator.present {
          background-color: #10b981;
        }
        
        .status-indicator.away {
          background-color: #64748b;
        }
        
        .member-info {
          flex: 1;
        }
        
        .member-info h5 {
          margin-bottom: 0.25rem;
          color: #f8fafc;
        }
        
        .member-actions {
          padding: 0.25rem;
          width: 30px;
          height: 30px;
          border-radius: 6px;
        }
        
        .member-details {
          margin-bottom: 1rem;
        }
        
        .detail-item {
          display: flex;
          align-items: center;
          margin-bottom: 0.5rem;
          font-size: 0.9rem;
        }
        
        .detail-item svg {
          margin-right: 0.5rem;
          flex-shrink: 0;
        }
        
        .detail-item a, .detail-item span {
          color: #cbd5e1;
          text-decoration: none;
          word-break: break-word;
        }
        
        .detail-item a:hover {
          color: #60a5fa;
        }
        
        .member-footer {
          display: flex;
          justify-content: space-between;
          align-items: center;
          border-top: 1px solid #334155;
          padding-top: 0.75rem;
        }
        
        .member-footer small {
          color: #64748b;
        }
        
        .no-members {
          text-align: center;
          padding: 2rem;
          color: #64748b;
        }
        
        .no-members svg {
          margin-bottom: 0.5rem;
          opacity: 0.5;
        }
        
        @media (max-width: 1200px) {
          .header-content {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
          }
          
          .header-right {
            width: 100%;
            justify-content: space-between;
          }
        }
        
        @media (max-width: 768px) {
          .header-right {
            flex-wrap: wrap;
          }
          
          .search-box {
            width: 100%;
            order: 3;
            margin-top: 1rem;
          }
          
          .search-box .form-control {
            min-width: auto;
          }
          
          .filter-left {
            overflow-x: auto;
            white-space: nowrap;
            padding-bottom: 0.5rem;
          }
        }
      `}</style>
    </div>
  );
}