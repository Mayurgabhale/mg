// //////////////////////////////////// start
// ************************************

// ---- Fix normalizeZoneKey ----
function normalizeZoneKey(rawDoor, rawDir) {
  let door = String(rawDoor || '').trim();
  door = door.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
  door = door.replace(/[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');
  door = door.replace(/\s+/g, ' ').toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${door}___${dir}`;
}

// ---- Fix normalizePersonName ----
function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

// Handler: GET /denver-occupancy-at?at=
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;

    // If no 'at' provided, default to "now" in Denver
    let atDate;
    if (!atRaw) {
      atDate = DateTime.now().setZone('America/Denver').toJSDate();
    } else {
      // 1) Try ISO string (respects offset if present)
      let dt = DateTime.fromISO(atRaw, { setZone: true });

      // 2) If not ISO, try yyyy-MM-dd as Denver local end-of-day
      if (!dt.isValid) {
        dt = DateTime.fromFormat(atRaw, 'yyyy-LL-dd', { zone: 'America/Denver' });
        if (dt.isValid) {
          dt = dt.endOf('day');
        }
      }

      // 3) Final fallback â†’ native Date
      if (!dt.isValid) {
        const native = new Date(atRaw);
        if (Number.isNaN(native.getTime())) {
          return res.status(400).json({
            error: 'invalid "at" timestamp (provide ISO 8601 or yyyy-MM-dd).'
          });
        }
        atDate = native;
      } else {
        atDate = dt.toJSDate();
      }
    }

    // fetch events in the 24h window ending at atDate
    const events = await fetchEventsWindow(atDate);

    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);

  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};

// //////////////////////////////////// end
// ************************************


http://localhost:3000/denver-occupancy-at?at=2025-09-13T09:00:00-06:00

