<Card
  elevation={4}
  sx={{
    background: "linear-gradient(145deg, #fffbe6, #fff9db)",
    border: "1px solid #e6c200",
    borderRadius: 3,
    p: 2,
    boxShadow: "0 4px 12px rgba(0,0,0,0.08)",
  }}
>
  <CardContent>
    <Grid container spacing={3} alignItems="center">
      {/* Region */}
      <Grid item xs={12} md={2}>
        <FormControl fullWidth size="small">
          <InputLabel id="region-select-label">Region</InputLabel>
          <Select
            labelId="region-select-label"
            value={region}
            onChange={(e) => setRegion(e.target.value)}
            sx={{ bgcolor: "#fff", borderRadius: 1 }}
          >
            {REGIONS.map((r) => (
              <MenuItem key={r.value} value={r.value}>
                {r.label}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      </Grid>

      {/* City */}
      <Grid item xs={12} md={3}>
        <FormControl fullWidth size="small">
          <InputLabel id="city-select-label">City / Partition</InputLabel>
          <Select
            labelId="city-select-label"
            value={city}
            onChange={(e) => setCity(e.target.value)}
            renderValue={(v) => v || ""}
            sx={{ bgcolor: "#fff", borderRadius: 1 }}
          >
            <MenuItem value="">
              <em>All</em>
            </MenuItem>
            {citiesForRegion?.length > 0 ? (
              citiesForRegion.map((c, idx) => (
                <MenuItem key={idx} value={c}>
                  {c}
                </MenuItem>
              ))
            ) : (
              <MenuItem disabled value="">
                No predefined cities (type manually below)
              </MenuItem>
            )}
          </Select>
        </FormControl>
        <TextField
          fullWidth
          size="small"
          placeholder="Or type manually"
          value={city}
          onChange={(e) => setCity(e.target.value)}
          sx={{ mt: 1, bgcolor: "#fff", borderRadius: 1 }}
        />
      </Grid>

      {/* Range / Single Day toggle */}
      <Grid
        item
        xs={12}
        md={5}
        sx={{ display: "flex", gap: 1, justifyContent: "flex-end" }}
      >
        <Button
          startIcon={<DateRangeIcon />}
          variant={useRange ? "contained" : "outlined"}
          onClick={() => setUseRange(true)}
          sx={{
            borderRadius: 2,
            textTransform: "none",
            bgcolor: useRange ? "#FFD700" : "transparent",
            color: useRange ? "#000" : "#444",
            "&:hover": { bgcolor: useRange ? "#e6c200" : "#f7f7f7" },
          }}
        >
          Range
        </Button>
        <Button
          startIcon={<DateRangeIcon />}
          variant={!useRange ? "contained" : "outlined"}
          onClick={() => setUseRange(false)}
          sx={{
            borderRadius: 2,
            textTransform: "none",
            bgcolor: !useRange ? "#FFD700" : "transparent",
            color: !useRange ? "#000" : "#444",
            "&:hover": { bgcolor: !useRange ? "#e6c200" : "#f7f7f7" },
          }}
        >
          Single Day
        </Button>
      </Grid>

      {/* Date Pickers */}
      {useRange ? (
        <>
          <Grid item xs={12} md={3}>
            <TextField
              label="Start Date"
              type="date"
              fullWidth
              size="small"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              inputRef={startDateRef}
              InputLabelProps={{ shrink: true }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      size="small"
                      onClick={() => openNativeDatePicker(startDateRef)}
                      sx={{ color: "#e6c200" }}
                    >
                      <DateRangeIcon />
                    </IconButton>
                  </InputAdornment>
                ),
              }}
              sx={{ bgcolor: "#fff", borderRadius: 1 }}
            />
          </Grid>
          <Grid item xs={12} md={3}>
            <TextField
              label="End Date"
              type="date"
              fullWidth
              size="small"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              inputRef={endDateRef}
              InputLabelProps={{ shrink: true }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      size="small"
                      onClick={() => openNativeDatePicker(endDateRef)}
                      sx={{ color: "#e6c200" }}
                    >
                      <DateRangeIcon />
                    </IconButton>
                  </InputAdornment>
                ),
              }}
              sx={{ bgcolor: "#fff", borderRadius: 1 }}
            />
          </Grid>
        </>
      ) : (
        <Grid item xs={12} md={3}>
          <TextField
            label="Date"
            type="date"
            fullWidth
            size="small"
            value={singleDate}
            onChange={(e) => setSingleDate(e.target.value)}
            inputRef={singleDateRef}
            InputLabelProps={{ shrink: true }}
            InputProps={{
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton
                    size="small"
                    onClick={() => openNativeDatePicker(singleDateRef)}
                    sx={{ color: "#e6c200" }}
                  >
                    <DateRangeIcon />
                  </IconButton>
                </InputAdornment>
              ),
            }}
            sx={{ bgcolor: "#fff", borderRadius: 1 }}
          />
        </Grid>
      )}

      {/* Run / Clear / Exports */}
      <Grid
        item
        xs={12}
        md={6}
        sx={{ display: "flex", gap: 1, alignItems: "center" }}
      >
        <Button
          variant="contained"
          startIcon={<SearchIcon />}
          onClick={() => fetchDurations()}
          disabled={loading}
          sx={{
            bgcolor: "#1976d2",
            "&:hover": { bgcolor: "#115293" },
            borderRadius: 2,
            textTransform: "none",
          }}
        >
          {loading ? "Loading..." : "Run"}
        </Button>

        <Button
          variant="outlined"
          startIcon={<ClearIcon />}
          onClick={() => {
            setStartDate("");
            setEndDate("");
            setSingleDate("");
            setCity("");
            setData(null);
            setError("");
            setSearchEmployeeId("");
            setSearchEmployeeName("");
            setSearchCardNumber("");
          }}
          sx={{ borderRadius: 2, textTransform: "none" }}
        >
          Clear
        </Button>

        <Tooltip title="Export Summary CSV">
          <span>
            <IconButton
              onClick={exportSummaryCsv}
              disabled={!regionObj || (regionObj.employees || []).length === 0}
              sx={{ color: "#e6c200" }}
            >
              <DownloadIcon />
            </IconButton>
          </span>
        </Tooltip>

        <Tooltip title="Export Full Report">
          <span>
            <Button
              variant="contained"
              onClick={exportReportCsv}
              disabled={!regionObj || (regionObj.employees || []).length === 0}
              sx={{
                bgcolor: "#FFD700",
                color: "#000",
                "&:hover": { bgcolor: "#e6c200" },
                borderRadius: 2,
                textTransform: "none",
              }}
            >
              Export Report
            </Button>
          </span>
        </Tooltip>

        <Tooltip title="Export Raw Swipes">
          <span>
            <Button
              variant="outlined"
              onClick={exportSwipesCsv}
              disabled={
                !regionObj || Object.keys(regionObj.swipes_by_date || {}).length === 0
              }
              sx={{ borderRadius: 2, textTransform: "none" }}
            >
              Export Swipes
            </Button>
          </span>
        </Tooltip>
      </Grid>

      {/* Search Fields */}
      <Grid item xs={12} md={4}>
        <TextField
          fullWidth
          label="Search Employee ID"
          value={searchEmployeeId}
          onChange={(e) => setSearchEmployeeId(e.target.value)}
          size="small"
          helperText="Type an ID and click Run"
          sx={{ bgcolor: "#fff", borderRadius: 1 }}
        />
      </Grid>
      <Grid item xs={12} md={4}>
        <TextField
          fullWidth
          label="Search Employee Name"
          value={searchEmployeeName}
          onChange={(e) => setSearchEmployeeName(e.target.value)}
          size="small"
          helperText="Type name and click Run"
          sx={{ bgcolor: "#fff", borderRadius: 1 }}
        />
      </Grid>
      <Grid item xs={12} md={4}>
        <TextField
          fullWidth
          label="Search Card Number"
          value={searchCardNumber}
          onChange={(e) => setSearchCardNumber(e.target.value)}
          size="small"
          helperText="Search by card number"
          sx={{ bgcolor: "#fff", borderRadius: 1 }}
        />
      </Grid>
    </Grid>
  </CardContent>
</Card>