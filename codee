// ---------- new helper: fetch events within an explicit UTC range ----------
async function fetchEventsRange(startUtc, endUtc) {
  const pool = await getPool();
  const req  = pool.request();
  req.input('startUtc', sql.DateTime2, startUtc);
  req.input('endUtc',   sql.DateTime2, endUtc);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @startUtc
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @endUtc
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      FORMAT(LocaleMessageTime, 'hh:mm tt') AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}





....



// Handler: GET /api/occupancy-at?at=<ISO-8601>
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // Determine the calendar date in Asia/Kolkata for the provided ISO timestamp.
    // Important: `atRaw` is treated as UTC (consistent with your frontend TimeTravelControl).
    const asOfLocalDate = DateTime.fromJSDate(atDate, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');

    // Compute the UTC window that corresponds to that entire local day (00:00 -> 23:59:59.999 Asia/Kolkata)
    const startUtc = DateTime.fromISO(asOfLocalDate, { zone: 'Asia/Kolkata' })
      .startOf('day')
      .setZone('utc')
      .toJSDate();

    const endUtc = DateTime.fromISO(asOfLocalDate, { zone: 'Asia/Kolkata' })
      .endOf('day')
      .setZone('utc')
      .toJSDate();

    // Fetch events strictly within that UTC window (which is the selected local calendar day)
    const events = await fetchEventsRange(startUtc, endUtc);

    // As a defensive step, keep only events whose server-derived Dateonly equals the asOfLocalDate
    // (Dateonly is already produced by the SQL query as yyyy-MM-dd in the local zone).
    const filteredEvents = events.filter(evt => String(evt.Dateonly) === asOfLocalDate);

    // Build occupancy and visited stats from the filtered events only
    const occupancy = await buildOccupancy(filteredEvents);
    const visitedStats = buildVisitedForDate(filteredEvents, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };

    // Mark the snapshot `asOf` as the client-requested timestamp (UTC) so frontend shows what it expects
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};