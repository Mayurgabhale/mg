import React, { useState, useMemo } from 'react';
import { Card, Row, Col, Badge, Button, Container } from 'react-bootstrap';
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaEnvelope,
  FaPhone,
  FaMapMarkerAlt,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers,
  FaEye,
  FaEyeSlash,
  FaUserCog,
  FaIdCard,
  FaLocationArrow
} from 'react-icons/fa';

const firstColumnRoles = [
  'Site Head',
  'BCM Team / Site Operations',
  'HR',
  'Incident Controller'
];

const roleIcons = {
  'Site Head': <FaUserTie className="text-info" />,
  'BCM Team / Site Operations': <FaUserShield className="text-teal" />,
  'HR': <FaUserTie className="text-purple" />,
  'Incident Controller': <FaUserShield className="text-warning" />,
  'ERT Team Leader': <FaUserShield className="text-danger" />,
  'ERT Team Members': <FaUsers className="text-primary" />,
  'First Aid Team': <FaUserNurse className="text-orange" />
};

const baseLocationByRole = {
  'Site Head': 'Podium Floor – Red Zone',
  'HR': 'Podium Floor – Red Zone',
  'Incident Controller': 'Podium Floor – Red Zone',
  'First Aid Team': 'Podium Floor – Green Zone',
  'ERT Team Leader': 'Podium Floor – Green Zone',
  'BCM Team / Site Operations': 'Podium Floor – Red Zone'
};

// ------------ small normalization helpers (minimal, safe changes) ------------
const normalize = (s = '') =>
  s
    .toString()
    .toLowerCase()
    .replace(/[–—−]/g, '-')   // unify dash characters
    .replace(/\s+/g, ' ')
    .trim();

const includesZone = (haystack = '', needle = '') => {
  if (!haystack || !needle) return false;
  return normalize(haystack).includes(normalize(needle));
};

// ---- Photo helpers ----
const DEFAULT_PHOTO = '/photos/default.png';

const toSlug = (name = '') =>
  name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '_')
    .replace(/^_+|_+$/g, '');

const getPhotoSrc = (member) => {
  if (!member) return DEFAULT_PHOTO;
  if (member.photo) return member.photo;

  const name = member.name || member.Name;
  if (name) return `/photos/${toSlug(name)}.png`;

  return DEFAULT_PHOTO;
};

/*
  Important: filtering rule implemented below (explicit):
  - if m.present is truthy (member available) -> match using member current location (m.zone)
  - if m.present is falsy/away -> match using member base (m['Base Location'] || m.Floor || role base)
  This exactly follows your required behavior: available => current location; away => base location.
*/

function renderRoleCard(role, membersRaw, filterZone) {
  const members = filterZone
    ? membersRaw.filter(m => {
        // If member is available (present) -> only match if their current location matches filterZone
        if (m.present) {
          const liveLoc = m.zone || m.liveLocation || '';
          return includesZone(liveLoc, filterZone);
        }

        // If member is away -> match by their member-level base first, or fall back to role-level base
        const memberBase = m['Base Location'] || m.Floor || m.baseLocation || '';
        if (memberBase && includesZone(memberBase, filterZone)) return true;

        // fallback to role-level base (only used when member has no explicit base)
        const roleBase = baseLocationByRole[role] || '';
        return roleBase && includesZone(roleBase, filterZone);
      })
    : membersRaw;

  // Don't render the card if there are no members to show
  if (filterZone && members.length === 0) return null;

  return (
    <Card className="dashboard-card mb-1" key={role}>
      <Card.Header className="dashboard-card-header d-flex align-items-center">
        <span className="role-icon me-2">{roleIcons[role] || <FaUserCog className="text-muted" />}</span>
        <span className="role-title">{role}</span>
        <Badge bg="outline-light" className="ms-2">{members.length}</Badge>
      </Card.Header>
      <Card.Body className="p-1">
        {members.length > 0 ? members.map((m, i) => {
          // location display: if present show current zone (prefer m.zone), else show member base or role base
          const location = m.present
            ? (m.zone || m['Base Location'] || m.Floor || 'Unknown Zone')
            : (m['Base Location'] || m.Floor || baseLocationByRole[role] || 'Unknown Zone');

          return (
            <div key={i} className="member-item pb-0 mb-1">
              <div className="d-flex justify-content-between align-items-start mb-1">
                <div className="d-flex align-items-center">
                  <div className={`member-photo-container ${m.present ? 'present-border' : 'away-border'}`}>
                    <img
                      src={getPhotoSrc(m)}
                      alt={m.name || 'Member'}
                      className="member-photo"
                      onError={(e) => {
                        e.currentTarget.onerror = null;
                        e.currentTarget.src = DEFAULT_PHOTO;
                      }}
                    />
                    <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                  </div>
                  <div className="ms-3">
                    <h6 className="mb-0 member-name">{m.name}</h6>
                    <small className="text-muted">{m.designation || m.role}</small>
                  </div>
                </div>
                <Badge bg={m.present ? 'success' : 'danger'} className="status-badge">
                  {m.present ? 'Available' : 'Away'}
                </Badge>
              </div>

              <div className="member-contact-info">
                <div className="contact-item">
                  <FaEnvelope className="contact-icon text-primary" />
                  <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                </div>
                <div className="contact-item">
                  <FaPhone className="contact-icon text-success" />
                  <span className="contact-text">{m.phone}</span>
                </div>
                <div className="contact-item">
                  <FaLocationArrow className="contact-icon text-danger" />
                  <span className="contact-text">{location}</span>
                </div>
              </div>
            </div>
          );
        }) : (
          <div className="text-center py-3 text-muted">
            <FaIdCard size={24} className="mb-2" />
            <p className="mb-0">No members available</p>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}

export default function ERTOverview({ ertStatus }) {
  const [filterZone, setFilterZone] = useState(null);
  const [showAllMembers, setShowAllMembers] = useState(false);

  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus).forEach(([role, members]) => {
      members.forEach(m => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  // counts: you previously counted only present members — keep same logic, but use normalized check
  const floorCounts = useMemo(() => {
    const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };
    allMembers.forEach(m => {
      if (!m.present) return; // only count available (present) as before
      const z = (m.zone || '').toString();
      if (includesZone(z, '2nd')) counts['2nd Floor']++;
      else if (includesZone(z, 'Tower B')) counts['Tower B']++;
      else if (includesZone(z, 'Podium Floor')) counts['Podium Floor']++;
      else {
        // if present but no zone string, fall back to role base (rare)
        const roleBase = baseLocationByRole[m.role] || '';
        if (includesZone(roleBase, 'Tower B')) counts['Tower B']++;
        else if (includesZone(roleBase, '2nd')) counts['2nd Floor']++;
        else counts['Podium Floor']++;
      }
    });
    return counts;
  }, [allMembers]);

  const ertLeaders = useMemo(() => {
    const raw = (ertStatus['ERT Team Leader'] || []).map(m => ({ role: 'ERT Team Leader', ...m }));
    const filtered = filterZone
      ? raw.filter(m => {
          // follow the required rule: present -> match m.zone; away -> match base (member base or role base)
          if (m.present) {
            const live = m.zone || m.liveLocation || '';
            return includesZone(live, filterZone);
          } else {
            const memberBase = m['Base Location'] || m.Floor || '';
            if (memberBase && includesZone(memberBase, filterZone)) return true;
            return baseLocationByRole['ERT Team Leader'] && includesZone(baseLocationByRole['ERT Team Leader'], filterZone);
          }
        })
      : raw;

    const order = ['Vishal Chaudhari', 'Vinit Kumar', 'Sonu Pandey', 'Sagar Jamdade', 'Rangare, Bhupendra Babu', 'Satish Bhoyane'];
    return filtered.sort((a, b) => {
      const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
      if (pa !== pb) return pb - pa;
      const ia = order.indexOf(a.name), ib = order.indexOf(b.name);
      if (ia !== -1 || ib !== -1) {
        if (ia === -1) return 1;
        if (ib === -1) return -1;
        return ia - ib;
      }
      return a.name.localeCompare(b.name);
    });
  }, [ertStatus, filterZone]);

  const ertMembers = useMemo(() => {
    const members = (ertStatus['ERT Team Members'] || []).map(m => ({
      role: 'ERT Team Members',
      name: m.Name || m.name,
      baseLocation: m['Base Location'] || m.Floor || '',
      liveLocation: m.zone || m.liveLocation || '',
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    const filtered = filterZone
      ? members.filter(m => {
          if (m.present) {
            // available -> match by liveLocation only
            return includesZone(m.liveLocation || '', filterZone);
          } else {
            // away -> match by baseLocation
            if (m.baseLocation && includesZone(m.baseLocation, filterZone)) return true;
            // optionally fallback to role-level base for team members (if you want)
            return baseLocationByRole['ERT Team Members'] && includesZone(baseLocationByRole['ERT Team Members'], filterZone);
          }
        })
      : members;

    filtered.sort((a, b) => {
      const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
      if (pa !== pb) return pb - pa;
      return a.name.localeCompare(b.name);
    });
    return showAllMembers ? filtered : filtered.slice(0, 6);
  }, [ertStatus, filterZone, showAllMembers]);

  const firstAidMembers = useMemo(() => {
    const members = (ertStatus['First Aid Team'] || []).map(m => ({
      role: 'First Aid Team',
      name: m.Name || m.name,
      baseLocation: m['Base Location'] || m.Floor || '',
      liveLocation: m.zone || m.liveLocation || '',
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    const filtered = filterZone
      ? members.filter(m => {
          if (m.present) {
            return includesZone(m.liveLocation || '', filterZone);
          } else {
            if (m.baseLocation && includesZone(m.baseLocation, filterZone)) return true;
            return baseLocationByRole['First Aid Team'] && includesZone(baseLocationByRole['First Aid Team'], filterZone);
          }
        })
      : members;

    return filtered;
  }, [ertStatus, filterZone]);

  const floorIcons = {
    'Podium Floor': <FaHome className="text-danger" />,
    '2nd Floor': <FaBuilding className="text-info" />,
    'Tower B': <FaLayerGroup className="text-success" />
  };

  // Check if columns have members to display when filtered
  const leftColumnHasMembers = useMemo(() => {
    if (!filterZone) return true;
    return firstColumnRoles.some(role => {
      const members = ertStatus[role] || [];
      return members.some(m => {
        if (m.present) {
          return includesZone(m.zone || m.liveLocation || '', filterZone);
        } else {
          const memberBase = m['Base Location'] || m.Floor || '';
          if (memberBase && includesZone(memberBase, filterZone)) return true;
          return baseLocationByRole[role] && includesZone(baseLocationByRole[role], filterZone);
        }
      });
    });
  }, [ertStatus, filterZone]);

  const middleColumnHasMembers = useMemo(() => {
    if (!filterZone) return true;
    return ertLeaders.length > 0;
  }, [ertLeaders, filterZone]);

  const rightColumnHasMembers = useMemo(() => {
    if (!filterZone) return true;
    return ertMembers.length > 0 || firstAidMembers.length > 0;
  }, [ertMembers, firstAidMembers, filterZone]);

  return (
    <div className="ert-dashboard">
      <Container fluid className="py-4">
        {/* Stats Cards */}
        <Row className="mb-4">
          <Col xs={12} md={3} className="mb-3">
            <Card className="stats-card total-members">
              <Card.Body className="p-3">
                <div className="d-flex align-items-center">
                  <div className="stats-icon me-3">
                    <FaUsers size={24} />
                  </div>
                  <div>
                    <h6 className="stats-label">Total Members</h6>
                    <h3 className="stats-value mb-0">
                      {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
                    </h3>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>

          {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
            const count = floorCounts[floor] || 0;
            const isSelected = filterZone === floor;
            return (
              <Col key={floor} xs={12} md={3} className="mb-3">
                <Card
                  className={`stats-card location-card ${isSelected ? 'active' : ''}`}
                  onClick={() => setFilterZone(prev => prev === floor ? null : floor)}
                >
                  <Card.Body className="p-3">
                    <div className="d-flex align-items-center">
                      <div className="stats-icon me-3">
                        {floorIcons[floor]}
                      </div>
                      <div>
                        <h6 className="stats-label">{floor}</h6>
                        <h3 className="stats-value mb-0">{count}</h3>
                      </div>
                    </div>
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
        </Row>

        {/* Three-column layout */}
        <Row className="align-items-stretch">
          {/* LEFT COLUMN: Fixed roles - only show if has members when filtered */}
          {(filterZone ? leftColumnHasMembers : true) && (
            <Col xs={12} lg={4} className="mb-4">
              {firstColumnRoles.map(role => renderRoleCard(role, ertStatus[role] || [], filterZone))}
            </Col>
          )}

          {/* MIDDLE COLUMN: ERT Team Leaders - only show if has members when filtered */}
          {(filterZone ? middleColumnHasMembers : true) && (
            <Col xs={12} lg={4} className="mb-4">
              <Card className="dashboard-card h-100">
                <Card.Header className="dashboard-card-header d-flex align-items-center">
                  <span className="role-icon me-2">{roleIcons['ERT Team Leader']}</span>
                  <span className="role-title">ERT Team Leader</span>
                  <Badge bg="outline-light" className="ms-2">{ertLeaders.length}</Badge>
                </Card.Header>
                <Card.Body className="p-3">
                  {ertLeaders.map((m, i) => {
                    const location = m.present ? (m.zone || 'Unknown Zone') : (m['Base Location'] || baseLocationByRole['ERT Team Leader']);
                    return (
                      <div key={i} className="member-item pb-1 mb-1">
                        <div className="d-flex justify-content-between align-items-start mb-2">
                          <div className="d-flex align-items-center">
                            <div className={`member-photo-container ${m.present ? 'present-border' : 'away-border'}`}>
                              <img
                                src={getPhotoSrc(m)}
                                alt={m.name || 'Member'}
                                className="member-photo"
                                onError={(e) => {
                                  e.currentTarget.onerror = null;
                                  e.currentTarget.src = DEFAULT_PHOTO;
                                }}
                              />
                              <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                            </div>
                            <div className="ms-3">
                              <h6 className="mb-0 member-name">{m.name}</h6>
                              {/* <small className="text-muted">Team Leader</small> */}
                            </div>
                          </div>
                          <Badge bg={m.present ? 'success' : 'danger'} className="status-badge">
                            {m.present ? 'Available' : 'Away'}
                          </Badge>
                        </div>

                        <div className="member-contact-info">
                          <div className="contact-item">
                            <FaEnvelope className="contact-icon text-primary" />
                            <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                          </div>
                          <div className="contact-item">
                            <FaPhone className="contact-icon text-success" />
                            <span className="contact-text">{m.phone}</span>
                          </div>
                          <div className="contact-item">
                            <FaLocationArrow className="contact-icon text-danger" />
                            <span className="contact-text">{location}</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                  {!ertLeaders.length &&
                    <div className="text-center py-4 text-muted">
                      <FaUserShield size={28} className="mb-2" />
                      <p className="mb-0">No Team Leaders Available</p>
                    </div>
                  }
                </Card.Body>
              </Card>
            </Col>
          )}

          {/* RIGHT COLUMN: ERT Team Members and First Aid Team - only show if has members when filtered */}
          {(filterZone ? rightColumnHasMembers : true) && (
            <Col xs={12} lg={4} className="mb-4">
              {/* ERT Team Members */}
              <Card className="dashboard-card h-100 mb-0">
                <Card.Header className="dashboard-card-header d-flex align-items-center">
                  <span className="role-icon me-2">{roleIcons['ERT Team Members']}</span>
                  <span className="role-title">ERT Team Members</span>
                  <Badge bg="outline-light" className="ms-2">{ertMembers.length}</Badge>
                </Card.Header>

                <Card.Body className="p-3">
                  {ertMembers.map((m, i) => {
                    const location = m.present ? (m.liveLocation || 'Unknown Zone') : (m.baseLocation || baseLocationByRole['ERT Team Members']);
                    return (
                      <div key={i} className="member-item pb-1 mb-1">
                        <div className="d-flex justify-content-between align-items-start mb-2">
                          <div className="d-flex align-items-center">
                            <div className={`member-photo-container ${m.present ? 'present-border' : 'away-border'}`}>
                              <img
                                src={getPhotoSrc(m)}
                                alt={m.name || 'Member'}
                                className="member-photo"
                                onError={(e) => {
                                  e.currentTarget.onerror = null;
                                  e.currentTarget.src = DEFAULT_PHOTO;
                                }}
                              />
                              <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                            </div>
                            <div className="ms-3">
                              <h6 className="mb-0 member-name">{m.name}</h6>
                              {/* <small className="text-muted">Team Member</small> */}
                            </div>
                          </div>
                          <Badge bg={m.present ? 'success' : 'danger'} className="status-badge">
                            {m.present ? 'Available' : 'Away'}
                          </Badge>
                        </div>

                        <div className="member-contact-info">
                          <div className="contact-item">
                            <FaEnvelope className="contact-icon text-primary" />
                            <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                          </div>
                          <div className="contact-item">
                            <FaPhone className="contact-icon text-success" />
                            <span className="contact-text">{m.phone}</span>
                          </div>
                          <div className="contact-item">
                            <FaLocationArrow className="contact-icon text-danger" />
                            <span className="contact-text">{location}</span>
                          </div>
                        </div>
                      </div>
                    );
                  })}

                  {!ertMembers.length &&
                    <div className="text-center py-4 text-muted">
                      <FaUsers size={28} className="mb-2" />
                      <p className="mb-0">No Team Members Available</p>
                    </div>
                  }

                  <div className="text-center mt-3">
                    <Button
                      variant="outline-primary"
                      className="d-flex align-items-center mx-auto"
                      onClick={() => setShowAllMembers(prev => !prev)}
                    >
                      {showAllMembers ? (
                        <>
                          <FaEyeSlash className="me-2" />
                          Show Less
                        </>
                      ) : (
                        <>
                          <FaEye className="me-2" />
                          Show More
                        </>
                      )}
                    </Button>
                  </div>

                </Card.Body>
              </Card>

              {/* First Aid Team */}
              {/* {renderRoleCard('First Aid Team', ertStatus['First Aid Team'] || [], filterZone)} */}
            </Col>
          )}
        </Row>
      </Container>

      <style jsx>{`
        /* your existing styles (unchanged) */
        .ert-dashboard {
          background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
          min-height: 100vh;
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        }
        /* ...rest of your CSS unchanged... */
      `}</style>
    </div>
  );
}