i want ot add <th>Rejection</th> count ech floor wise ok 
for example ::
Floor 12 Rejection  7 ok like that 
Highest inconsistency: 15 on Floor 14 || Floor 1 rejection 2 ok 
Floor	In Swipes	Out Swipes	In âˆ’ Out	Security	Rejection
Floor 14	269	254	15	0	
Floor 15	37	27	10	0	
Floor 01	15	6	9	1	
Floor 12	203	198	5	0
like that 

http://localhost:5000/api/rejections
{
  "summary": [
    {
      "floor": "Floor 12",
      "rejectionCount": 22
    },
    {
      "floor": "Floor 1",
      "rejectionCount": 9
    },
    {
      "floor": "Floor 6",
      "rejectionCount": 9
    },
    {
      "floor": "Floor 15",
      "rejectionCount": 4
    },
    {
      "floor": "Floor 9",
      "rejectionCount": 5
    },
    {
      "floor": "Floor 13",
      "rejectionCount": 1
    }
  ],
  "dateWise": [
    {
      "date": "2025-09-16",
      "floors": [
        {
          "floor": "Floor 12",
          "rejectionCount": 7
        },
        {
          "floor": "Floor 1",
          "rejectionCount": 2
        }
      ]
    },
    {
      "date": "2025-09-15",
      "floors": [
        {
          "floor": "Floor 6",
          "rejectionCount": 3
        },
        {
          "floor": "Floor 12",
          "rejectionCount": 2
        },
        {
          "floor": "Floor 1",
          "rejectionCount": 2
        }
      ]
    },
    {
      "date": "2025-09-12",
      "floors": [
        {
          "floor": "Floor 1",
          "rejectionCount": 1
        },
        {
          "floor": "Floor 15",
          "rejectionCount": 3
        }
      ]
    },
    {
      "date": "2025-09-11",
      "floors": [
        {
          "floor": "Floor 12",
          "rejectionCount": 10
        },
        {
          "floor": "Floor 9",
          "rejectionCount": 5
        },
        {
          "floor": "Floor 13",
          "rejectionCount": 1
        }
      ]
    },
    {
      "date": "2025-09-10",
      "floors": [
        {
          "floor": "Floor 6",
          "rejectionCount": 5
        },
        {
          "floor": "Floor 12",
          "rejectionCount": 1
        },
        {
          "floor": "Floor 1",
          "rejectionCount": 2
        }
      ]
    },
    {
      "date": "2025-09-09",
      "floors": [
        {
          "floor": "Floor 6",
          "rejectionCount": 1
        },
        {
          "floor": "Floor 12",
          "rejectionCount": 2
        },
        {
          "floor": "Floor 1",
          "rejectionCount": 2
        },
        {
          "floor": "Floor 15",
          "rejectionCount": 1
        }
      ]
    }
  ],
  "details": [
    {
      "LocaleMessageTime": "2025-09-16T13:39:11.000Z",
      "DateOnly": "2025-09-16T00:00:00.000Z",
      "SwipeTime": "1970-01-01T13:39:11.000Z",
      "CardNumber": "618861",
      "PersonnelType": "Employee",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
      "RejectionType": "CardDisabled",
      "floor": "Floor 12"
    },
    {
      "LocaleMessageTime": "2025-09-16T13:38:51.000Z",
      "DateOnly": "2025-09-16T00:00:00.000Z",
      "SwipeTime": "1970-01-01T13:38:51.000Z",
      "CardNumber": "618861",
      "PersonnelType": "Employee",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. North Lobby Doors-IN",
      "RejectionType": "CardDisabled",
      "floor": "Floor 12"
    },
    {
      "LocaleMessageTime": "2025-09-16T13:38:42.000Z",
      "DateOnly": "2025-09-16T00:00:00.000Z",
      "SwipeTime": "1970-01-01T13:38:42.000Z",
      "CardNumber": "618861",
      "PersonnelType": "Employee",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
      "RejectionType": "CardDisabled",
      "floor": "Floor 12"
    },
    {
      "LocaleMessageTime": "2025-09-16T13:38:35.000Z",
      "DateOnly": "2025-09-16T00:00:00.000Z",
      "SwipeTime": "1970-01-01T13:38:35.000Z",
      "CardNumber": "618861",
      "PersonnelType": "Employee",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
      "RejectionType": "CardDisabled",
      "floor": "Floor 12"
    },
    {
      "LocaleMessageTime": "2025-09-16T13:38:28.000Z",
      "DateOnly": "2025-09-16T00:00:00.000Z",
      "SwipeTime": "1970-01-01T13:38:28.000Z",
      "CardNumber": "618861",
      "PersonnelType": "Employee",
      "Location": "US.CO.OBS",
      "Door": "US.CO.HQ. 12. South Lobby Doors-IN",
      "RejectionType": "CardDisabled",
      "floor": "Floor 12"
    },
    {




_________________________________________________________________
import React, { useState } from 'react';
import { Card, Table, Modal } from 'react-bootstrap';

// Accent palette
const ROW_COLORS = [
  '#FFC72C', '#C9A9A6', '#FFE680',
  '#FFF5EE', '#FFD11A', '#96DED1', '#FFEB99'
];

// Security Employee IDs (hardcoded, no JSON needed)
const SECURITY_IDS = [
  "W0023386", "W0026455", "W0028120"
].map(id => id.toUpperCase());

const normalizeId = v => String(v || '').trim().toUpperCase();

export default function FloorInOutTable({ data = [], floorBreakdown = [], floorInOutSummary = [] }) {
  const securitySet = new Set(SECURITY_IDS);

  // State for modal
  const [showModal, setShowModal] = useState(false);
  const [selectedFloor, setSelectedFloor] = useState(null);
  const [selectedPeople, setSelectedPeople] = useState([]);

  // Map floor â†’ security occupants
  const securityByFloor = {};

  (floorBreakdown || []).forEach(fb => {
    const people = [];
    (fb.occupants || []).forEach(o => {
      const empId = normalizeId(o.EmployeeID);
      if (securitySet.has(empId)) {
        people.push(o);
      }
    });
    if (people.length > 0) {
      securityByFloor[fb.floor] = (securityByFloor[fb.floor] || []).concat(people);
    }
  });

  (floorInOutSummary || []).forEach(f => {
    (f.inOnlyPersons || []).forEach(pid => {
      const empId = normalizeId(pid);
      if (securitySet.has(empId)) {
        // Just store as placeholder if not found in occupants
        securityByFloor[f.floor] = (securityByFloor[f.floor] || []).concat([
          { EmployeeID: empId, ObjectName1: "(Unknown)", Swipe_Time: "â€”" }
        ]);
      }
    });
  });

  // Compute inconsistency and attach security count
  const sorted = data
    .map(({ floor, inSwipes, outSwipes }) => ({
      floor,
      inSwipes,
      outSwipes,
      inconsistency: inSwipes - outSwipes,
      securityCount: (securityByFloor[floor] || []).length
    }))
    .sort((a, b) => b.inconsistency - a.inconsistency);

  const top = sorted[0];

  const handleRowClick = (floor) => {
    const people = securityByFloor[floor] || [];
    if (people.length > 0) {
      setSelectedFloor(floor);
      setSelectedPeople(people);
      setShowModal(true);
    }
  };

  return (
    <>
      <Card className="mb-4 shadow-sm" style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}>
        <Card.Header className="text-center fw-bold" style={{ background: '#000', color: '#FFC72C' }}>
          Floor In vs Out Swipe Summary
        </Card.Header>

        <Card.Body style={{ height: 450, padding: '1rem', overflowY: 'auto' }}>
          {top && (
            <div className="mb-3" style={{ color: '#fff', fontSize: '1rem' }}>
              Highest inconsistency:&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.inconsistency}</span>
              &nbsp;on&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.floor}</span>
            </div>
          )}

          <Table striped bordered hover size="sm" variant="dark" className="mb-0">
            <thead>
              <tr>
                <th>Floor</th>
                <th>In Swipes</th>
                <th>Out Swipes</th>
                <th>In âˆ’ Out</th>
                <th>Security</th>
                <th>Rejection</th>
              </tr>
            </thead>

            <tbody>
              {sorted.map((row, idx) => (
                <tr
                  key={row.floor}
                  style={{
                    backgroundColor: row.securityCount > 0 ? '#333300' : undefined
                  }}
                >
                  <td style={{ color: '#fff' }}>{row.floor}</td>
                  <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>{row.inSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>{row.outSwipes}</td>
                  <td
                    style={{
                      color: ROW_COLORS[(idx + 2) % ROW_COLORS.length],
                      fontWeight: 'bold'
                    }}
                  >
                    {row.inconsistency}
                  </td>

                  {/* ðŸ‘‡ Only this cell is clickable */}
                  <td
                    style={{
                      color: row.securityCount > 0 ? '#FFC72C' : '#aaa',
                      fontWeight: row.securityCount > 0 ? 'bold' : 'normal',
                      cursor: row.securityCount > 0 ? 'pointer' : 'default',
                      textDecoration: row.securityCount > 0 ? 'underline' : 'none'
                    }}
                    onClick={() => {
                      if (row.securityCount > 0) handleRowClick(row.floor);
                    }}
                  >
                    {row.securityCount}
                  </td>

                  <td></td>
                </tr>
              ))}
            </tbody>


          </Table>
        </Card.Body>
      </Card>

      {/* Modal for details */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>Security Occupants - {selectedFloor}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Table striped bordered hover size="sm">
            <thead>
              <tr>
                <th>EmployeeID</th>
                <th>Name</th>
                <th>Swipe Time</th>
                <th>Door</th>
                <th>Type</th>
              </tr>
            </thead>
            <tbody>
              {selectedPeople.map((p, idx) => (
                <tr key={idx}>
                  <td>{p.EmployeeID}</td>
                  <td>{p.ObjectName1 || "(Unknown)"}</td>
                  <td>{p.Swipe_Time || "â€”"}</td>
                  <td>{p.Door || "â€”"}</td>
                  <td>{p.PersonnelType || "â€”"}</td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Modal.Body>
      </Modal>
    </>
  );
}
