in this data are not disply correct format i means 
this table are disply very big in this only 3 records that time very big but when record are 10 or 20 that time is very and very big  will disply;
so write correcu  desing for this table, i measn creat scroll bar, and equal size for column 

{/* Rejection details modal (today) */}
      <Modal show={showRejectionModal} onHide={() => setShowRejectionModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>Rejections Today - {selectedRejectionFloor}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedRejectionList.length === 0 ? (
            <div>No rejections recorded today for {selectedRejectionFloor}</div>
          ) : (
            <Table striped bordered hover size="sm">
              <thead>
                <tr>
                  <th>Sr.no</th>
                  <th>Date</th>
                  <th>Time</th>
                  <th>Name</th>
                  <th>EmployeeID</th>
                  <th>CardNumber</th>
                  <th>PersonnelType</th>
                  <th>Door</th>
                  <th>RejectionType</th>
                </tr>
              </thead>
              <tbody>
                {selectedRejectionList.map((r, i) => {
                  let localDate = '';
                  let localTime = '';
                  try {
                    if (r.LocaleMessageTime) {
                      const dt = new Date(r.LocaleMessageTime);
                      localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                      localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
                    } else if (r.DateOnly) {
                      localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0, 10) : new Date(r.DateOnly).toISOString().slice(0, 10));
                      localTime = r.SwipeTime || '';
                    }
                  } catch (e) {
                    localDate = (r.DateOnly || '').slice(0, 10);
                    localTime = r.SwipeTime || '';
                  }

                  return (
                    <tr key={i}>
                      <td>{i + 1}</td>
                      <td>{localDate}</td>
                      <td>{localTime}</td>
                      <td>{r.ObjectName1}</td>
                      <td>{r.EmployeeID}</td>
                      <td>{r.CardNumber || '—'}</td>
                      <td>{r.PersonnelType || '—'}</td>
                      <td style={{ maxWidth: 280, wordBreak: 'break-word' }}>{r.Door || r.Location || '—'}</td>
                      <td>{r.RejectionType || '—'}</td>
                    </tr>
                  );
                })}
              </tbody>
            </Table>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button
            style={{ background: '#FFC72C', borderColor: '#FFC72C', color: '#000', fontWeight: 600 }}
            onClick={() => exportRejectionsToExcel(selectedRejectionList, `rejections-${(selectedRejectionFloor || 'floor').replace(/\s+/g, '_')}-${new Date().toISOString().slice(0, 10)}.xlsx`)}
          >
            Export Excel
          </Button>
          <Button variant="secondary" onClick={() => setShowRejectionModal(false)}>Close</Button>
        </Modal.Footer>
      </Modal>


      <Modal
        show={showAllRejectionsModal}
        onHide={() => setShowAllRejectionsModal(false)}
        size="lg"
        centered
      >
        <Modal.Header closeButton>
          <Modal.Title>All Rejections Today</Modal.Title>
        </Modal.Header>

        <Modal.Body style={{ maxHeight: '60vh', overflowY: 'auto', padding: '0.5rem 1rem' }}>
          {(!rejectionAllDetailsToday || rejectionAllDetailsToday.length === 0) ? (
            <div>No rejections recorded today</div>
          ) : (
            <div style={{ overflowX: 'auto' }}>
              <Table striped bordered hover size="sm" className="mb-0">
                <thead>
                  <tr>
                    <th>Sr.no</th>
                    <th>Date</th>
                    <th>Time</th>
                    <th>Name</th>
                    <th>EmployeeID</th>
                    <th>CardNumber</th>
                    <th>PersonnelType</th>
                    <th>Door</th>
                    <th>RejectionType</th>
                  </tr>
                </thead>
                <tbody>
                  {rejectionAllDetailsToday.map((r, i) => {
                    let localDate = '';
                    let localTime = '';
                    try {
                      if (r.LocaleMessageTime) {
                        const dt = new Date(r.LocaleMessageTime);
                        localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                        localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
                      } else if (r.DateOnly) {
                        localDate = (typeof r.DateOnly === 'string'
                          ? r.DateOnly.slice(0, 10)
                          : new Date(r.DateOnly).toISOString().slice(0, 10)
                        );
                        localTime = r.SwipeTime || '';
                      }
                    } catch (e) {
                      localDate = (r.DateOnly || '').slice(0, 10);
                      localTime = r.SwipeTime || '';
                    }

                    return (
                      <tr key={i}>
                        <td>{i + 1}</td>
                        <td>{localDate}</td>
                        <td>{localTime}</td>
                        <td>{r.ObjectName1}</td>
                        <td>{r.EmployeeID}</td>
                        <td>{r.CardNumber || '—'}</td>
                        <td>{r.PersonnelType || '—'}</td>
                        <td style={{ maxWidth: 200, wordBreak: 'break-word' }}>{r.Door || r.Location || '—'}</td>
                        <td>{r.RejectionType || '—'}</td>
                      </tr>
                    );
                  })}
                </tbody>
              </Table>
            </div>
          )}
        </Modal.Body>

        <Modal.Footer>
          <Button
            style={{
              background: '#FFC72C',
              borderColor: '#FFC72C',
              color: '#000',
              fontWeight: 600
            }}
            onClick={() => exportRejectionsToExcel(
              rejectionAllDetailsToday,
              `all-rejections-${new Date().toISOString().slice(0, 10)}.xlsx`
            )}
          >
            Export Excel
          </Button>
          <Button variant="secondary" onClick={() => setShowAllRejectionsModal(false)}>
            Close
          </Button>
        </Modal.Footer>
      </Modal>
