know also update frntedn to get correct count ok on select time::

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav, Form, Button, InputGroup } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';
import DenverInOutInconsistencyPage from './pages/DenverInOutInconsistency'; // ← NEW

import './App.css';

export default function App() {
  // live data states
  const [floorData, setFloorData] = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday] = useState(0);
  const [personnelSummary, setPersonnelSummary] = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday] = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary] = useState([]); // ← NEW

  // new: in/out inconsistency data
  const [inOutData, setInOutData] = useState(null);
  const [loadingInOut, setLoadingInOut] = useState(true);
  const [inOutError, setInOutError] = useState(null);

  // --- Snapshot/time selection states ---
  const [snapshotMode, setSnapshotMode] = useState(false);
  const [snapshotTime, setSnapshotTime] = useState(''); // "HH:MM" or "HH:MM:SS"
  const [snapshotDate, setSnapshotDate] = useState(() => {
    // default to today's date in America/Denver in YYYY-MM-DD (en-CA format)
    try {
      return new Date().toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
    } catch (e) {
      // fallback to local date if running in environment without timeZone support
      const d = new Date();
      const yyyy = d.getFullYear();
      const mm = String(d.getMonth() + 1).padStart(2, '0');
      const dd = String(d.getDate()).padStart(2, '0');
      return `${yyyy}-${mm}-${dd}`;
    }
  });
  const [snapshotLoading, setSnapshotLoading] = useState(false);
  const [snapshotError, setSnapshotError] = useState(null);
  const [snapshotData, setSnapshotData] = useState(null); // will hold the payload returned by the new API

  // live SSE (unchanged)
  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []); // ← NEW
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, []);

  // Fetch once: in/out inconsistency JSON (unchanged)
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status} - ${res.statusText}`);
        return res.json();
      })
      .then(data => {
        setInOutData(data.floorInconsistency || []); // ✅ Store only the array we want
        setLoadingInOut(false);
      })
      .catch(err => {
        console.error('Failed to load in/out inconsistency:', err);
        setInOutError(err.message);
        setLoadingInOut(false);
      });
  }, []);

  // --- Snapshot handlers ---
  const handleSnapshotTimeChange = (e) => {
    setSnapshotTime(e.target.value);
    setSnapshotError(null);
  };

  const handleSnapshotDateChange = (e) => {
    setSnapshotDate(e.target.value);
    setSnapshotError(null);
  };

  const applySnapshot = async () => {
    if (!snapshotTime) {
      setSnapshotError('Select a time first.');
      return;
    }
    if (!snapshotDate) {
      setSnapshotError('Select a date first.');
      return;
    }

    // Ensure time has seconds (append :00 if only HH:MM)
    const timeForApi = snapshotTime.length === 5 ? `${snapshotTime}:00` : snapshotTime;

    setSnapshotLoading(true);
    setSnapshotError(null);

    try {
      const url = `http://localhost:5000/api/occupancy-at-time-denver?date=${encodeURIComponent(snapshotDate)}&time=${encodeURIComponent(timeForApi)}`;
      const resp = await fetch(url);
      if (!resp.ok) {
        const txt = await resp.text();
        throw new Error(`${resp.status} ${resp.statusText} - ${txt}`);
      }
      const json = await resp.json();
      setSnapshotData(json);
      setSnapshotMode(true);
    } catch (err) {
      console.error('Failed to fetch snapshot:', err);
      setSnapshotError(err.message || 'Failed to fetch snapshot');
      setSnapshotData(null);
      setSnapshotMode(false);
    } finally {
      setSnapshotLoading(false);
    }
  };

  const clearSnapshot = () => {
    setSnapshotMode(false);
    setSnapshotData(null);
    setSnapshotTime('');
    setSnapshotError(null);
    setSnapshotLoading(false);
    // keep snapshotDate (so user doesn't need to reselect date)
  };

  // --- Decide which data to pass into child components: snapshotData (if active) or live data ---
  const activeFloorData = snapshotMode && snapshotData ? (snapshotData.floorBreakdown || []) : floorData;
  const activePersonnelBreakdown = snapshotMode && snapshotData ? (snapshotData.personnelBreakdown || []) : personnelBreakdown;
  const activeTotalVisitedToday = snapshotMode && snapshotData ? (snapshotData.totalVisitedToday || 0) : totalVisitedToday;
  const activePersonnelSummary = snapshotMode && snapshotData ? (snapshotData.personnelSummary || { employees: 0, contractors: 0 }) : personnelSummary;
  const activeVisitedToday = snapshotMode && snapshotData ? (snapshotData.visitedToday || { employees: 0, contractors: 0, total: 0 }) : visitedToday;
  const activeFloorInOutSummary = snapshotMode && snapshotData ? (snapshotData.floorInOutSummary || []) : floorInOutSummary;

  // Helper text to be shown in navbar / header when snapshot is active
  let snapshotLabel = null;
  if (snapshotMode && snapshotData) {
    const asOfLocal = snapshotData.asOfLocal || snapshotData.asOf || snapshotData.asOfUTC;
    try {
      // If asOfLocal exists, show it formatted for Denver
      const d = asOfLocal ? new Date(asOfLocal) : null;
      const formatted = d ? d.toLocaleString('en-US', { timeZone: 'America/Denver' }) : `${snapshotDate} ${snapshotTime}`;
      snapshotLabel = <div style={{
            background: '#363d37',
            color: '#FFF',
            padding: '8px 16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderLeft: '4px solid rgb(11, 248, 3)',
            marginBottom: 8
          }}> Snapshot: {formatted} (Denver) </div>;
    } catch (e) {
      snapshotLabel = `Snapshot: ${snapshotDate} ${snapshotTime}`;
    }
  }

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>

          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>
            <Nav.Link href="http://10.199.22.57:3002/partition/US.CO.OBS/history" className="nav-item-infographic">
              History
            </Nav.Link>
            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>
            {/* <Nav.Link as={Link} to="/inout-inconsistency-denver" className="nav-item-infographic">
              In/Out Inconsistency
            </Nav.Link> */}

            {/* Snapshot time + date picker UI */}
            <Form className="d-flex align-items-center ms-3" onSubmit={e => e.preventDefault()}>
              <InputGroup>
                <Form.Control
                  type="date"
                  value={snapshotDate}
                  onChange={handleSnapshotDateChange}
                  title="Select date (Denver)"
                  style={{ maxWidth: 150 }}
                />
                <Form.Control
                  type="time"
                  step="1"              // allow seconds in browsers that support it
                  value={snapshotTime}
                  onChange={handleSnapshotTimeChange}
                  title="Select time (Denver)"
                  style={{ maxWidth: 120 }}
                />
                <Button variant="outline-light" onClick={applySnapshot} disabled={snapshotLoading}>
                  {snapshotLoading ? 'Loading…' : 'Apply'}
                </Button>
                <Button variant="outline-secondary" onClick={clearSnapshot} className="ms-1">
                  Clear
                </Button>
              </InputGroup>
            </Form>

            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          {/* If snapshot active, show small label */}
          {snapshotLabel && (
            <div style={{ color: '#FFC72C', marginBottom: 8 }}>
              {snapshotLabel}
              {snapshotError && <span style={{ color: 'salmon', marginLeft: 10 }}>{snapshotError}</span>}
            </div>
          )}

          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={activePersonnelSummary}
                  totalVisitedToday={activeTotalVisitedToday}
                  visitedToday={activeVisitedToday}
                  floorData={activeFloorData}
                  personnelBreakdown={activePersonnelBreakdown}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={activeFloorData}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/inout-inconsistency-denver"
              element={
                <DenverInOutInconsistencyPage
                  data={inOutData}
                  loading={loadingInOut}
                  error={inOutError}
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}


______________________________________________

// controllers/denverLiveOccupancyController.js

const { DateTime }       = require('luxon');
const { denver }         = require('../config/siteConfig');
const doorFloorMap       = require('../data/denverDoorFloorMap');
const { monitoredDoors } = require('../data/strictDoorList');
const sql                = require('mssql');
const normalizeKey       = require('../data/normalizeKey');

const warnedKeys = new Set();

// build a Set of normalized door___direction keys
const normalizedMonitoredKeys = new Set(
  Object.entries(monitoredDoors).map(([door, dir]) => normalizeKey(door, dir))
);

/** Determine floor label, fallback to “HQ. N.” parsing **/
function mapDoorToFloor(rawDoor, rawDir) {
  const key = normalizeKey(rawDoor, rawDir);
  if (doorFloorMap[key]) return doorFloorMap[key];
  const m = rawDoor.match(/HQ\.\s*(\d{1,2})\b/);
  if (m) return `Floor ${m[1]}`;
  if (!warnedKeys.has(key)) {
    console.warn(`⛔ Unmapped door-floor key: "${key}"`);
    warnedKeys.add(key);
  }
  return 'Unknown Floor';
}

/** Strip any trailing “_HH:MM:SS” from a door name **/
function stripTimeSuffix(doorRaw) {
  return doorRaw.replace(/_[0-9]{2}:[0-9]{2}:[0-9]{2}$/, '');
}

/**
 * Compare a DB row's Dateonly (yyyy-MM-dd) to either "today in Denver" OR a supplied reference DateTime (also Denver).
 * - dateOnly: string like '2025-09-11'
 * - referenceDt: optional luxon DateTime (zone 'America/Denver') to treat as "today"
 */
function isSameDenverDate(dateOnly, referenceDt = null) {
  if (!dateOnly) return false;
  const swipeDate = DateTime.fromISO(dateOnly, { zone: 'America/Denver' }).toFormat('yyyy-LL-dd');
  const today = referenceDt
    ? referenceDt.setZone('America/Denver').toFormat('yyyy-LL-dd')
    : DateTime.now().setZone('America/Denver').toFormat('yyyy-LL-dd');
  return swipeDate === today;
}

async function fetchNewEvents(since) {
  let pool;
  try {
    pool = await denver.poolPromise;
  } catch (err) {
    console.error('❌ Failed to get Denver pool in fetchNewEvents():', err);
    return [];
  }
  if (!pool) return [];

  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]' ,'varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010029.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType   = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE,-1* t1.MessageLocaleOffset, t1.MessageUTC) >=@since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8),  LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// fetch events in 24h window ending at `until`
async function fetchEventsWindowUntil(until) {
  let pool;
  try {
    pool = await denver.poolPromise;
  } catch (err) {
    console.error('❌ Failed to get Denver pool in fetchEventsWindowUntil():', err);
    return [];
  }
  if (!pool) return [];

  const req = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'), sc.value) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010029.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5a ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5d ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxml t_xml ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
        AND DATEADD(HOUR, -24, @until) < DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC)
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// --- ONLY endpoint: Snapshot endpoint for Denver with date + time ---
// GET /api/occupancy-at-time-denver?date=YYYY-MM-DD&time=HH:MM[:SS]
exports.getDenverSnapshotAtDateTime = async (req, res) => {
  try {
    const { date, time } = req.query;
    if (!date || !time) {
      return res.status(400).json({
        error: 'missing query params: expected ?date=YYYY-MM-DD&time=HH:MM[:SS]'
      });
    }

    // Validate date
    const dateMatch = /^(\d{4})-(\d{2})-(\d{2})$/.exec(date);
    if (!dateMatch) return res.status(400).json({ error: 'invalid "date" format; expected YYYY-MM-DD' });

    // Validate time
    const timeMatch = /^([0-1]\d|2[0-3]):([0-5]\d)(?::([0-5]\d))?$/.exec(time);
    if (!timeMatch) return res.status(400).json({ error: 'invalid "time" format; expected HH:MM or HH:MM:SS' });

    const year   = Number(dateMatch[1]);
    const month  = Number(dateMatch[2]);
    const day    = Number(dateMatch[3]);
    const hour   = Number(timeMatch[1]);
    const minute = Number(timeMatch[2]);
    const second = timeMatch[3] ? Number(timeMatch[3]) : 0;

    // Build Denver-local datetime
    const atDt = DateTime.fromObject(
      { year, month, day, hour, minute, second, millisecond: 0 },
      { zone: 'America/Denver' }
    );

    if (!atDt.isValid) {
      return res.status(400).json({ error: 'invalid date+time combination' });
    }

    const untilJsDate = atDt.toJSDate();

    // fetch with 24h window ending at requested datetime
    const events = await fetchEventsWindowUntil(untilJsDate);

    // filter only events on that Denver local date
    const targetDate = atDt.toFormat('yyyy-LL-dd');
    const filtered = events.filter(e => e.Dateonly === targetDate);

    // build occupancy payload (pass atDt so date checks use it)
    const payload = buildOccupancyForToday(filtered, [], atDt);

    return res.json(payload);
  } catch (err) {
    console.error('getDenverSnapshotAtDateTime error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};

// --------------------------
// helper: computeVisitedToday using optional reference date
function computeVisitedToday(allEvents, referenceDt = null) {
  const seen = new Map(); // key -> PersonnelType
  allEvents.forEach(evt => {
    if (evt.Direction === 'InDirection' && isSameDenverDate(evt.Dateonly, referenceDt)) {
      const key = evt.PersonGUID || evt.EmployeeID || evt.CardNumber;
      if (!seen.has(key)) {
        seen.set(key, evt.PersonnelType);
      }
    }
  });
  let emp = 0, ctr = 0;
  seen.forEach(type => {
    if (type === 'Employee' || type === 'Terminated Personnel') emp++;
    else ctr++;
  });
  return { total: seen.size, employees: emp, contractors: ctr };
}


// Build occupancy for "today" where "today" can be the real today OR the date represented by atDt (Denver)
function buildOccupancyForToday(allEvents, freshEvents = [], atDt = null) {
  // reference DateTime in Denver (null => live now)
  const refDt = atDt ? atDt.setZone('America/Denver') : null;

  // canonical person key
  const personKey = (evt) => evt.PersonGUID || evt.EmployeeID || evt.CardNumber;

  // derive a Luxon DateTime in America/Denver for the event.
  // Prefer Dateonly + Swipe_Time (these are the DB's local values). Fallback to parsing LocaleMessageTime.
  const eventDtFor = (evt) => {
    if (evt && evt.Dateonly && evt.Swipe_Time) {
      const iso = `${evt.Dateonly}T${evt.Swipe_Time}`; // e.g. "2025-09-17T00:26:55"
      const dt = DateTime.fromISO(iso, { zone: 'America/Denver' });
      if (dt.isValid) return dt;
    }
    if (evt && evt.LocaleMessageTime) {
      // Last resort: parse LocaleMessageTime as ISO and convert to Denver.
      // NOTE: this is fallback only — avoid relying on it for correctness.
      const dt = DateTime.fromISO(evt.LocaleMessageTime, { zone: 'utc' }).setZone('America/Denver');
      if (dt.isValid) return dt;
    }
    return null;
  };

  // ---------- PREFILTER: only keep events on same Denver date and (if refDt) that occurred <= refDt
  const relevantEvents = allEvents.filter(evt => {
    if (!isSameDenverDate(evt.Dateonly, refDt)) return false;
    if (!refDt) return true;
    const eDt = eventDtFor(evt);
    if (!eDt) return false; // cannot compare -> discard
    return eDt <= refDt;
  });

  // ---------- A) Evict “Out of office” using the last event per person (by eventDt)
  const lastByPerson = new Map(); // personKey -> evt
  const lastDtByPerson = new Map(); // personKey -> DateTime

  relevantEvents.forEach(evt => {
    const key = personKey(evt);
    const eDt = eventDtFor(evt);
    if (!eDt) return; // skip malformed
    const prevDt = lastDtByPerson.get(key);
    if (!prevDt || eDt > prevDt) {
      lastDtByPerson.set(key, eDt);
      lastByPerson.set(key, evt);
    }
  });

  const evicted = new Set();
  lastByPerson.forEach(evt => {
    if (
      evt.Direction === 'OutDirection'
      && mapDoorToFloor(evt.Door, evt.Direction) === 'Out of office'
    ) {
      evicted.add(personKey(evt));
    }
  });

  // active events are relevantEvents minus evicted persons
  const activeEvents = relevantEvents.filter(evt => !evicted.has(personKey(evt)));

  // ---------- 1) Live occupancy dedupe by last InDirection (use eventDt ordering)
  const todayIn = activeEvents.filter(e => e.Direction === 'InDirection');

  const latestByPerson = new Map();
  const latestDtByPerson = new Map();
  todayIn.forEach(e => {
    const key = personKey(e);
    const eDt = eventDtFor(e);
    if (!eDt) return;
    const prev = latestDtByPerson.get(key);
    if (!prev || eDt > prev) {
      latestDtByPerson.set(key, eDt);
      latestByPerson.set(key, e);
    }
  });
  const finalList = Array.from(latestByPerson.values());
  

  // ---------- 2) Floor breakdown & personnel counts (live)
  let employees = 0, contractors = 0;
  const floorMap = {};
  finalList.forEach(e => {
    const fl = mapDoorToFloor(e.Door, e.Direction);
    floorMap[fl] = floorMap[fl] || [];
    floorMap[fl].push(e);
    if (e.PersonnelType === 'Employee' || e.PersonnelType === 'Terminated Personnel') employees++;
    else if (e.PersonnelType) contractors++;
  });

  const floorBreakdown = Object.entries(floorMap).map(([floor, occ]) => {
    let empCount = 0, contractorCount = 0, tempBadgeCount = 0, otherCount = 0;
    occ.forEach(e => {
      switch (e.PersonnelType) {
        case 'Employee':
        case 'Terminated Personnel':
          empCount++; break;
        case 'Contractor':
        case 'Terminated Contractor':
          contractorCount++; break;
        case 'Temp Badge':
          tempBadgeCount++; break;
        default:
          otherCount++;
      }
    });
    return {
      floor,
      total: occ.length,
      employees: empCount,
      contractors: contractorCount,
      tempBadge: tempBadgeCount,
      others: otherCount,
      occupants: occ
    };
  });

  // ---------- 3) Personnel breakdown
  const personnelBreakdown = Array.from(
    finalList.reduce((m, e) => {
      m.set(e.PersonnelType, (m.get(e.PersonnelType) || 0) + 1);
      return m;
    }, new Map()),
    ([personnelType, count]) => ({ personnelType, count })
  );

  // ---------- 4) Swipe stats (fresh only) — count only up to refDt
  const countUpToRef = (evt) => {
    if (!isSameDenverDate(evt.Dateonly, refDt)) return false;
    if (!refDt) return true;
    const eDt = eventDtFor(evt);
    if (!eDt) return false;
    return eDt <= refDt;
  };
  const totalInSwipes = (freshEvents || []).filter(e => e.Direction === 'InDirection' && countUpToRef(e)).length;
  const totalOutSwipes = (freshEvents || []).filter(e => e.Direction === 'OutDirection' && countUpToRef(e)).length;

  // ---------- 5) Floor In/Out summary (strict doors only)
  const validEvents = relevantEvents.filter(evt => {
    const doorNoTime = stripTimeSuffix(evt.Door.trim());
    const key = normalizeKey(doorNoTime, (evt.Direction || '').trim());
    return normalizedMonitoredKeys.has(key);
  });

  // Dedupe per person+floor+direction using eventDt ordering
  const deduped = new Map(); // mapKey -> evt
  validEvents.forEach(evt => {
    const rawNoTime = stripTimeSuffix(evt.Door);
    const m = rawNoTime.match(/HQ\.\s*(\d{1,2})\b/);
    const floor = m ? `Floor ${m[1]}` : 'Unknown Floor';

    const mapKey = `${personKey(evt)}___${floor}___${evt.Direction}`;
    const prev = deduped.get(mapKey);
    const nowDt = eventDtFor(evt);
    if (!nowDt) return;
    if (!prev) {
      deduped.set(mapKey, evt);
    } else {
      const prevDt = eventDtFor(prev);
      if (!prevDt || nowDt > prevDt) deduped.set(mapKey, evt);
    }
  });

  // Aggregate in/out per floor
  const floorMapIO = {};
  for (const evt of deduped.values()) {
    const rawNoTime = stripTimeSuffix(evt.Door);
    const m = rawNoTime.match(/HQ\.\s*(\d{1,2})\b/);
    const floor = m ? `Floor ${m[1]}` : 'Unknown Floor';

    if (!floorMapIO[floor]) floorMapIO[floor] = { inSwipes: 0, outSwipes: 0, inSet: new Set(), outSet: new Set() };
    const id = personKey(evt);
    if (evt.Direction === 'InDirection') {
      floorMapIO[floor].inSwipes++;
      floorMapIO[floor].inSet.add(id);
    } else {
      floorMapIO[floor].outSwipes++;
      floorMapIO[floor].outSet.add(id);
    }
  }

  const floorInOutSummary = Object.entries(floorMapIO).map(([floor, stats]) => {
    const inOnly = [...stats.inSet].filter(id => !stats.outSet.has(id));
    return {
      floor,
      inSwipes: stats.inSwipes,
      outSwipes: stats.outSwipes,
      inOnlyCount: inOnly.length,
      inOnlyPersons: inOnly
    };
  });

  // ---------- 6) Visited today breakdown (reuse computeVisitedToday; it already supports referenceDt)
  // const visited = computeVisitedToday(allEvents, refDt);
  const visited = computeVisitedToday(relevantEvents, refDt);

const visitedOccupants = relevantEvents
  .filter(e => eventDtFor(e) && eventDtFor(e) <= refDt)
  .reduce((map, e) => {
    const key = personKey(e);
    if (!map.has(key)) map.set(key, e); // keep first event for identity
    return map;
  }, new Map());

  // Build final payload
  const asOfLocal = refDt ? refDt.toISO() : DateTime.now().setZone('America/Denver').toISO();
  const asOfUTC = refDt ? refDt.toUTC().toISO() : new Date().toISOString();

  return {
    asOfLocal,
    asOfUTC,
    currentCount: finalList.length,
    floorBreakdown,
    personnelSummary: { employees, contractors },
    personnelBreakdown,
    totalVisitedToday: visited.total,
    visitedToday: {
      employees: visited.employees,
      contractors: visited.contractors,
      total: visited.total
    },
     visitedOccupants: Array.from(visitedOccupants.values()),  // 👈 new full list
    swipeStats: { totalInSwipes, totalOutSwipes },
    floorInOutSummary
  };
}





// -----------------------------
// Live SSE endpoint (unchanged behaviour)
exports.getDenverLiveOccupancy = async (req, res) => {
  try {
    await denver.poolPromise;
  } catch (err) {
    console.error('❌ Failed to initialize Denver pool in SSE endpoint:', err);
    return res.status(500).end();
  }

  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive'
  });
  res.write('\n');

  let lastSeen = new Date(Date.now() - 24 * 60 * 60 * 1000);
  const events = [];

  const push = async () => {
    let fresh;
    try {
      fresh = await fetchNewEvents(lastSeen);
    } catch (err) {
      console.error('❌ Error in fetchNewEvents():', err);
      fresh = [];
    }

    if (Array.isArray(fresh) && fresh.length) {
      lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
      events.push(...fresh);
    }

    let payload;
    try {
      payload = buildOccupancyForToday(events, fresh, null); // live: atDt null -> uses now
    } catch (err) {
      console.error('❌ Error building Denver occupancy payload:', err);
      payload = {
        asOfLocal: DateTime.now().setZone('America/Denver').toISO(),
        asOfUTC: new Date().toISOString(),
        currentCount: 0,
        floorBreakdown: [],
        personnelSummary: { employees: 0, contractors: 0 },
        personnelBreakdown: [],
        totalVisitedToday: 0,
        visitedToday: { employees: 0, contractors: 0, total: 0 },
        swipeStats: { totalInSwipes: 0, totalOutSwipes: 0 },
        floorInOutSummary: []
      };
    }

    const sid = Date.now();
    res.write(`id: ${sid}\n`);
    res.write(`data: ${JSON.stringify(payload)}\n\n`);
    if (typeof res.flush === 'function') res.flush();
  };

  // initial push then schedule
  push();
  const timer = setInterval(push, 1000);
  req.on('close', () => clearInterval(timer));
};
