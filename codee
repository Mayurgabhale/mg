// Handler: GET /api/occupancy-at?at=<ISO-8601>
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at"' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // requested IST calendar day (string "yyyy-MM-dd")
    const requestedIstDay = DateTime.fromJSDate(atDate, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');

    // fetch events (SQL limited to IST day's UTC-start .. atDate)
    let events = await fetchEventsForDate(atDate);

    // DEFENSIVE FILTER:
    // ensure every event is exactly on the requested IST calendar date.
    // This protects against any SQL / offset mismatch and guarantees the API returns only that date.
    events = events.filter(r => {
      if (!r || !r.LocaleMessageTime) return false;
      try {
        const rowIst = DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' })
          .setZone('Asia/Kolkata')
          .toFormat('yyyy-LL-dd');
        return rowIst === requestedIstDay;
      } catch (e) {
        return false;
      }
    });

    // Now build occupancy from the strictly filtered events
    const occupancy   = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = visitedStats;
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};