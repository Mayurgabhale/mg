// --- companyRows: aggregated by normalized CompanyName for pickedDate (same logic as APAC) ---
const companyRows = useMemo(() => {
  if (!data || !pickedDate) return [];

  const ds = format(pickedDate, 'yyyy-MM-dd');

  // filter details for the date + optional partition filter
  const filtered = data.details.filter(r =>
    r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds &&
    (
      !backendFilterKey ||
      r.PartitionNameFriendly === backendFilterKey ||
      apacForwardKey?.[r.PartitionNameFriendly] === backendFilterKey
    )
  );

  // aggregate into map: key = country||city||normalizedCompany
  const map = new Map();

  filtered.forEach(r => {
    // use same partition -> country/city mapping helper used in APAC
    const city = formatPartition(r.PartitionNameFriendly || '');
    const disp = Object.values(apacPartitionDisplay).find(d => d.city === city);
    const country = disp?.country || 'Unknown';

    // Use getCanonicalCompany if you already have it on the page (APAC). If not,
    // replace with your normalizer; the function name must exist.
    const company = typeof getCanonicalCompany === 'function' ? getCanonicalCompany(r) : (r.CompanyName || 'Unknown');

    const key = `${country}||${city}||${company}`;
    const existing = map.get(key);
    if (existing) {
      existing.total += 1;
    } else {
      map.set(key, { country, city, company, total: 1 });
    }
  });

  return Array.from(map.values()).sort((a, b) => {
    if (a.country !== b.country) return a.country.localeCompare(b.country);
    if (a.city !== b.city) return a.city.localeCompare(b.city);
    return a.company.localeCompare(b.company);
  });
}, [data, pickedDate, backendFilterKey]);






....
.



const handleExportCompanies = async () => {
  if (!pickedDate || !companyRows.length) return;

  const wb = new ExcelJS.Workbook();
  const ws = wb.addWorksheet('Company Summary');

  // set up columns
  ws.columns = [
    { header: 'Country', key: 'country', width: 20 },
    { header: 'City', key: 'city', width: 25 },
    { header: 'Company', key: 'company', width: 40 },
    { header: 'Total', key: 'total', width: 12 },
  ];

  // merge top row for date
  ws.mergeCells('A1:D1');
  const dateCell = ws.getCell('A1');
  dateCell.value = format(pickedDate, 'EEEE, d MMMM, yyyy');
  dateCell.alignment = { horizontal: 'center', vertical: 'middle' };
  dateCell.font = { name: 'Calibri', size: 14, bold: true };

  // blank spacer
  ws.addRow([]);

  // header row
  const headerRow = ws.addRow(['Country', 'City', 'Company', 'Total']);
  headerRow.eachCell(cell => {
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC107' } };
    cell.font = { bold: true, color: { argb: 'FF000000' } };
    cell.alignment = { horizontal: 'center', vertical: 'middle' };
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
  });

  // data rows
  companyRows.forEach(r => {
    const row = ws.addRow([r.country, r.city, r.company, r.total]);
    row.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
      if (colNumber === 4) {
        cell.alignment = { horizontal: 'right', vertical: 'middle' };
        cell.numFmt = '#,##0';
      } else {
        cell.alignment = { horizontal: 'left', vertical: 'middle' };
      }
    });
  });

  // totals row
  const total = companyRows.reduce((s, r) => s + r.total, 0);
  const totalRow = ws.addRow(['Total', '', '', total]);
  totalRow.eachCell((cell, colNumber) => {
    cell.font = { bold: true };
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
    if (colNumber === 4) {
      cell.alignment = { horizontal: 'right', vertical: 'middle' };
      cell.numFmt = '#,##0';
    } else {
      cell.alignment = { horizontal: colNumber === 1 ? 'left' : 'center', vertical: 'middle' };
    }
  });

  // save
  const buf = await wb.xlsx.writeBuffer();
  saveAs(new Blob([buf]), `emea_companies_${format(pickedDate, "yyyyMMdd")}.xlsx`);
};





....


{/* Container for both tables side-by-side */}
<Box sx={{ display: 'flex', gap: 2, width: '100%', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>
  {/* Left: existing summary table */}
  <Box sx={{ flex: 1, minWidth: 320 }}>
    <Paper elevation={3} sx={{ p: 3, border: '3px solid #000', borderRadius: 2 }}>
      <TableContainer sx={{ maxHeight: 500, overflowY: 'auto' }}>
        <Table sx={{ border: '2px solid #000' }} size="small">
          <TableHead>
            <TableRow>
              <TableCell colSpan={5} align="center"
                sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#FFC107', border: '2px solid #000' }}>
                {format(pickedDate, 'EEEE, d MMMM, yyyy')}
              </TableCell>
            </TableRow>
            <TableRow sx={{ bgcolor: '#FFC107' }}>
              {['Country', 'City', 'Employees', 'Contractors', 'Total'].map(h => (
                <TableCell key={h} align={h === 'Country' || h === 'City' ? 'left' : 'right'}
                  sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                  {h}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {partitionRows.map((r, i) => (
              <TableRow key={i}>
                <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
                <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.employee}</TableCell>
                <TableCell align="right" sx={{ border: '2px solid #000' }}>{r.contractor}</TableCell>
                <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                  {r.total}
                </TableCell>
              </TableRow>
            ))}
            <TableRow sx={{ bgcolor: '#666' }}>
              <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                Total
              </TableCell>
              <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                {partitionRows.reduce((s, r) => s + r.employee, 0)}
              </TableCell>
              <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                {partitionRows.reduce((s, r) => s + r.contractor, 0)}
              </TableCell>
              <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                {partitionRows.reduce((s, r) => s + r.total, 0)}
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>

      <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
        <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }}
          onClick={() => setShowDetails(v => !v)}>
          {showDetails ? 'Hide Details' : 'See Details'}
        </Button>
        {showDetails && (
          <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
            onClick={handleExport}>
            Export Details
          </Button>
        )}
        <Button
          variant="contained"
          sx={{ ml: 2, bgcolor: '#FFC107', color: '#000' }}
          onClick={handleExportSummary}
        >
          Export Summary to Excel
        </Button>
      </Box>
    </Paper>
  </Box>

  {/* Right: company-level table (same style as APAC) */}
  <Box sx={{ flex: 1, minWidth: 320 }}>
    <Paper elevation={3} sx={{ p: 3, border: '3px solid #000', borderRadius: 2 }}>
      <TableContainer sx={{ maxHeight: 280, overflowY: 'auto' }}>
        <Table sx={{ border: '2px solid #000' }} size="small">
          <TableHead>
            <TableRow>
              <TableCell colSpan={4} align="center"
                sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#FFC107', border: '2px solid #000' }}>
                {format(pickedDate, 'EEEE, d MMMM, yyyy')}
              </TableCell>
            </TableRow>
            <TableRow sx={{ bgcolor: '#FFC107' }}>
              {['Country', 'City', 'Company', 'Total'].map(h => (
                <TableCell key={h} align={h === 'Country' || h === 'City' ? 'left' : 'center'}
                  sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                  {h}
                </TableCell>
              ))}
            </TableRow>
          </TableHead>
          <TableBody>
            {companyRows.length > 0 ? companyRows.map((r, i) => {
              const rowKey = `${r.country}||${r.city}||${r.company}`;
              return (
                <TableRow
                  key={`${r.company}-${i}`}
                  onClick={() => {
                    // keep existing behaviour: toggle selection if you have selection handler
                    if (typeof setSelectedCompany === 'function') {
                      if (selectedCompany === rowKey) {
                        setSelectedCompany(null);
                        setShowDetails(true);
                      } else {
                        setSelectedCompany(rowKey);
                        setShowDetails(true);
                      }
                    }
                  }}
                  sx={{
                    cursor: 'pointer',
                    '&:hover': { backgroundColor: '#474747' },
                    ...(selectedCompany === rowKey ? { backgroundColor: '#474747' } : {})
                  }}
                  tabIndex={0}
                  role="button"
                >
                  <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                  <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
                  <TableCell sx={{ border: '2px solid #000' }}>{r.company}</TableCell>
                  <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                    {r.total}
                  </TableCell>
                </TableRow>
              );
            }) : (
              <TableRow>
                <TableCell colSpan={4} sx={{ border: '2px solid #000', textAlign: 'center', color: '#666', fontStyle: 'italic' }}>
                  No records for this date.
                </TableCell>
              </TableRow>
            )}

            <TableRow sx={{ bgcolor: '#666' }}>
              <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                Total
              </TableCell>
              <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                {/* empty cell for layout */}
              </TableCell>
              <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                {companyRows.reduce((s, r) => s + r.total, 0)}
              </TableCell>
            </TableRow>
          </TableBody>
        </Table>
      </TableContainer>

      <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
        <Button
          variant="contained"
          sx={{ bgcolor: '#FFC107', color: '#000' }}
          onClick={handleExportCompanies}
        >
          Export Companies to Excel
        </Button>
      </Box>
    </Paper>
  </Box>
</Box>



