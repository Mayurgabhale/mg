// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react'; import { useParams } from 'react-router-dom'; import { Container, Box, Button, Typography, Table, TableHead, TableBody, TableRow, TableCell, Paper, TextField } from '@mui/material'; import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns'; import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers'; import { format } from 'date-fns'; import * as XLSX from 'xlsx'; import { saveAs } from 'file-saver';

import Header from '../components/Header'; import Footer from '../components/Footer'; import LoadingSpinner from '../components/LoadingSpinner'; import { fetchHistory } from '../api/occupancy.service';

const partitionToDisplay = { 'AUT.Vienna':          { city: 'Vienna',    country: 'Austria' }, 'DU.Abu Dhab':        { city: 'Dubai',     country: 'UAE' }, 'IE.Dublin':             { city: 'Dublin',  country: 'Ireland' }, 'LT.Vilnius': { city: 'Vilnius', country: 'Lithuania' },

'MA.Casablanca': { city: 'Casablanca', country: 'Morocco' }, 'RU.Moscow': { city: 'Moscow', country: 'Russia' }, 'UK.London': { city: 'London', country: 'UK' }, 'ES.Madrid': { city: 'Madrid', country: 'Spain' } };

export default function History() { const { partition: partitionParam } = useParams(); const decodedKey = partitionParam ? decodeURIComponent(partitionParam) : null;

// Wrap in useMemo to keep stable across renders const filteredPartitionKeys = useMemo( () => decodedKey ? [decodedKey] : Object.keys(partitionToDisplay), [decodedKey] );

const [data, setData]             = useState(null); const [loading, setLoading]       = useState(true); const [pickedDate, setPickedDate] = useState(null); const [showDetails, setShowDetails] = useState(false);

// NEW: selected partition (from left table) — used to show the right table const [selectedPartitionKey, setSelectedPartitionKey] = useState(null);

// 1) Find the summary entry for the chosen date const summaryEntry = useMemo(() => { if (!data || !pickedDate) return null; const ds = format(pickedDate, 'yyyy-MM-dd'); return data.summaryByDate.find(r => r.date === ds) || null; }, [data, pickedDate]);

// 2) Build that summary table’s rows // NOTE: we add a code field so clicks can reference the original partition key const partitionRows = useMemo(() => { if (!summaryEntry) return []; const codeToCountry = { US: 'United States', CA: 'Canada' }; return Object.entries(summaryEntry.partitions) .filter(([key]) => filteredPartitionKeys.includes(key)) .map(([key, vals]) => { const disp    = partitionToDisplay[key]; const country = disp ? disp.country : codeToCountry[key.split('.')[0]] || key; const city    = disp ? disp.city : key; return { code: key, // <-- preserve original partition key for clicks country, city, employee:   vals.Employee   ?? 0, contractor: vals.Contractor ?? 0, total:      vals.total      ?? 0 }; }); }, [summaryEntry, filteredPartitionKeys]);

// 3) Build the detail list exactly as your back-end does: //    a) filter by LocaleMessageTime, same date & partition //    b) sort ascending //    c) keep only each PersonGUID’s last swipe //    d) only InDirection (still inside) const detailRows = useMemo(() => { if (!data || !pickedDate) return []; const ds = format(pickedDate, 'yyyy-MM-dd');

// a) all swipes that day for our partitions
const all = data.details.filter(r =>
  filteredPartitionKeys.includes(r.PartitionName2) &&
   r.LocaleMessageTime.startsWith(ds)
);

// b) oldest → newest
all.sort((a, b) =>
  new Date(a.LocaleMessageTime) - new Date(b.LocaleMessageTime)
);

// c) last swipe per person
const lastByPerson = {};
all.forEach(r => { lastByPerson[r.PersonGUID] = r; });

// d) only those whose final swipe was an entry
// return Object.values(lastByPerson).filter(r => r.Direction === 'InDirection');
return Object.values(lastByPerson);

}, [data, pickedDate, filteredPartitionKeys]);

// Fetch once on mount useEffect(() => { setLoading(true); fetchHistory() .then(json => setData(json)) .finally(() => setLoading(false)); }, []);

if (loading) return <LoadingSpinner />; if (!data)    return null;

// Excel export (includes CardNumber) const handleExport = () => { const ws = XLSX.utils.json_to_sheet( detailRows.map((r, i) => ({ Sr:            i + 1, Date:          format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'), Time:          format(new Date(r.LocaleMessageTime), 'HH:mm:ss'), EmployeeID:    r.EmployeeID, CardNumber:    r.CardNumber, Name:          r.ObjectName1, PersonnelType: r.PersonnelType, CompanyName:   r.CompanyName, PrimaryLocation: r.PrimaryLocation, Door:          r.Door, Partition:     partitionToDisplay[r.PartitionName2]?.city || r.PartitionName2 })) ); const wb = XLSX.utils.book_new(); XLSX.utils.book_append_sheet(wb, ws, 'Details'); const buf = XLSX.write(wb, { bookType:'xlsx', type:'array' }); saveAs(new Blob([buf]), history_${format(pickedDate,'yyyyMMdd')}.xlsx); };

// Helper: details for the selected partition (right table) const detailRowsForSelectedPartition = useMemo(() => { if (!selectedPartitionKey) return []; return detailRows.filter(r => r.PartitionName2 === selectedPartitionKey); }, [detailRows, selectedPartitionKey]);

return ( <> <Header /> <Container maxWidth={false} disableGutters sx={{ pt:2, pb:4 }}> {/* DatePicker + Summary */} {pickedDate && summaryEntry ? ( <Box display="flex" alignItems="flex-start" sx={{ px:2, mb:2, gap:1 }}> <Box sx={{ width:200 }}> <LocalizationProvider dateAdapter={AdapterDateFns}> <DatePicker label="Select date" value={pickedDate} onChange={d => { setPickedDate(d); setShowDetails(false); setSelectedPartitionKey(null); }} renderInput={params => <TextField fullWidth {...params} />} /> </LocalizationProvider> </Box>

{/* LEFT: Summary table  |  RIGHT: Partition-specific details (new) */}
        <Box sx={{ flex:1, display:'flex', gap:2, alignItems:'flex-start' }}>

          <Box sx={{ flex: 1, minWidth: 320 }}>
            <Paper elevation={3} sx={{ px:1, py:1, border:'3px solid #000', borderRadius:2 }}>
              <Table size='small' sx={{ border:'2px solid #000' }}>
                <TableHead>
                  <TableRow>
                    <TableCell colSpan={5} align="center"
                      sx={{ fontWeight:'bold', fontSize:16, bgcolor:'#000', color:'#FFC107', border:'2px solid #000' }}
                    >
                      {format(pickedDate,'EEEE, d MMMM, yyyy')}
                    </TableCell>
                  </TableRow>
                  <TableRow sx={{ bgcolor:'#FFC107' }}>
                    {['Country','City','Employees','Contractors','Total'].map(h=>(
                      <TableCell key={h}
                        align={['Country','City'].includes(h)?'left':'right'}
                        sx={{ color:'#000', fontWeight:'bold', fontSize:14, border:'2px solid #000' }}
                      >
                        {h}
                      </TableCell>
                    ))}
                  </TableRow>
                </TableHead>
                <TableBody>
                  {partitionRows.map((r,i)=>(
                    <TableRow
                      key={r.code}
                      role="button"
                      tabIndex={0}
                      onClick={() => {
                        // toggle selection — clicking will show that partition's detail on the right
                        if (selectedPartitionKey === r.code) {
                          setSelectedPartitionKey(null);
                        } else {
                          setSelectedPartitionKey(r.code);
                          setShowDetails(true); // also reveal the main details section if hidden
                        }
                      }}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                          e.preventDefault();
                          if (selectedPartitionKey === r.code) setSelectedPartitionKey(null);
                          else { setSelectedPartitionKey(r.code); setShowDetails(true); }
                        }
                      }}
                      sx={{ cursor: 'pointer', '&:hover': { backgroundColor: '#f0f0f0' }, ...(selectedPartitionKey === r.code ? { backgroundColor: '#e0e0e0' } : {}) }}
                    >
                      <TableCell sx={{border:'2px solid #000'}}>{r.country}</TableCell>
                      <TableCell sx={{border:'2px solid #000'}}>{r.city}</TableCell>
                      <TableCell align="right" sx={{border:'2px solid #000'}}>{r.employee}</TableCell>
                      <TableCell align="right" sx={{border:'2px solid #000'}}>{r.contractor}</TableCell>
                      <TableCell align="right" sx={{bgcolor:'#FFC107',fontWeight:'bold',border:'2px solid #000'}}>{r.total}</TableCell>
                    </TableRow>
                  ))}

                  <TableRow sx={{ bgcolor:'#666' }}>
                    <TableCell colSpan={2} align="right"
                      sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      Total
                    </TableCell>
                    <TableCell align="right"
                      sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      {partitionRows.reduce((s,r)=>s+r.employee,0)}
                    </TableCell>
                    <TableCell align="right"
                      sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                      {partitionRows.reduce((s,r)=>s+r.contractor,0)}
                    </TableCell>
                    <TableCell align="right"
                      sx={{ color:'#fff', fontWeight:'bold', bgcolor:'#333', border:'2px solid #000' }}>
                      {partitionRows.reduce((s,r)=>s+r.total,0)}
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>

              <Box display="flex" justifyContent="center" sx={{ mt:1 }}>
                <Button variant="contained" sx={{ bgcolor:'#FFC107', color:'#000' }}
                  onClick={()=>setShowDetails(v=>!v)}>
                  {showDetails?'Hide Details':'See Details'}
                </Button>
                {showDetails && (
                  <Button variant="outlined" sx={{ ml:2, borderColor:'#FFC107',color:'#FFC107'}}
                    onClick={handleExport}>
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Paper>
          </Box>

          {/* RIGHT: partition-specific details shown when a summary row is clicked */}
          <Box sx={{ width: 420, minWidth: 320 }}>
            <Paper elevation={3} sx={{ px:1, py:1, border:'3px solid #000', borderRadius:2 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1, textAlign: 'center' }}>
                {selectedPartitionKey ? `Details — ${partitionToDisplay[selectedPartitionKey]?.city || selectedPartitionKey}` : 'Click a row to view partition details'}
              </Typography>

              {selectedPartitionKey ? (
                detailRowsForSelectedPartition.length > 0 ? (
                  <Table size='small' sx={{ border:'2px solid #000' }}>
                    <TableHead>
                      <TableRow sx={{ bgcolor:'#000' }}>
                        {['Sr','Time','Emp ID','Card','Name','Type','Company','Door'].map(h=>(
                          <TableCell key={h} align="center" sx={{ color:'#FFC107',fontWeight:'bold',fontSize:12,border:'2px solid #000' }}>{h}</TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {detailRowsForSelectedPartition.map((r,i)=> (
                        <TableRow key={`${r.PersonGUID}-${i}`}>
                          <TableCell sx={{ border:'2px solid #000' }}>{i+1}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{format(new Date(r.LocaleMessageTime),'HH:mm:ss')}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{r.EmployeeID}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{r.CardNumber}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{r.ObjectName1}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{r.PersonnelType}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{r.CompanyName}</TableCell>
                          <TableCell sx={{ border:'2px solid #000' }}>{r.Door}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                ) : (
                  <Typography variant="body2" sx={{ color:'#666', textAlign:'center', mt:2, fontStyle:'italic' }}>
                    No swipe records for this partition on the selected date.
                  </Typography>
                )
              ) : (
                <Typography variant="body2" sx={{ color:'#666', textAlign:'center', mt:2, fontStyle:'italic' }}>
                  No partition selected.
                </Typography>
              )}
            </Paper>
          </Box>

        </Box>
      </Box>
    ) : (
      <Box sx={{px:2,mb:3}}>
        <LocalizationProvider dateAdapter={AdapterDateFns}>
          <DatePicker
            label="Select date"
            value={pickedDate}
            onChange={d=>{ setPickedDate(d); setShowDetails(false); setSelectedPartitionKey(null); }}
            renderInput={params=><TextField fullWidth {...params}/>}
          />
        </LocalizationProvider>
        {!pickedDate && (
          <Typography variant="body1" color="textSecondary" sx={{mt:2}}>
            Please pick a date to view region summary.
          </Typography>
        )}
      </Box>
    )}

    {/* Details table (original full view) */}
    {showDetails && (
      <Box display="flex" justifyContent="center" mb={2} sx={{width:'100%'}}>
        <Paper elevation={1} sx={{px:4,py:1,width:'100%',border:'3px solid #000',borderRadius:2}}>
          {detailRows.length>0 ? (
            <Table sx={{border:'2px solid #000',borderCollapse:'collapse'}} size='small'>
              <TableHead>
                <TableRow sx={{ bgcolor:'#000' }}>
                  {['Sr','Date','Time','Emp ID','Card','Name','Type','CompanyName','PrimaryLocation','Door','Partition']
                    .map(h=>(
                      <TableCell key={h} align="center"
                        sx={{ color:'#FFC107',fontWeight:'bold',fontSize:14,border:'2px solid #000' }}>
                        {h}
                      </TableCell>
                    ))}
                </TableRow>
              </TableHead>
              <TableBody>
                {detailRows.map((r,i)=>(
                  <TableRow key={r.PersonGUID}>
                    <TableCell sx={{border:'2px solid #000'}}>{i+1}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>
                      {format(new Date(r.LocaleMessageTime),'yyyy-MM-dd')}
                    </TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>
                      {format(new Date(r.LocaleMessageTime),'HH:mm:ss')}
                    </TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.EmployeeID}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.CardNumber}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.ObjectName1}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.PersonnelType}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.CompanyName}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.PrimaryLocation}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>{r.Door}</TableCell>
                    <TableCell sx={{border:'2px solid #000'}}>
                      {partitionToDisplay[r.PartitionName2]?.city || r.PartitionName2}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <Typography variant="body2" sx={{
              color:'#666', textAlign:'center', mt:2, fontStyle:'italic'
            }}>
              No swipe records found for this date.
            </Typography>
          )}
        </Paper>
      </Box>
    )}
  </Container>
  <Footer />
</>

); }

