// src/components/FloorInOutTable.jsx

import React from 'react';
import { Card, Table } from 'react-bootstrap';

// Accent palette (re-used from FloorOccupancyChart)
const ROW_COLORS = [
  '#FFC72C',
  '#C9A9A6',
  '#FFE680',
  '#FFF5EE',
  '#FFD11A',
  '#96DED1',
  '#FFEB99'
];

// Security officer IDs
const SECURITY_OFFICERS = [
  'W0003901','W0019956','W0023386','W0025278','W0025490',
  'W0025492','W0025493','W0025639','W0026149','W0026151',
  'W0026208','W0026455','W0022449'
];

export default function FloorInOutTable({ data = [] }) {
  // Compute inconsistency + security per floor
  const sorted = data
    .map(({ floor, inSwipes, outSwipes, inOnlyPersons = [] }) => {
      const inconsistency = inSwipes - outSwipes;

      const securityList = inOnlyPersons.filter(id =>
        SECURITY_OFFICERS.includes(id)
      );

      return {
        floor,
        inSwipes,
        outSwipes,
        inconsistency,
        securityCount: securityList.length,
        securityList
      };
    })
    .sort((a, b) => b.inconsistency - a.inconsistency);

  const top = sorted[0];

  return (
    <Card
      className="mb-4 shadow-sm"
      style={{
        background: '#1a1a1a',
        border: '2px solid #FFC72C'
      }}
    >
      <Card.Header
        className="text-center fw-bold"
        style={{ background: '#000', color: '#FFC72C' }}
      >
        Floor In vs Out Swipe Summary
      </Card.Header>

      <Card.Body
        style={{
          height: 450,
          padding: '1rem',
          overflowY: 'auto'
        }}
      >
        {top && (
          <div
            className="mb-3"
            style={{ color: '#fff', fontSize: '1rem' }}
          >
            Highest inconsistency:&nbsp;
            <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>
              {top.inconsistency}
            </span>
            &nbsp;on&nbsp;
            <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>
              {top.floor}
            </span>
          </div>
        )}

        <Table striped bordered hover size="sm" variant="dark" className="mb-0">
          <thead>
            <tr>
              <th>Floor</th>
              <th>In Swipes</th>
              <th>Out Swipes</th>
              <th>In &minus; Out</th>
              <th>Security</th>
              <th>Rejection</th>
            </tr>
          </thead>
          <tbody>
            {sorted.map((row, idx) => (
              <tr
                key={row.floor}
                style={{
                  backgroundColor: row.securityCount > 0 ? '#333300' : undefined
                }}
              >
                <td style={{ color: '#fff' }}>{row.floor}</td>
                <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>
                  {row.inSwipes}
                </td>
                <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>
                  {row.outSwipes}
                </td>
                <td
                  style={{
                    color: ROW_COLORS[(idx + 2) % ROW_COLORS.length],
                    fontWeight: 'bold'
                  }}
                >
                  {row.inconsistency}
                </td>

                {/* Security column */}
                <td
                  title={
                    row.securityList.length > 0
                      ? row.securityList.join(', ')
                      : 'No security present'
                  }
                  style={{
                    color: row.securityCount > 0 ? '#FFC72C' : '#aaa',
                    fontWeight: row.securityCount > 0 ? 'bold' : 'normal'
                  }}
                >
                  {row.securityCount}
                </td>

                <td></td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card.Body>
    </Card>
  );
}
