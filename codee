import React, { useEffect, useMemo, useState } from "react"; import { motion } from "framer-motion"; import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Line, PieChart, Pie, Cell, } from "recharts"; import { FiDownload as Download, FiSearch as Search, FiCalendar as Calendar, FiRefreshCw as Refresh, FiUsers as Users, FiUser as User, FiPieChart as PieChartIcon, FiTrendingUp as TrendingUp, FiFilter, FiCheckSquare, FiX, FiMenu, FiChevronLeft, FiChevronRight, } from "react-icons/fi";

// Single-file, drop-in modern dashboard component // Requirements: TailwindCSS, framer-motion, recharts, react-icons

const GOLD = "#D4AF37"; const BG = "bg-neutral-900"; // Tailwind dark background const CARD = "bg-gradient-to-br from-neutral-800 via-neutral-900 to-black"; // subtle depth

export default function PuneMonthlyDashboardImproved({ initialMonth }) { const now = new Date(); const defaultMonth = initialMonth || ${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")};

const [month, setMonth] = useState(defaultMonth); const [loading, setLoading] = useState(false); const [error, setError] = useState(null); const [data, setData] = useState(null);

const [q, setQ] = useState(""); const [personnelFilter, setPersonnelFilter] = useState("All"); const [showTopOnly, setShowTopOnly] = useState(false); const [sidebarOpen, setSidebarOpen] = useState(true);

useEffect(() => { let alive = true; async function load() { setLoading(true); setError(null); try { const res = await fetch(/api/monthly-summary?month=${month}); if (!res.ok) throw new Error(HTTP ${res.status}); const json = await res.json(); if (!alive) return; setData(json); } catch (err) { console.error(err); if (!alive) return; setError(err.message || "Failed to load"); } finally { if (alive) setLoading(false); } } load(); return () => { alive = false; }; }, [month]);

const days = useMemo( () => (data?.attendanceSheet?.length ? Object.keys(data.attendanceSheet[0]).filter((k) => /\d{4}-\d{2}-\d{2}/.test(k)) : data?.days || []), [data] );

const personnelTypes = useMemo(() => { if (!data) return []; const set = new Set(); for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown"); return ["All", ...Array.from(set)]; }, [data]);

const filteredAttendance = useMemo(() => { if (!data) return []; const rows = data.attendanceSheet || []; return rows.filter((r) => { if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false; if (q) { const term = q.toLowerCase(); return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term); } return true; }); }, [data, q, personnelFilter]);

const personnelDistribution = useMemo(() => { if (!data?.attendanceSheet) return []; const map = new Map(); for (const r of data.attendanceSheet) { const t = r.personnelType || r.PersonnelType || "Unknown"; map.set(t, (map.get(t) || 0) + 1); } return Array.from(map.entries()).map(([name, value]) => ({ name, value })); }, [data]);

const COLORS = [GOLD, "#F59E0B", "#F97316", "#10B981", "#60A5FA", "#A78BFA"];

function downloadJSON() { const payload = JSON.stringify({ month, data }, null, 2); const blob = new Blob([payload], { type: "application/json" }); const url = URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = monthly-summary-${month}.json; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); }

function downloadCSV() { const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance; const headers = ["employeeId", "name", "personnelType", "daysPresent", "attendancePercent"]; const csv = [headers.join(",")].concat( rows.map((r) => headers.map((h) => "${(r[h] ?? "").toString().replace(/"/g, '""')}").join(",")) ).join("\n"); const blob = new Blob([csv], { type: "text/csv" }); const url = URL.createObjectURL(blob); const a = document.createElement("a"); a.href = url; a.download = attendance-${month}.csv; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); }

function humanDay(d) { return d.slice(8); }

function pctColor(pct) { const n = parseFloat((pct || 0).toString()); if (Number.isNaN(n)) return "bg-neutral-700 text-neutral-200"; if (n >= 90) return "bg-emerald-600 text-black"; if (n >= 75) return "bg-amber-500 text-black"; return "bg-rose-600 text-white"; }

return ( <div className={min-h-screen ${BG} text-neutral-100 antialiased}> <div className="max-w-[1400px] mx-auto px-4 py-6"> <div className="flex items-start gap-6"> {/* Sidebar */} <motion.aside layout initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} className={flex-shrink-0 ${sidebarOpen ? "w-72" : "w-16"} transition-all} > <div className={rounded-2xl p-4 ${CARD} shadow-lg border border-neutral-800}> <div className="flex items-center justify-between"> <div className="flex items-center gap-3"> <div className={rounded-lg w-10 h-10 flex items-center justify-center} style={{ background: "linear-gradient(135deg, rgba(212,175,55,0.08), rgba(212,175,55,0.02))" }}> <Users size={20} className="text-yellow-300" /> </div> {sidebarOpen && ( <div> <div className="text-sm font-semibold">Pune Dashboard</div> <div className="text-xs text-neutral-400">Monthly Attendance</div> </div> )} </div> <button onClick={() => setSidebarOpen((s) => !s)} aria-label="Toggle sidebar" className="p-2 rounded-md hover:bg-neutral-800" > {sidebarOpen ? <FiChevronLeft /> : <FiChevronRight />} </button> </div>

{sidebarOpen && (
            <nav className="mt-6 space-y-3 text-sm">
              <button className="w-full text-left px-3 py-2 rounded-md hover:bg-neutral-800 flex items-center gap-3">
                <TrendingUp /> <span>Overview</span>
              </button>
              <button className="w-full text-left px-3 py-2 rounded-md hover:bg-neutral-800 flex items-center gap-3">
                <PieChartIcon /> <span>People</span>
              </button>
              <button className="w-full text-left px-3 py-2 rounded-md hover:bg-neutral-800 flex items-center gap-3">
                <Users /> <span>People Directory</span>
              </button>
            </nav>
          )}

          {sidebarOpen && (
            <div className="mt-6 pt-3 border-t border-neutral-800 text-xs text-neutral-400">
              Data range: <span className="font-medium text-neutral-100">{month}</span>
            </div>
          )}
        </div>
      </motion.aside>

      {/* Main content */}
      <div className="flex-1">
        {/* Top header */}
        <motion.header
          initial={{ opacity: 0, y: -8 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6"
        >
          <div className={`rounded-2xl p-4 ${CARD} shadow-xl border border-neutral-800 flex items-center justify-between gap-4`}>
            <div className="flex items-center gap-4">
              <div>
                <h1 className="text-lg md:text-2xl font-bold" style={{ color: GOLD }}>Pune — Monthly Attendance</h1>
                <p className="text-sm text-neutral-400">Interactive dashboard • quick actions • animated UI</p>
              </div>

              <div className="hidden md:flex items-center gap-3 ml-4">
                <div className="flex items-center gap-2 bg-neutral-800 rounded-lg px-3 py-2">
                  <Calendar className="text-neutral-300" />
                  <input
                    aria-label="Select month"
                    type="month"
                    value={month}
                    onChange={(e) => setMonth(e.target.value)}
                    className="outline-none bg-transparent text-sm"
                  />
                </div>
                <button
                  onClick={() => {
                    setLoading(true);
                    setTimeout(() => setLoading(false), 600);
                  }}
                  className="inline-flex items-center gap-2 px-3 py-2 rounded-md border border-neutral-800 hover:bg-neutral-800"
                >
                  <Refresh /> Refresh
                </button>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <button onClick={downloadCSV} className="px-3 py-2 rounded-md bg-yellow-600 text-black font-medium hover:brightness-95 shadow-sm flex items-center gap-2">
                <Download /> CSV
              </button>
              <button onClick={downloadJSON} className="px-3 py-2 rounded-md border border-neutral-800 hover:bg-neutral-800 flex items-center gap-2">
                <Download /> JSON
              </button>
            </div>
          </div>
        </motion.header>

        {loading && (
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {[1, 2, 3].map((i) => (
                <div key={i} className="h-28 rounded-xl animate-pulse" style={{ background: 'linear-gradient(90deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01))', border: '1px solid rgba(255,255,255,0.03)'}} />
              ))}
            </div>
          </div>
        )}

        {error && (
          <div className="rounded-xl p-4 bg-red-900 text-red-200">Error: {error}</div>
        )}

        {!loading && data && (
          <main className="space-y-6">
            {/* KPI row */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/** KPI component **/}
              <motion.div whileHover={{ y: -6 }} className={`rounded-xl p-4 ${CARD} shadow-lg border-l-4 border-yellow-500`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-xs text-neutral-400">Avg Daily Headcount</div>
                    <div className="text-2xl font-bold">{data.avgDailyHeadcount ?? '—'}</div>
                    <div className="text-xs text-neutral-500 mt-1">Monthly average of unique headcount</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ background: 'rgba(212,175,55,0.07)'}}>
                    <Users className="text-yellow-300" />
                  </div>
                </div>
              </motion.div>

              <motion.div whileHover={{ y: -6 }} className={`rounded-xl p-4 ${CARD} shadow-lg border-l-4 border-emerald-500`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-xs text-neutral-400">Distinct People</div>
                    <div className="text-2xl font-bold">{data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}</div>
                    <div className="text-xs text-neutral-500 mt-1">Who recorded at least one swipe</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ background: 'rgba(16,185,129,0.07)'}}>
                    <User className="text-emerald-400" />
                  </div>
                </div>
              </motion.div>

              <motion.div whileHover={{ y: -6 }} className={`rounded-xl p-4 ${CARD} shadow-lg border-l-4 border-yellow-500`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-xs text-neutral-400">Days in Month</div>
                    <div className="text-2xl font-bold">{data.summary?.daysInMonth ?? (data.days?.length ?? days.length)}</div>
                    <div className="text-xs text-neutral-500 mt-1">{month}</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ background: 'rgba(245,158,11,0.07)'}}>
                    <Calendar className="text-amber-400" />
                  </div>
                </div>
              </motion.div>
            </div>

            {/* Charts */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
              <motion.div layout className={`col-span-2 rounded-xl p-4 ${CARD} shadow-lg`}>
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <TrendingUp className="text-yellow-400" />
                    <h3 className="font-semibold">Peak Occupancy</h3>
                  </div>
                  <div className="text-sm text-neutral-400">Daily peaks across the month</div>
                </div>
                <div style={{ height: 300 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data.peakOccupancy || []} margin={{ top: 6, right: 12, left: 0, bottom: 6 }}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.03)" />
                      <XAxis dataKey="date" tickFormatter={(d) => d.slice(8)} stroke="rgba(255,255,255,0.5)" />
                      <YAxis stroke="rgba(255,255,255,0.5)" />
                      <Tooltip formatter={(v) => [v, "Peak"]} contentStyle={{ borderRadius: 8, background: '#111827', color: '#fff', border: '1px solid rgba(255,255,255,0.04)'}} />
                      <Bar dataKey="peak" fill={GOLD} radius={[6, 6, 0, 0]} />
                      <Line type="monotone" dataKey="peak" stroke="#60A5FA" strokeWidth={2} dot={false} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </motion.div>

              <motion.div layout className={`rounded-xl p-4 ${CARD} shadow-lg`}>
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <PieChartIcon className="text-yellow-400" />
                    <h3 className="font-semibold">People by Type</h3>
                  </div>
                  <div className="text-sm text-neutral-400">Breakdown of personnel</div>
                </div>
                <div style={{ height: 220 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie data={personnelDistribution} dataKey="value" nameKey="name" outerRadius={70} innerRadius={36} paddingAngle={4}>
                        {personnelDistribution.map((entry, idx) => (
                          <Cell key={`c-${idx}`} fill={COLORS[idx % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>

                <div className="mt-4 grid grid-cols-1 gap-2 text-sm">
                  {personnelDistribution.map((p, i) => (
                    <div key={p.name} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full" style={{ background: COLORS[i % COLORS.length] }} />
                        <div className="text-neutral-200">{p.name}</div>
                      </div>
                      <div className="text-sm font-semibold">{p.value}</div>
                    </div>
                  ))}
                </div>
              </motion.div>
            </div>

            {/* Table & Controls */}
            <div className={`rounded-xl p-4 ${CARD} shadow-lg`}>
              <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-4">
                <div className="flex items-center gap-3 w-full lg:w-auto">
                  <div className="relative flex-1">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Search className="text-neutral-400" />
                    </div>
                    <input value={q} onChange={(e) => setQ(e.target.value)} placeholder="Search name or ID..." className="w-full pl-10 pr-4 py-2 rounded-md bg-neutral-800 border border-neutral-800" />
                  </div>

                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FiFilter className="text-neutral-400" />
                    </div>
                    <select value={personnelFilter} onChange={(e) => setPersonnelFilter(e.target.value)} className="pl-10 pr-4 py-2 rounded-md bg-neutral-800 border border-neutral-800">
                      {personnelTypes.map((pt) => (
                        <option key={pt} value={pt}>{pt}</option>
                      ))}
                    </select>
                  </div>

                  <label className="flex items-center gap-2 text-sm">
                    <FiCheckSquare />
                    <input type="checkbox" checked={showTopOnly} onChange={(e) => setShowTopOnly(e.target.checked)} />
                    Show top 50
                  </label>
                </div>

                <div className="text-sm text-neutral-400">Showing <strong className="text-neutral-100">{filteredAttendance.length}</strong> records • Updated: <span>{new Date().toLocaleTimeString()}</span></div>
              </div>

              <div className="overflow-auto border border-neutral-800 rounded-lg">
                <table className="min-w-full">
                  <thead className="text-xs text-neutral-400 uppercase tracking-wider">
                    <tr>
                      <th className="px-3 py-2 text-left">#</th>
                      <th className="px-3 py-2 text-left">Employee</th>
                      <th className="px-3 py-2 text-left">Type</th>
                      {days.map((d) => (
                        <th key={d} className="px-1 py-2 text-center">{humanDay(d)}</th>
                      ))}
                      <th className="px-3 py-2 text-right">Present</th>
                      <th className="px-3 py-2 text-right">%</th>
                    </tr>
                  </thead>
                  <tbody>
                    {(showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance).map((r, idx) => (
                      <tr key={(r.employeeId || idx) + "-" + idx} className={`border-t border-neutral-800 hover:bg-neutral-800/50 transition-colors`}>
                        <td className="px-3 py-2 text-sm text-neutral-200">{idx + 1}</td>
                        <td className="px-3 py-2">
                          <div className="flex items-center gap-3">
                            <div className="w-9 h-9 rounded-full flex items-center justify-center bg-neutral-800 text-neutral-200 font-semibold">{(r.name || "?").split(" ").map((s) => s[0]).slice(0, 2).join("")}</div>
                            <div>
                              <div className="text-sm font-medium text-neutral-100">{r.name}</div>
                              <div className="text-xs text-neutral-400">{r.employeeId}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-3 py-2 text-sm text-neutral-300">{r.personnelType}</td>
                        {days.map((d) => {
                          const v = r[d];
                          const isP = String(v).toUpperCase() === "P" || v === true;
                          return (
                            <td key={d} className="px-1 py-2 text-center">
                              <div className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-semibold ${isP ? 'bg-emerald-500 text-black' : 'bg-neutral-800 text-neutral-400'}`}>
                                {isP ? 'P' : 'A'}
                              </div>
                            </td>
                          );
                        })}
                        <td className="px-3 py-2 text-sm text-neutral-100 text-right">{r.daysPresent ?? '—'}</td>
                        <td className="px-3 py-2 text-right"><span className={`inline-block px-2 py-1 rounded-full text-xs font-semibold ${pctColor(r.attendancePercent)}`}>{r.attendancePercent ? `${r.attendancePercent}%` : '—'}</span></td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <footer className="text-xs text-neutral-400">Notes: Present = any InDirection swipe (Asia/Kolkata). Data fetched from <code className="bg-neutral-800 px-1 py-0.5 rounded">/api/monthly-summary?month=YYYY-MM</code>.</footer>
          </main>
        )}
      </div>
    </div>
  </div>
</div>

); }

