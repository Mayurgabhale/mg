after you add this overall is gettin g wonrg
see this
 "totalVisitedToday": 264,
  "visitedToday": {
    "employees": 213,
    "contractors": 51,
    "total": 264
  }
}

this is wrong on this this time it is not possible that much count so you write wrong code. 

{
  "asOf": "2025-09-11T06:00:00.000Z",
  "summary": [
    {
      "zone": "Red Zone - Outer Area",
      "count": 1
    },
    {
      "zone": "Reception Area",
      "count": 14
    },
    {
      "zone": "2nd Floor, Pune",
      "count": 5
    },
    {
      "zone": "Orange Zone",
      "count": 5
    },
    {
      "zone": "Tower B",
      "count": 4
    },
    {
      "zone": "Assembly Area",
      "count": 1
    },
    {
      "zone": "Yellow Zone",
      "count": 2
    }
  ],
  "zoneBreakdown": [
    {
      "zone": "Red Zone - Outer Area",
      "Property Management": 1,
      "total": 1
    },
    {
      "zone": "Reception Area",
      "Visitor": 10,
      "Employee": 3,
      "Property Management": 1,
      "total": 14
    },
    {
      "zone": "2nd Floor, Pune",
      "Employee": 3,
      "Contractor": 1,
      "Property Management": 1,
      "total": 5
    },
    {
      "zone": "Orange Zone",
      "Temp Badge": 1,
      "Visitor": 4,
      "total": 5
    },
    {
      "zone": "Tower B",
      "Employee": 2,
      "Property Management": 2,
      "total": 4
    },
    {
      "zone": "Assembly Area",
      "Employee": 1,
      "total": 1
    },
    {
      "zone": "Yellow Zone",
      "Contractor": 2,
      "total": 2
    }
  ],
  "floorBreakdown": [
    {
      "floor": "Podium Floor",
      "Property Management": 2,
      "Visitor": 14,
      "Employee": 4,
      "Temp Badge": 1,
      "Contractor": 2,
      "total": 23
    },
    {
      "floor": "2nd Floor",
      "Employee": 3,
      "Contractor": 1,
      "Property Management": 1,
      "total": 5
    },
    {
      "floor": "Tower B",
      "Employee": 2,
      "Property Management": 2,
      "total": 4
    }
  ],
  "details": {
    "Red Zone - Outer Area": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:22:49",
        "EmployeeID": "0",
        "ObjectName1": "Patil, Shivanand (Teapoint)",
        "CardNumber": "413971",
        "PersonnelType": "Property Management",
        "zone": "Red Zone - Outer Area",
        "door": "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)",
        "Direction": "OutDirection"
      }
    ],
    "Reception Area": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "01:40:52",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_178",
        "CardNumber": "418974",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:08:07",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_144",
        "CardNumber": "414054",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "01:02:58",
        "EmployeeID": "323996",
        "ObjectName1": "Patil, Dhiraj Ravindra",
        "CardNumber": "411121",
        "PersonnelType": "Employee",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:34:00",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_236",
        "CardNumber": "413952",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:33:55",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_172",
        "CardNumber": "419261",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:19:50",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_229",
        "CardNumber": "409886",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:21:30",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_146",
        "CardNumber": "418954",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_GREEN_RECEPTION ENTRY-DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:31:13",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_180",
        "CardNumber": "419255",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:33:58",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_240",
        "CardNumber": "413850",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:48:39",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_173",
        "CardNumber": "419260",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:48:43",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_177",
        "CardNumber": "419253",
        "PersonnelType": "Visitor",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "02:41:50",
        "EmployeeID": "312609",
        "ObjectName1": "Mundra, Robin",
        "CardNumber": "619958",
        "PersonnelType": "Employee",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_P-1 TURNSTILE 4-DOOR",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "03:30:21",
        "EmployeeID": "325804",
        "ObjectName1": "Gaddam, John Pascal",
        "CardNumber": "410362",
        "PersonnelType": "Employee",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "11:23:58",
        "EmployeeID": "0",
        "ObjectName1": "Singh, Harvinder",
        "CardNumber": "410333",
        "PersonnelType": "Property Management",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_YELLOW_RECEPTION ENTRY-DOOR",
        "Direction": "OutDirection"
      }
    ],
    "2nd Floor, Pune": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:17:49",
        "EmployeeID": "325935",
        "ObjectName1": "Patidar, Nisha",
        "CardNumber": "615884",
        "PersonnelType": "Employee",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:34:59",
        "EmployeeID": "W0026467",
        "ObjectName1": "Khamkar, Shraddha",
        "CardNumber": "620046",
        "PersonnelType": "Contractor",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "02:05:00",
        "EmployeeID": "323991",
        "ObjectName1": "Pundir, Saurabh",
        "CardNumber": "612213",
        "PersonnelType": "Employee",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "11:29:44",
        "EmployeeID": "0",
        "ObjectName1": "Karajagi, Riyaz",
        "CardNumber": "411160",
        "PersonnelType": "Property Management",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "11:29:24",
        "EmployeeID": "328504",
        "ObjectName1": "P, Sai Poojith",
        "CardNumber": "619975",
        "PersonnelType": "Employee",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B",
        "Direction": "InDirection"
      }
    ],
    "Orange Zone": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "04:25:13",
        "EmployeeID": "0",
        "ObjectName1": "India, TEMP_PUN_022",
        "CardNumber": "411122",
        "PersonnelType": "Temp Badge",
        "zone": "Orange Zone",
        "door": "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "04:28:06",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_174",
        "CardNumber": "419259",
        "PersonnelType": "Visitor",
        "zone": "Orange Zone",
        "door": "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "04:28:53",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_218",
        "CardNumber": "409817",
        "PersonnelType": "Visitor",
        "zone": "Orange Zone",
        "door": "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "04:29:32",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_248",
        "CardNumber": "409889",
        "PersonnelType": "Visitor",
        "zone": "Orange Zone",
        "door": "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "04:30:13",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_223",
        "CardNumber": "410413",
        "PersonnelType": "Visitor",
        "zone": "Orange Zone",
        "door": "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR",
        "Direction": "InDirection"
      }
    ],
    "Tower B": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "01:34:01",
        "EmployeeID": "321630",
        "ObjectName1": "Jathar, Prasad Narayan",
        "CardNumber": "608449",
        "PersonnelType": "Employee",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "02:36:54",
        "EmployeeID": "318502",
        "ObjectName1": "Nene, Nikhil",
        "CardNumber": "411132",
        "PersonnelType": "Employee",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "11:22:51",
        "EmployeeID": "0",
        "ObjectName1": "Phukan, Nilmani",
        "CardNumber": "410372",
        "PersonnelType": "Property Management",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR",
        "Direction": "OutDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "10:08:35",
        "EmployeeID": "0",
        "ObjectName1": "Shaikh, Sharif",
        "CardNumber": "410334",
        "PersonnelType": "Property Management",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_RECEPTION LEFT DOOR",
        "Direction": "OutDirection"
      }
    ],
    "Assembly Area": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "00:59:56",
        "EmployeeID": "328809",
        "ObjectName1": "Shrivastava, Akrati",
        "CardNumber": "620035",
        "PersonnelType": "Employee",
        "zone": "Assembly Area",
        "door": "APAC_IN_PUN_PODIUM_MAIN PODIUM LEFT ENTRY-DOOR NEW",
        "Direction": "OutDirection"
      }
    ],
    "Yellow Zone": [
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "09:54:54",
        "EmployeeID": "W0024619",
        "ObjectName1": "Choudhari, Manisha",
        "CardNumber": "615828",
        "PersonnelType": "Contractor",
        "zone": "Yellow Zone",
        "door": "APAC_IN_PUN_PODIUM_GSOC DOOR Restricted door",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "09:44:38",
        "EmployeeID": "W0025526",
        "ObjectName1": "More, Omkar",
        "CardNumber": "619961",
        "PersonnelType": "Contractor",
        "zone": "Yellow Zone",
        "door": "APAC_IN_PUN_PODIUM_YELLOW_REPRO STORE-DOOR Restricted door",
        "Direction": "InDirection"
      }
    ]
  },
  "personnelSummary": {
    "employees": 9,
    "contractors": 23
  },
  },
  "personnelBreakdown": [
    {
      "personnelType": "Property Management",
      "count": 5
    },
    {
      "personnelType": "Visitor",
      "count": 14
    },
    {
      "personnelType": "Employee",
      "count": 9
    },
    {
      "personnelType": "Temp Badge",
      "count": 1
    },
    {
      "personnelType": "Contractor",
      "count": 3
    }
  ],
  "totalVisitedToday": 264,
  "visitedToday": {
    "employees": 213,
    "contractors": 51,
    "total": 264
  }
}

read this code carefully, 






// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\liveOccupancyController.js

const { DateTime }   = require('luxon');
// const { poolConnect, pool, sql } = require('../config/db');
const { sql, getPool } = require('../config/db');

const doorZoneMap    = require('../data/doorZoneMap');
const zoneFloorMap   = require('../data/zoneFloorMap');

const ertMembers = require('../data/puneErtMembers.json');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();

//update
function getTodayString() {
  return DateTime.now()
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');
}

function normalizeZoneKey(rawDoor, rawDir) {
  // 1) Ensure it’s a string and trim whitespace
  let door = String(rawDoor || '').trim();

  // 2) Strip any "_HH:MM:SS" or "_XX:XX:XX" suffix (hex codes or times at end)
  door = door.replace(/_[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');

  // 3) Collapse multiple spaces into one, then uppercase
  door = door.replace(/\s+/g, ' ').toUpperCase();

  // 4) Pick the direction token exactly as doorZoneMap expects
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';

  return `${door}___${dir}`;
}

/** Normalize "Last, First" or "First Last" → lowercase "first last" */
function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

/**
 * Map a swipe’s door+direction → zone using exactly doorZoneMap.
 * If not in doorZoneMap, log once and return "Unknown Zone".
 * If OutDirection but not "Out of office", strip off " Zone" suffix.
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  const zone = doorZoneMap[key];

  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door–direction key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // If it's an OutDirection but not the real "Out of office", remove trailing " Zone"
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    return zone.replace(/\s+Zone$/i, '');
  }

  return zone;
}

async function fetchNewEvents(since) {
  // await the shared pool promise instead of poolConnect
  const pool = await getPool();
  const req  = pool.request();
  req.input('since', sql.DateTime2, since);

// console.log('🔎 [Pune] fetchNewEvents called with since =', since.toISOString());
  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >@since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      FORMAT(LocaleMessageTime, 'hh:mm tt') AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // console.log(`📥 [Pune] fetched ${recordset.length} rows:`,
    // recordset.map(r => r.LocaleMessageTime.toISOString()));

  return recordset;
}

async function buildOccupancy(allEvents) {
  const current      = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw  = mapDoorToZone(Door, Direction);
    const zone     = zoneRaw && zoneRaw.toLowerCase();

 // ─── 1) If we can’t map door+direction to a valid zone, skip this event entirely. ───
    //     (prevents "Unknown Zone" from ever entering uniquePeople/current)
    if (zoneRaw === 'Unknown Zone') {
      // We warned once in mapDoorToZone already; just ignore.
      continue;
    }

    const zoneLower = zoneRaw.toLowerCase();



    // 1) True "Out of office" → full eviction
    if (Direction === 'OutDirection' && zone === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }

if (Direction === 'OutDirection') {
  // Compare lowercased zone safely
  const zoneLower = String(zone).toLowerCase();

  // Only full eviction when it's the real "Out of office"
  if (zoneLower === 'out of office') {
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  } else {
    // Keep the person in current headcount for all other OutDirection cases
    // Update their last-seen metadata (zone, door, Direction)
    uniquePeople.set(dedupKey, PersonnelType);
    current[dedupKey] = {
      Dateonly, Swipe_Time,
      EmployeeID, ObjectName1, CardNumber,
      PersonnelType,
      zone: zoneRaw,
      door: Door,
      Direction
    };
  }
  continue;
}
    // 3) InDirection → normal check-in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 4) Catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // live headcounts (only from uniquePeople, which has already evicted all true out-of-office)
  let employeeCount   = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build zone→people map, but filter out any out-of-office at this final step too
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    const zKey = emp.zone.toLowerCase();
    if (zKey === 'out of office') continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  // zoneDetails
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0) + 1;
        return acc;
      }, {});
      return [ zone, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  // floorBreakdown
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt]||0) + c;
    }
  }


  const ertStatus = Object.fromEntries(
    Object.entries(ertMembers).map(([role, members]) => {
      const list = members.map(m => {
        // pick the correct name field (JSON uses "Name")
        const rawName = m.name || m.Name;
        const expected = normalizePersonName(rawName);


        // find a matching swipe in current[]
        const matchEvt = Object.values(current).find(e => {
          return normalizePersonName(e.ObjectName1) === expected;
        });

        return {
          ...m,
          present: !!matchEvt,
          zone:    matchEvt ? matchEvt.zone : null
        };
     });
      return [ role, list ];
    })
  );

  return {
    asOf:             new Date().toISOString(),
    summary:          Object.entries(zoneDetails).map(([z,d])=>({ zone: z, count: d.total })),
    zoneBreakdown:    Object.entries(zoneDetails).map(([z,d])=>({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown:   Object.entries(floorMap).map(([f,d])=>({ floor: f, ...d.byPersonnelType, total: d.total })),
    details:          zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
     ertStatus,

  personnelBreakdown: (() => {
    const map = new Map();
    // uniquePeople: Map<dedupKey, PersonnelType>
    for (const pt of uniquePeople.values()) {
      map.set(pt, (map.get(pt) || 0) + 1);
    }
    return Array.from(map, ([personnelType, count]) => ({ personnelType, count }));
  })(),
  };
}

/**
 * Build “visited today” from the same in‐memory stream
 */
function buildVisitedToday(allEvents) {
  // “Today” in Asia/Kolkata, formatted as “yyyy-MM-dd”
  const today = DateTime.now()
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // Use evt.Dateonly (already “yyyy-MM-dd” in local zone) to pick out today's InDirection swipes
  const todayIns = allEvents.filter(evt => {
    return (
      evt.Direction === 'InDirection' &&
      evt.Dateonly === today
    );
  });

  // Dedupe by PersonGUID → keep the latest swipe
  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());

  // Separate employees vs contractors
  const employees = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}


  // ******************
// Helper: fetch events in the 24h window ending at `until` (inclusive)
async function fetchEventsWindow(until) {
  const pool = await getPool();
  const req  = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > DATEADD(HOUR, -24, @until)
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      FORMAT(LocaleMessageTime, 'hh:mm tt') AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

function buildVisitedForDate(allEvents, atDate) {
  const asOfLocalDate = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  const todayIns = allEvents.filter(evt => evt.Direction === 'InDirection' && evt.Dateonly === asOfLocalDate);

  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }
  const finalList = Array.from(dedup.values());
  const employees = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management'].includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;
  return { employees, contractors, total: finalList.length };
}


// Add this function (directly above or below your other fetch helpers)
async function fetchEventsForDate(atDate) {
  // atDate is a JS Date representing the requested instant (UTC ISO string from the client)
  const pool = await getPool();
  const req  = pool.request();

  // Requested IST calendar day (string)
  const istDayStr = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // IST start-of-day -> convert to UTC for SQL window start
  const istStart = DateTime.fromISO(istDayStr, { zone: 'Asia/Kolkata' }).startOf('day').toUTC().toJSDate();

  // Upper bound: use the requested instant (inclusive)
  // Use the exact JS Date provided (which is UTC instant)
  const endUTC = DateTime.fromJSDate(atDate, { zone: 'utc' }).toUTC().toJSDate();

  req.input('startUtc', sql.DateTime2, istStart);
  req.input('endUtc',   sql.DateTime2, endUTC);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        -- IMPORTANT: convert the journal time to the "LocaleMessageTime" instant and compare in UTC
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @startUtc
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @endUtc
    )
    SELECT
      LocaleMessageTime,
      -- date/ time fields are returned but we'll normalize in JS to be safe
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // Normalize recordset so LocaleMessageTime becomes a JS Date and Dateonly/Swipe_Time are recomputed in IST
  const normalized = recordset.map(r => {
    if (!r || !r.LocaleMessageTime) return null;
    // mssql driver usually returns JS Date for datetime columns
    const rowDt = (r.LocaleMessageTime instanceof Date)
      ? DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' })
      : DateTime.fromISO(String(r.LocaleMessageTime), { zone: 'utc' });

    if (!rowDt || !rowDt.isValid) return null;

    r.LocaleMessageTime = rowDt.toJSDate();
    // recompute Dateonly and Swipe_Time explicitly in IST to ensure consistency
    r.Dateonly = rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
    r.Swipe_Time = rowDt.setZone('Asia/Kolkata').toFormat('HH:mm:ss');
    return r;
  }).filter(Boolean);

  // As a final sanity: keep only rows that are on the requested IST day and <= requested instant
  const requestedIstDay = DateTime.fromJSDate(atDate, { zone: 'utc' }).setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
  const atInstantUtc = DateTime.fromJSDate(atDate, { zone: 'utc' });
  return normalized.filter(r => {
    const rowDt = DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' });
    return rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd') === requestedIstDay
      && rowDt <= atInstantUtc;
  });
}






// Handler: GET /api/occupancy-at?at=<ISO-8601>
// exports.getSnapshotAt = async (req, res) => {
//   try {
//     const atRaw = req.query.at;
//     if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

//     const atDate = new Date(atRaw);
//     if (Number.isNaN(atDate.getTime())) {
//       return res.status(400).json({ error: 'invalid "at" timestamp' });
//     }

//     // fetch events in the 24h window ending at atDate
//     const events = await fetchEventsWindow(atDate);

//     const occupancy = await buildOccupancy(events);
//     const visitedStats = buildVisitedForDate(events, atDate);

//     occupancy.totalVisitedToday = visitedStats.total;
//     occupancy.visitedToday = {
//       employees: visitedStats.employees,
//       contractors: visitedStats.contractors,
//       total: visitedStats.total
//     };
//     occupancy.asOf = atDate.toISOString();

//     return res.json(occupancy);
//   } catch (err) {
//     console.error('getSnapshotAt error:', err);
//     return res.status(500).json({ error: 'Internal Server Error' });
//   }
// };





// // Replace the entire getSnapshotAt handler with this
// exports.getSnapshotAt = async (req, res) => {
//   try {
//     const atRaw = req.query.at;
//     if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

//     const atDate = new Date(atRaw);
//     if (Number.isNaN(atDate.getTime())) {
//       return res.status(400).json({ error: 'invalid "at" timestamp' });
//     }

//     // requested IST calendar day (string "yyyy-LL-dd")
//     const requestedIstDay = DateTime.fromJSDate(atDate, { zone: 'utc' })
//       .setZone('Asia/Kolkata')
//       .toFormat('yyyy-LL-dd');

//     // fetch a 24h SQL window ending at atDate (keeps SQL simple/reusable)
//     let events = await fetchEventsWindow(atDate);

//     // helper: normalize row into a Luxon DateTime (treat LocaleMessageTime as UTC instant)
//     const toRowDateTime = (r) => {
//       const v = r && r.LocaleMessageTime;
//       if (!v) return null;
//       // If driver returned a JS Date
//       if (v instanceof Date) return DateTime.fromJSDate(v, { zone: 'utc' });
//       // If it's a number (epoch ms)
//       if (typeof v === 'number') return DateTime.fromMillis(v, { zone: 'utc' });
//       // Otherwise try parsing as ISO string and force UTC interpretation
//       const s = String(v).trim();
//       let dt = DateTime.fromISO(s, { zone: 'utc' });
//       if (!dt.isValid) dt = DateTime.fromSQL(s, { zone: 'utc' });
//       return dt.isValid ? dt : null;
//     };

//     // Final defensive filter: keep only rows whose IST calendar-day === requested day
//     // AND whose instant <= requested instant (in UTC)
//     const atInstantUtc = DateTime.fromJSDate(atDate, { zone: 'utc' });
//     events = events.filter(r => {
//       const rowDt = toRowDateTime(r);
//       if (!rowDt) return false;
//       const rowIstDay = rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
//       if (rowIstDay !== requestedIstDay) return false;
//       return rowDt <= atInstantUtc;
//     });

//     // Now build occupancy / visited from strictly filtered events
//     const occupancy = await buildOccupancy(events);
//     const visitedStats = buildVisitedForDate(events, atDate);

//     occupancy.totalVisitedToday = visitedStats.total;
//     occupancy.visitedToday = visitedStats;
//     occupancy.asOf = atDate.toISOString();

//     return res.json(occupancy);
//   } catch (err) {
//     console.error('getSnapshotAt error:', err);
//     return res.status(500).json({ error: 'Internal Server Error' });
//   }
// };






// Replace your getSnapshotAt with this (calls fetchEventsForDate)
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // Fetch only rows that belong to the IST calendar day and are <= requested instant
    const events = await fetchEventsForDate(atDate);

    // Build occupancy from filtered events
    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = visitedStats;
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};

// Handler: GET /api/current-occupancy
exports.getCurrentOccupancy = async (req, res) => {
  try {
    const until = new Date();
    const events = await fetchEventsWindow(until);
    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, until);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    occupancy.asOf = until.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getCurrentOccupancy error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};
  // *******************

/** Server‐Sent‐Events endpoint */
exports.getLiveOccupancy = async (req, res) => {
 
  try {
    // wait for the shared pool to be ready
    await getPool();

    res.writeHead(200, {
      'Content-Type':  'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection':    'keep-alive'
    });
    res.write('\n');
    // pull last 24h on startup
    // let lastSeen = new Date(Date.now() - 24*60*60*1000);
    let lastSeen = new Date();
    const events = [];

    const push = async () => {

    // Option B: Recompute date from the JS timestamp in Asia/Kolkata:
    const todayKolkata = DateTime.now().setZone('Asia/Kolkata').toISODate();
    for (let i = events.length - 1; i >= 0; i--) {
      const ts = DateTime.fromJSDate(events[i].LocaleMessageTime, { zone: 'utc' })
                     .setZone('Asia/Kolkata')
                     .toISODate();
      if (ts !== todayKolkata) {
        events.splice(i, 1);
      }
    }

//  console.log('🔄 [PUSH] Running at:', new Date().toISOString());
  // console.log('🔍 Last seen swipe time:', lastSeen);

      const fresh = await fetchNewEvents(lastSeen);
      //  console.log('📥 New events fetched:', fresh.length);
      if (fresh.length) {
        // lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
         lastSeen = new Date();
        events.push(...fresh);
      }
      // build occupancy + today counts
      const occupancy  = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday      = {
        employees:   todayStats.employees,
        contractors: todayStats.contractors,
        total:       todayStats.total
      };

      // add an `id:` so EventSource treats even identical payloads as “new”
      const sid = Date.now();
      res.write(`id: ${sid}\n`);
      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
      if (typeof res.flush === 'function') {
        res.flush();
      }
     };
    await push();
    const timer = setInterval(push, 2000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};


