// src/components/ZoneTowersChart.jsx
import React from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Cell,
  LabelList,
} from "recharts";
import { Card } from "react-bootstrap";

// Custom tower gradients
const ZONE_TOWERS = {
  "Red Zone": ["#FF4C4C", "#B22222"],
  "Yellow Zone": ["#FFD700", "#E6AC00"],
  "Orange Zone": ["#FFA500", "#CC7000"],
  "Green Zone": ["#32CD32", "#228B22"],
  "Blue Zone": ["#1E90FF", "#0047AB"],
  "Purple Zone": ["#8A2BE2", "#4B0082"],
};

const DEFAULT_GRADIENT = ["#AAAAAA", "#555555"];

export default function ZoneTowersChart({ summary = [] }) {
  if (!summary.length) {
    return (
      <Card body className="bg-dark text-white text-center">
        No zone data available
      </Card>
    );
  }

  return (
    <Card className="mb-4 shadow-lg border-0">
      <Card.Header className="bg-dark text-warning text-center fw-bold">
        <h5 className="mb-0">Pune Area-wise Headcount Towers</h5>
      </Card.Header>

      <Card.Body style={{ height: "60vh", backgroundColor: "#1a1a1a", padding: "1rem" }}>
        <ResponsiveContainer width="100%" height="100%">
          <BarChart
            data={summary}
            margin={{ top: 20, right: 20, left: 20, bottom: 20 }}
          >
            <CartesianGrid strokeDasharray="3 3" stroke="#444" />
            <XAxis
              dataKey="zone"
              tick={{ fill: "#FFD100", fontSize: 12 }}
              interval={0}
              angle={-20}
              textAnchor="end"
            />
            <YAxis tick={{ fill: "#FFD100" }} />

            {/* Gradient defs for towers */}
            <defs>
              {summary.map((entry) => {
                const grad = ZONE_TOWERS[entry.zone] || DEFAULT_GRADIENT;
                return (
                  <linearGradient
                    id={`grad-${entry.zone.replace(/\s+/g, "-")}`}
                    key={entry.zone}
                    x1="0"
                    y1="0"
                    x2="0"
                    y2="1"
                  >
                    <stop offset="0%" stopColor={grad[0]} />
                    <stop offset="100%" stopColor={grad[1]} />
                  </linearGradient>
                );
              })}
            </defs>

            <Bar dataKey="count" radius={[8, 8, 0, 0]} stroke="#fff" strokeWidth={1}>
              {summary.map((entry, idx) => {
                const fill = ZONE_TOWERS[entry.zone]
                  ? `url(#grad-${entry.zone.replace(/\s+/g, "-")})`
                  : `url(#grad-Default)`;
                return <Cell key={`cell-${idx}`} fill={fill} />;
              })}

              <LabelList
                dataKey="count"
                position="top"
                style={{ fill: "#FFD100", fontWeight: "bold" }}
              />
            </Bar>

            <Tooltip
              cursor={{ fill: "rgba(255,255,255,0.1)" }}
              content={({ active, payload }) => {
                if (!active || !payload || !payload.length) return null;
                const { zone, count } = payload[0].payload;
                return (
                  <div
                    style={{
                      backgroundColor: "#000",
                      border: "1px solid #FFD100",
                      borderRadius: 4,
                      padding: "8px",
                      color: "#FFD100",
                    }}
                  >
                    <div><strong>{zone}</strong></div>
                    <div>Headcount: {count}</div>
                  </div>
                );
              }}
            />
          </BarChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}