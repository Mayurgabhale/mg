curl "http://localhost:5000/api/occupancy-at?at=2025-09-10T23:59:59


....
curl "http://localhost:5000/api/occupancy-at?at=2025-09-10T23:59:59&tz=Asia/Kolkata"


 ...

exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    // optional: clients can pass ?tz=Asia/Kolkata (default)
    const tz = req.query.tz || 'Asia/Kolkata';

    // detect if incoming string includes an explicit offset (Z or +HH or -HH:mm)
    const hasExplicitOffset = /(?:Z|[+\-]\d{2}(:\d{2})?)$/.test(atRaw);

    let dt;
    if (hasExplicitOffset) {
      // parse absolute instant (uses provided offset) then convert to requested tz
      dt = DateTime.fromISO(atRaw, { setZone: true }).setZone(tz);
    } else {
      // parse naive wall-clock time as if it's in the requested tz
      dt = DateTime.fromISO(atRaw, { zone: tz, setZone: true });
    }

    if (!dt.isValid) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // Convert to a JS Date representing the exact UTC instant to give to SQL
    const atDate = dt.toUTC().toJSDate();

    console.log(
      '[getSnapshotAt] atRaw:',
      atRaw,
      'parsedZone:',
      tz,
      'local (tz) ISO:',
      dt.toISO(),
      'atDate (UTC ISO for SQL):',
      atDate.toISOString()
    );

    // fetch events in the 24h window ending at atDate
    const events = await fetchEventsWindow(atDate);

    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};



....



..

const todayIns = allEvents.filter(evt => {
  if (evt.Direction !== 'InDirection' || evt.Dateonly !== asOfLocalDate) return false;
  const evtTs = evt.LocaleMessageTime ? new Date(evt.LocaleMessageTime) : null;
  if (!evtTs) return false;
  return evtTs <= atDate;
});