// --- Replace the inline filter logic with this helper + usages inside your useEffect ---

// helper inside the same scope as the useEffect (place it just above or inside the useEffect)
const isDetailToday = (d, todayDenver) => {
  if (!d) return false;

  // If DateOnly exists treat it as a date-only value (compare YYYY-MM-DD directly)
  if (d.DateOnly) {
    try {
      const dateOnlyStr = (typeof d.DateOnly === 'string')
        ? d.DateOnly.slice(0, 10)
        : new Date(d.DateOnly).toISOString().slice(0, 10);
      return dateOnlyStr === todayDenver;
    } catch (e) {
      // fallback
      return String(d.DateOnly).slice(0, 10) === todayDenver;
    }
  }

  // Otherwise, use LocaleMessageTime converted to Denver local date
  if (d.LocaleMessageTime) {
    try {
      const dt = new Date(d.LocaleMessageTime);
      const dtStr = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
      return dtStr === todayDenver;
    } catch (e) {
      return String(d.LocaleMessageTime).slice(0, 10) === todayDenver;
    }
  }

  return false;
};

// --- Then replace these lines: ---
//   detailsToday = payload.details.filter(d => {
//     const raw = d.LocaleMessageTime || d.DateOnly;
//     ...
//   });
// with this single call:

detailsToday = (Array.isArray(payload.details) ? payload.details : []).filter(d => isDetailToday(d, todayDenver));