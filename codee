// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

const partitionToDisplay = {
  'AUT.Vienna': { city: 'Vienna', country: 'Austria' },
  'DU.Abu Dhab': { city: 'Dubai', country: 'UAE' },
  'IE.Dublin': { city: 'Dublin', country: 'Ireland' },
  'LT.Vilnius': { city: 'Vilnius', country: 'Lithuania' },
  'MA.Casablanca': { city: 'Casablanca', country: 'Morocco' },
  'RU.Moscow': { city: 'Moscow', country: 'Russia' },
  'UK.London': { city: 'London', country: 'UK' },
  'ES.Madrid': { city: 'Madrid', country: 'Spain' }
};

export default function History() {
  const { partition: partitionParam } = useParams();
  const decodedKey = partitionParam ? decodeURIComponent(partitionParam) : null;

  // Wrap in useMemo to keep stable across renders
  const filteredPartitionKeys = useMemo(
    () => (decodedKey ? [decodedKey] : Object.keys(partitionToDisplay)),
    [decodedKey]
  );

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // NEW: selected partition (from left table) — used to show the right table
  const [selectedPartitionKey, setSelectedPartitionKey] = useState(null);

  // 1) Find the summary entry for the chosen date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const ds = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r => r.date === ds) || null;
  }, [data, pickedDate]);

  // 2) Build that summary table’s rows
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = { US: 'United States', CA: 'Canada' };
    return Object.entries(summaryEntry.partitions)
      .filter(([key]) => filteredPartitionKeys.includes(key))
      .map(([key, vals]) => {
        const disp = partitionToDisplay[key];
        const country = disp ? disp.country : codeToCountry[key.split('.')[0]] || key;
        const city = disp ? disp.city : key;
        return {
          code: key,
          country,
          city,
          employee: vals.Employee ?? 0,
          contractor: vals.Contractor ?? 0,
          total: vals.total ?? 0
        };
      });
  }, [summaryEntry, filteredPartitionKeys]);

  // 3) Build the detail list
  const detailRows = useMemo(() => {
    if (!data || !pickedDate) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // a) all swipes that day for our partitions
    const all = data.details.filter(
      r => filteredPartitionKeys.includes(r.PartitionName2) && r.LocaleMessageTime.startsWith(ds)
    );

    // b) oldest → newest
    all.sort((a, b) => new Date(a.LocaleMessageTime) - new Date(b.LocaleMessageTime));

    // c) last swipe per person
    const lastByPerson = {};
    all.forEach(r => {
      lastByPerson[r.PersonGUID] = r;
    });

    return Object.values(lastByPerson);
  }, [data, pickedDate, filteredPartitionKeys]);

  // Fetch once on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data) return null;

  // Excel export (includes CardNumber)
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r, i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd'),
        Time: format(new Date(r.LocaleMessageTime), 'HH:mm:ss'),
        EmployeeID: r.EmployeeID,
        CardNumber: r.CardNumber,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        CompanyName: r.CompanyName,
        PrimaryLocation: r.PrimaryLocation,
        Door: r.Door,
        Partition: partitionToDisplay[r.PartitionName2]?.city || r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  };

  // Helper: details for the selected partition (right table)
  const detailRowsForSelectedPartition = useMemo(() => {
    if (!selectedPartitionKey) return [];
    return detailRows.filter(r => r.PartitionName2 === selectedPartitionKey);
  }, [detailRows, selectedPartitionKey]);

  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt: 2, pb: 4 }}>
        {/* DatePicker + Summary */}
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px: 2, mb: 2, gap: 1 }}>
            <Box sx={{ width: 200 }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => {
                    setPickedDate(d);
                    setShowDetails(false);
                    setSelectedPartitionKey(null);
                  }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>

            {/* LEFT: Summary table  |  RIGHT: Partition-specific details (new) */}
            <Box sx={{ flex: 1, display: 'flex', gap: 2, alignItems: 'flex-start' }}>
              {/* LEFT TABLE */}
              {/* ...Summary table code remains unchanged... */}

              {/* RIGHT: partition-specific details */}
              <Box sx={{ width: 420, minWidth: 320 }}>
                <Paper elevation={3} sx={{ px: 1, py: 1, border: '3px solid #000', borderRadius: 2 }}>
                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1, textAlign: 'center' }}>
                    {selectedPartitionKey
                      ? `Details — ${partitionToDisplay[selectedPartitionKey]?.city || selectedPartitionKey}`
                      : 'Click a row to view partition details'}
                  </Typography>

                  {selectedPartitionKey ? (
                    detailRowsForSelectedPartition.length > 0 ? (
                      <Table size="small" sx={{ border: '2px solid #000' }}>
                        <TableHead>
                          <TableRow sx={{ bgcolor: '#000' }}>
                            {['Sr', 'Time', 'Emp ID', 'Card', 'Name', 'Type', 'Company', 'Door'].map(h => (
                              <TableCell
                                key={h}
                                align="center"
                                sx={{ color: '#FFC107', fontWeight: 'bold', fontSize: 12, border: '2px solid #000' }}
                              >
                                {h}
                              </TableCell>
                            ))}
                          </TableRow>
                        </TableHead>
                        <TableBody>
                          {detailRowsForSelectedPartition.map((r, i) => (
                            <TableRow key={`${r.PersonGUID}-${i}`}>
                              <TableCell sx={{ border: '2px solid #000' }}>{i + 1}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{format(new Date(r.LocaleMessageTime), 'HH:mm:ss')}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.EmployeeID}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.CardNumber}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.ObjectName1}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.PersonnelType}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.CompanyName}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.Door}</TableCell>
                            </TableRow>
                          ))}
                        </TableBody>
                      </Table>
                    ) : (
                      <Typography
                        variant="body2"
                        sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}
                      >
                        No swipe records for this partition on the selected date.
                      </Typography>
                    )
                  ) : (
                    <Typography
                      variant="body2"
                      sx={{ color: '#666', textAlign: 'center', mt: 2, fontStyle: 'italic' }}
                    >
                      No partition selected.
                    </Typography>
                  )}
                </Paper>
              </Box>
            </Box>
          </Box>
        ) : (
          <Box sx={{ px: 2, mb: 3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d => {
                  setPickedDate(d);
                  setShowDetails(false);
                  setSelectedPartitionKey(null);
                }}
                renderInput={params => <TextField fullWidth {...params} />}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt: 2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}

        {/* Details table (original full view) */}
        {/* ...Full details table code remains unchanged... */}
      </Container>
      <Footer />
    </>
  );
}

