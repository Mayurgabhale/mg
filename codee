const handleExportSummary = () => {
  if (!partitionRows || partitionRows.length === 0) return;

  const workbook = new ExcelJS.Workbook();
  const sheet = workbook.addWorksheet("Summary");

  // headers
  const headers = ["Country", "City", "Employees", "Contractors", "Total"];
  const headerRow = sheet.addRow(headers);
  headerRow.eachCell(cell => {
    cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
    cell.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FFFFC107" }
    };
    cell.alignment = { horizontal: "center" };
    cell.border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" }
    };
  });

  // rows
  partitionRows.forEach(r => {
    sheet.addRow([r.country, r.city, r.employee, r.contractor, r.total]);
  });

  // totals row
  sheet.addRow([
    "Total",
    "",
    partitionRows.reduce((s, r) => s + r.employee, 0),
    partitionRows.reduce((s, r) => s + r.contractor, 0),
    partitionRows.reduce((s, r) => s + r.total, 0)
  ]);

  // autosize
  sheet.columns.forEach(col => {
    let maxLen = 10;
    col.eachCell({ includeEmpty: true }, c => {
      maxLen = Math.max(maxLen, c.value ? c.value.toString().length + 2 : 0);
    });
    col.width = Math.min(maxLen, 30);
  });

  // save
  workbook.xlsx.writeBuffer().then(buf => {
    saveAs(
      new Blob([buf]),
      `summary_${format(pickedDate, "yyyyMMdd")}.xlsx`
    );
  });
};






....


<Box display="flex" justifyContent="center" sx={{ mt:1 }}>
  <Button variant="contained" sx={{ bgcolor:'#FFC107', color:'#000' }}
    onClick={()=>setShowDetails(v=>!v)}>
    {showDetails?'Hide Details':'See Details'}
  </Button>
  {showDetails && (
    <Button variant="outlined" sx={{ ml:2, borderColor:'#FFC107',color:'#FFC107'}}
      onClick={handleExport}>
      Export Details
    </Button>
  )}
  <Button variant="outlined" sx={{ ml:2, borderColor:'#000', color:'#000' }}
    onClick={handleExportSummary}>
    Export Summary
  </Button>
</Box>
