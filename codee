function renderRoleCard(role, membersRaw, filterZone) {
  // helper: case-insensitive "contains"
  const containsCI = (text, needle) =>
    !!(text && needle && String(text).toLowerCase().includes(String(needle).toLowerCase()));

  const members = filterZone
    ? membersRaw.filter(m => {
        if (!m.present) return false;

        // collect possible location fields for robustness
        const candidateLocs = [
          m.zone,
          m.Zone,
          m.Floor,
          m['Base Location'],
          m.liveLocation,
          m.baseLocation,
        ].filter(Boolean);

        // if any member location contains the filterZone -> include
        const memberMatches = candidateLocs.some(loc => containsCI(loc, filterZone));

        // also check the role's base location if defined (safe guard)
        const baseLoc = baseLocationByRole[role];
        const baseMatches = baseLoc ? containsCI(baseLoc, filterZone) : false;

        return memberMatches || baseMatches;
      })
    : membersRaw;

  // Don't render the card if there are no members to show (when filtered)
  if (filterZone && members.length === 0) return null;

  return (
    <Card className="dashboard-card mb-1" key={role}>
      <Card.Header className="dashboard-card-header d-flex align-items-center">
        <span className="role-icon me-2">{roleIcons[role] || <FaUserCog className="text-muted" />}</span>
        <span className="role-title">{role}</span>
        <Badge bg="outline-light" className="ms-2">{members.length}</Badge>
      </Card.Header>
      <Card.Body className="p-1">
        {members.length > 0 ? members.map((m, i) => {
          const location = m.present ? (m.zone || m.Zone || m.liveLocation || 'Unknown Zone') : (baseLocationByRole[role] || 'Unknown');
          return (
            <div key={i} className="member-item pb-0 mb-1">
              <div className="d-flex justify-content-between align-items-start mb-1">
                <div className="d-flex align-items-center">
                  <div className={`member-photo-container ${m.present ? 'present-border' : 'away-border'}`}>
                    <img
                      src={getPhotoSrc(m)}
                      alt={m.name || m.Name || 'Member'}
                      className="member-photo"
                      onError={(e) => {
                        e.currentTarget.onerror = null;
                        e.currentTarget.src = DEFAULT_PHOTO;
                      }}
                    />
                    <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                  </div>
                  <div className="ms-3">
                    <h6 className="mb-0 member-name">{m.name || m.Name}</h6>
                    <small className="text-muted">{m.designation || m.role}</small>
                  </div>
                </div>
                <Badge bg={m.present ? 'success' : 'danger'} className="status-badge">
                  {m.present ? 'Available' : 'Away'}
                </Badge>
              </div>

              <div className="member-contact-info">
                <div className="contact-item">
                  <FaEnvelope className="contact-icon text-primary" />
                  <a href={`mailto:${m.email || m.Email}`} className="contact-link">{m.email || m.Email}</a>
                </div>
                <div className="contact-item">
                  <FaPhone className="contact-icon text-success" />
                  <span className="contact-text">{m.phone || m.Phone}</span>
                </div>
                <div className="contact-item">
                  <FaLocationArrow className="contact-icon text-danger" />
                  <span className="contact-text">{location}</span>
                </div>
              </div>
            </div>
          );
        }) : (
          <div className="text-center py-3 text-muted">
            <FaIdCard size={24} className="mb-2" />
            <p className="mb-0">No members available</p>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}





....

const floorCounts = useMemo(() => {
  const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };
  allMembers.forEach(m => {
    if (!m.present) return;
    const z = (m.zone || m.Zone || m.liveLocation || '').toString().toLowerCase();
    if (z.includes('2nd')) counts['2nd Floor']++;
    else if (z.includes('tower b')) counts['Tower B']++;
    else counts['Podium Floor']++;
  });
  return counts;
}, [allMembers]);