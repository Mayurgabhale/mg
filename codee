rofile Details
 Name	Diwate, Swapnil
 Employee ID	W0024618
 Manager	—
 Active Cards	1
Swipe Details
 Company Name	Poona Security India Pvt. Ltd.
 Primary Location	Pune - Business Bay
 Location	Pune · Podium Floor
 Zone	Yellow Zone
Show More

>>>>>>>>>>>>>>>>>>>>>
Profile Details
 Name	Gaikwad, Neil
 Employee ID	90762427
 Manager	Lloyds Dass
 Active Cards	1
Swipe Details
No recent swipe
 Company Name	—              <<<<
 Primary Location	—   <<<<<<<<<<<
Show More
not disply chekc what is the issue 
carefully, 



// ///////////////////////////////////


import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { FaMapMarkerAlt, FaPalette, FaCalendarAlt, FaClock, FaDoorClosed, FaExchangeAlt } from 'react-icons/fa';
import './EmployeeCard.css';
export default function CurrentLocation({ empId, showMore }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');



  // 1) Add near your other useState declarations
  const [empInfo, setEmpInfo] = useState(null);

  useEffect(() => {
    if (!empId) {
      setLoc(null);
      setError('');
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError('');
    setLoc(null);


    // 2) Inside the same useEffect, after setLoc(null);
    setLoc(null);
    setEmpInfo(null);

    axios
      .get(`http://localhost:5001/api/employees/${empId}`)
      .then((res) => {
        if (cancelled) return;
        setEmpInfo(res.data);
      })
      .catch((err) => {
        if (cancelled) return;
        console.error('Employee load error', err?.message || err);
        // intentionally do not change existing error state handling
      });



    axios
      .get(`http://localhost:5001/api/employees/${empId}/location`)
      .then((res) => {
        if (cancelled) return;
        setLoc(res.data);
      })
      .catch((err) => {
        if (cancelled) return;
        console.error('Location load error', err?.message || err);
        setError('Failed to load location');
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="current-location-card" style={{ marginTop: 1 }}>
      <h4 style={{ margin: '0 0 6px 0', fontSize: 14, color: '#f5a742' }}>Swipe Details</h4>

      {loading && <div style={{ color: '#fff' }}>Loading location…</div>}
      {error && <div style={{ color: '#fff' }}>{error}</div>}
      {/* {!loading && loc && ( */}
      {!loading && (loc || empInfo) && (

        <>
          {!loc.found && <div style={{ color: '#2ced0e' }}>No recent swipe</div>}

          <table className="swipe-details-table">
            <tbody>

              {/* <tr>
                  <td className="label"><FaMapMarkerAlt className="icon location" /> Company Name</td>
                  <td className="value">
                    {empInfo?.CompanyName ?? empInfo?.companyName ?? loc?.CompanyName ?? '—'}
                  </td>
                </tr> */}

              <tr>
                <td className="label"><FaMapMarkerAlt className="icon location" /> Company Name</td>
                <td className="value">
                  {empInfo?.CompanyName
                    ?? empInfo?.companyName
                    ?? empInfo?.company?.name
                    ?? empInfo?.employerName
                    ?? empInfo?.company?.CompanyName
                    ?? loc?.CompanyName
                    ?? '—'}
                </td>
              </tr>
              {/* 
                <tr>
                  <td className="label"><FaMapMarkerAlt className="icon location" /> Primary Location</td>
                  <td className="value">
                    {empInfo?.PrimaryLocation ?? empInfo?.primaryLocation ?? loc?.PrimaryLocation ?? '—'}
                  </td>
                </tr> */}


              <tr>
                <td className="label"><FaMapMarkerAlt className="icon location" /> Primary Location</td>
                <td className="value">
                  {empInfo?.PrimaryLocation
                    ?? empInfo?.primaryLocation
                    ?? empInfo?.primary_location
                    ?? empInfo?.officeLocation
                    ?? empInfo?.company?.primaryLocation
                    ?? loc?.PrimaryLocation
                    ?? '—'}
                </td>
              </tr>

              {/* The rest of the swipe details are shown only when a recent swipe was found */}
              {loc.found && (
                <>
                  <tr>
                    <td className="label"><FaMapMarkerAlt className="icon location" /> Location</td>
                    <td className="value">
                      {loc.partition || '—'}
                      {loc.floor ? ` · ${loc.floor}` : ''}
                    </td>
                  </tr>

                  <tr>
                    <td className="label">
                      <FaPalette className="icon zone" /> {loc.Zone ? 'Zone' : 'Floor'}
                    </td>
                    <td className="value">{loc.Zone || loc.floor || '—'}</td>
                  </tr>

                  {showMore && (
                    <>
                      <tr>
                        <td className="label"><FaCalendarAlt className="icon date" /> Date</td>
                        <td className="value">
                          {loc.timestampUTC
                            ? loc.timestampUTC.split('T')[0]
                            : '—'}
                        </td>
                      </tr>

                      <tr>
                        <td className="label"><FaClock className="icon time" /> Time</td>
                        <td className="value">
                          {loc.timestampUTC
                            ? new Date(
                              `1970-01-01T${loc.timestampUTC.split('T')[1].replace('Z', '')}Z`
                            ).toLocaleTimeString([], {
                              hour: 'numeric',
                              minute: '2-digit',
                              hour12: true,
                              timeZone: 'UTC'
                            })
                            : '—'}
                        </td>
                      </tr>

                      <tr>
                        <td className="label"><FaDoorClosed className="icon door" /> Door</td>
                        <td className="value">{loc.door || '—'}</td>
                      </tr>

                      <tr>
                        <td className="label"><FaExchangeAlt className="icon direction" /> Direction</td>
                        <td className="value">{loc.direction || '—'}</td>
                      </tr>
                    </>
                  )}
                </>
              )}
            </tbody>
          </table>
        </>
      )}



    </div>
  );
}







// // // **********************************************



// C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\EmployeeCard.jsx
import React, { useState } from 'react';
import { FaUser, FaIdBadge, FaUserTie, FaIdCard, FaCheckCircle, FaClone } from 'react-icons/fa';
import CurrentLocation from './CurrentLocation';

import './EmployeeCard.css';

export default function EmployeeCard({ emp }) {
  const [showMore, setShowMore] = useState(false);

  if (!emp) return null;

  const rawStatus = emp.Employee_Status || 'Deactive';
  const normalizedStatus = rawStatus.trim().toLowerCase();
  const isRedStatus =
    normalizedStatus === 'deactive' || normalizedStatus === 'terminated';

  return (
    <div
      className="employee-card-container"
      data-status={normalizedStatus}
      style={{
        background: isRedStatus
          ? '#f55847'
          : 'linear-gradient(180deg, #131318 0%, #1d1d26 100%)',
      }}
    >
      {/* Left column */}
      <div className="left-col">
        <div className="photo-ring">
          <img
            className="photo"
            src={emp.imageUrl ? `http://localhost:5001${emp.imageUrl}` : '/images/no-photo.jpg'}
            alt={emp.EmpName || 'Employee photo'}
            onError={(e) => {
              e.target.onerror = null;
              e.target.src = '/images/no-photo.jpg';
            }}
          />
        </div>

        <div className="photo-meta">
          <div className="emp-name">{emp.EmpName || '—'}</div>
          <div className="emp-role">{emp.PersonnelType || 'Employee'}</div>
          <div className={`status-pill ${normalizedStatus}`}>{rawStatus}</div>
        </div>
      </div>

      {/* Separator */}
      <div className="separator" aria-hidden />

      {/* Right column */}
      <div className="right-col">
        <h3 className="profile-title">Profile Details</h3>

        <table className="details-table" aria-label="employee details">
          <tbody>
            {/* Always visible */}
            <tr>
              <td className="label "><FaUser color='#FFDD00' /> Name</td>
              <td className="value v-color">{emp.EmpName || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdBadge color='#FFDD00' /> Employee ID</td>
              <td className="value v-color">{emp.EmployeeID || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaUserTie color='#FFDD00'/> Manager</td>
              <td className="value v-color">{emp.Manager_Name || '—'}</td>
            </tr>
            <tr>
              <td className="label"><FaIdCard /> Active Cards</td>
              <td className="value v-color">{emp.Active_Cards ?? 0}</td>
            </tr>
            <tr>
              <td colSpan="2" style={{ paddingTop: 1 }}>
                <CurrentLocation empId={emp.id ?? emp.EmployeeID} showMore={showMore} />
              </td>

            </tr>

            {/* Hidden until showMore is true */}
            {showMore && (
              <>
                <tr>
                  <td className="label"><FaClone /> Total Cards</td>
                  <td className="value">{emp.Total_Cards ?? 0}</td>
                </tr>
              </>
            )}
          </tbody>
        </table>

        {/* Toggle Button */}
        <button
          className="show-more-btn"
          onClick={() => setShowMore((prev) => !prev)}
        >
          {showMore ? 'Show Less' : 'Show More'}
        </button>
      </div>
    </div>
  );
}

