import React, { useEffect, useMemo, useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Line,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import {
  FiDownload as Download,
  FiSearch as Search,
  FiCalendar as Calendar,
  FiRefreshCw as Refresh,
  FiUsers,
  FiUserCheck,
  FiClock,
} from "react-icons/fi";

export default function PuneMonthlyDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth =
    initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);
  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => {
      alive = false;
    };
  }, [month]);

  const days = useMemo(
    () =>
      data?.attendanceSheet?.length
        ? Object.keys(data.attendanceSheet[0]).filter((k) => /\d{4}-\d{2}-\d{2}/.test(k))
        : data?.days || [],
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || [])
      set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter((r) => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (
          (r.name || "").toLowerCase().includes(term) ||
          (r.employeeId || "").toLowerCase().includes(term)
        );
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = ["#2563EB", "#10B981", "#F59E0B", "#EF4444", "#6B7280"];

  function humanDay(d) {
    return d.slice(8);
  }

  function pctColorClass(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-gray-200 text-gray-700";
    if (n >= 90) return "bg-green-600 text-white";
    if (n >= 75) return "bg-yellow-500 text-white";
    return "bg-red-500 text-white";
  }

  return (
    <div className="p-6 max-w-[1300px] mx-auto bg-white text-black">
      <header className="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">ðŸ“Š Pune â€” Monthly Summary</h1>
          <p className="text-sm text-gray-600 mt-1">
            Attendance, occupancy and visitor insights â€¢ <span className="font-semibold">{month}</span>
          </p>
        </div>

        <div className="flex items-center gap-3">
          <label className="flex items-center gap-2 text-sm bg-gray-100 border rounded-lg px-3 py-2 shadow-sm">
            <Calendar size={16} />
            <input
              aria-label="Select month"
              type="month"
              value={month}
              onChange={(e) => setMonth(e.target.value)}
              className="outline-none bg-transparent text-sm"
            />
          </label>

          <button
            onClick={() => {
              setLoading(true);
              setTimeout(() => setLoading(false), 600);
            }}
            title="Refresh"
            className="bg-gray-100 border rounded-lg p-2 shadow-sm hover:bg-gray-200"
          >
            <Refresh size={18} />
          </button>

          <div className="flex gap-2">
            <button className="inline-flex items-center gap-2 bg-blue-600 text-white text-sm px-3 py-2 rounded-lg shadow hover:bg-blue-700">
              <Download size={14} /> CSV
            </button>
            <button className="inline-flex items-center gap-2 border border-gray-300 text-sm px-3 py-2 rounded-lg hover:bg-gray-100">
              <Download size={14} /> JSON
            </button>
          </div>
        </div>
      </header>

      {error && <div className="p-4 bg-red-50 border border-red-200 text-red-700 rounded">Error: {error}</div>}

      {!loading && data && (
        <main className="space-y-8">
          {/* KPI Cards */}
          <section className="grid grid-cols-1 sm:grid-cols-3 gap-6">
            <div className="p-6 bg-gray-50 rounded-2xl shadow flex items-center gap-4 hover:shadow-md transition">
              <div className="w-12 h-12 flex items-center justify-center rounded-xl bg-blue-100 text-blue-600">
                <FiUsers size={22} />
              </div>
              <div>
                <p className="text-sm text-gray-600">Avg Daily Headcount</p>
                <p className="text-2xl font-bold">{data.avgDailyHeadcount ?? "â€”"}</p>
              </div>
            </div>

            <div className="p-6 bg-gray-50 rounded-2xl shadow flex items-center gap-4 hover:shadow-md transition">
              <div className="w-12 h-12 flex items-center justify-center rounded-xl bg-green-100 text-green-600">
                <FiUserCheck size={22} />
              </div>
              <div>
                <p className="text-sm text-gray-600">Distinct People</p>
                <p className="text-2xl font-bold">
                  {data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}
                </p>
              </div>
            </div>

            <div className="p-6 bg-gray-50 rounded-2xl shadow flex items-center gap-4 hover:shadow-md transition">
              <div className="w-12 h-12 flex items-center justify-center rounded-xl bg-yellow-100 text-yellow-600">
                <FiClock size={22} />
              </div>
              <div>
                <p className="text-sm text-gray-600">Days in Month</p>
                <p className="text-2xl font-bold">
                  {data.summary?.daysInMonth ?? days.length}
                </p>
              </div>
            </div>
          </section>

          {/* Charts */}
          <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-2 p-6 bg-gray-50 rounded-2xl shadow hover:shadow-md transition">
              <h3 className="text-base font-semibold text-gray-700 mb-3">ðŸ“ˆ Peak Occupancy</h3>
              <div style={{ height: 260 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={data.peakOccupancy || []}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#E6E9EE" />
                    <XAxis dataKey="date" tickFormatter={(d) => d.slice(8)} />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="peak" fill="#2563EB" radius={[6, 6, 0, 0]} />
                    <Line type="monotone" dataKey="peak" stroke="#06B6D4" strokeWidth={2} dot={false} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="p-6 bg-gray-50 rounded-2xl shadow hover:shadow-md transition">
              <h3 className="text-base font-semibold text-gray-700 mb-3">ðŸ‘¥ People by Type</h3>
              <div style={{ height: 220 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie data={personnelDistribution} dataKey="value" nameKey="name" outerRadius={80} innerRadius={40}>
                      {personnelDistribution.map((_, idx) => (
                        <Cell key={idx} fill={COLORS[idx % COLORS.length]} />
                      ))}
                    </Pie>
                    <Legend verticalAlign="bottom" />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
          </section>
        </main>
      )}
    </div>
  );
}
