not work, 
http://localhost:5000/api/occupancy-at?at=2025-09-10T06:00:00.000Z
we alos got 2025-09-09 date data , check below all code, and slove this issue, correctly
 
 "details": {
    "Red Zone - Outer Area": [
      {
        "Dateonly": "2025-09-09",
        "Swipe_Time": "18:54:59",
        "EmployeeID": "0",
        "ObjectName1": "Patil, Shivanand (Teapoint)",
        "CardNumber": "413971",
        "PersonnelType": "Property Management",
        "zone": "Red Zone - Outer Area",
        "door": "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)",
        "Direction": "OutDirection"
      }
    ],
    "Tower B": [
      {
        "Dateonly": "2025-09-09",
        "Swipe_Time": "18:45:01",
        "EmployeeID": "319936",
        "ObjectName1": "Singh, Vineet",
        "CardNumber": "608366",
        "PersonnelType": "Employee",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_MAIN RECEPTION DOOR",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-09",
        "Swipe_Time": "21:01:18",
        "EmployeeID": "318502",
        "ObjectName1": "Nene, Nikhil",
        "CardNumber": "411134",
        "PersonnelType": "Employee",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_RECEPTION RIGHT DOOR",
        "Direction": "OutDirection"
      },
2nd Floor, Pune": [
      {
        "Dateonly": "2025-09-09",
        "Swipe_Time": "19:07:40",
        "EmployeeID": "W0026467",
        "ObjectName1": "Khamkar, Shraddha",
        "CardNumber": "620046",
        "PersonnelType": "Contractor",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-10",
        "Swipe_Time": "05:26:08",
        "EmployeeID": "319451",
        "ObjectName1": "Yadav, Anant Vishwasrao",
        "CardNumber": "604988",
        "PersonnelType": "Employee",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-10",
        "Swipe_Time": "05:53:02",
        "EmployeeID": "328504",
        "ObjectName1": "P, Sai Poojith",
        "CardNumber": "619975",
        "PersonnelType": "Employee",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_RECPTION TO WORKSTATION DOOR_10:05:4B",
        "Direction": "InDirection"
      },
      {
        "Dateonly": "2025-09-10",
        "Swipe_Time": "05:57:19",
        "EmployeeID": "0",
        "ObjectName1": "Karajagi, Riyaz",
        "CardNumber": "411160",
        "PersonnelType": "Property Management",
        "zone": "2nd Floor, Pune",
        "door": "APAC_IN_PUN_2NDFLR_LIFTLOBBY TO RECEPTION EMTRY DOOR_10:05:74",
        "Direction": "InDirection"
      }
    ],
    "Orange Zone": [
      {
        "Dateonly": "2025-09-09",
        "Swipe_Time": "22:19:50",
        "EmployeeID": "323562",
        "ObjectName1": "KADAM, NIMISH JAYKAR",
        "CardNumber": "411115",
        "PersonnelType": "Employee",
        "zone": "Orange Zone",
        "door": "APAC_IN_PUN_PODIUM_ORANGE_RECEPTION ENTRY-DOOR",
        "Direction": "InDirection"
      },
      {
C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\employeeController.js
// controllers/employeeController.js

const { poolConnect, pool } = require('../config/db');

exports.getEmployeeData = async (req, res) => {
  try {
    await poolConnect;
    const request = pool.request();

    // Pagination params (defaults: page 1, 100 rows)
    const page     = parseInt(req.query.page)     || 1;
    const pageSize = parseInt(req.query.pageSize) || 100;
    const offset   = (page - 1) * pageSize;

    const sqlQuery = ` 
      WITH CombinedQuery AS(
		SELECT 
	    DATEADD(MINUTE, -1 * t1.[MessageLocaleOffset], t1.[MessageUTC]) AS LocaleMessageTime,
    t1.ObjectName1,
	t1.PartitionName2 As location,
	t5_card.CardNumber,
t5_admit.value AS AdmitCode,
t5_dir.value AS Direction,
    t1.ObjectName2,
	t5_rej.value AS Rejection_Type,
	CASE 
        WHEN t3.Name IN ('Contractor', 'Terminated Contractor') THEN t2.Text12
        ELSE CAST(t2.Int1 AS NVARCHAR)
    END AS "EmployeeID",
    t1.Objectidentity1,
    t3.Name AS PersonnelType,
    t1.MessageType,t1.XmlGUID
	FROM
    [ACVSUJournal_00010027].[dbo].[ACVSUJournalLog] AS t1
LEFT JOIN
    [ACVSCore].[Access].[Personnel] AS t2
    ON t1.ObjectIdentity1 = t2.GUID
LEFT JOIN
    [ACVSCore].[Access].[PersonnelType] AS t3
    ON t2.[PersonnelTypeId] = t3.[ObjectID]
LEFT JOIN
    [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] AS t5_admit
    ON t1.XmlGUID = t5_admit.GUID
    AND t5_admit.Name = 'AdmitCode'
LEFT JOIN
    [ACVSUJournal_00010020].[dbo].[ACVSUJournalLogxmlShred] AS t5_dir
    ON t1.XmlGUID = t5_dir.GUID
    AND t5_dir.Value IN ('InDirection', 'OutDirection')
    LEFT JOIN [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxml] AS t_xml
        ON t1.XmlGUID = t_xml.GUID
    -- Pre-pull shredded ‚ÄúCard‚Äù row
    LEFT JOIN (
    SELECT GUID, [value]
    FROM [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred]
    WHERE [Name] IN ('Card', 'CHUID')
    ) AS SCard
    ON t1.XmlGUID = SCard.GUID
    /* NEW: three-stage CardNumber resolution */
    OUTER APPLY (
    SELECT COALESCE(
        -- 1) <LogMessage><CHUID><Card>‚Ä¶</Card></CHUID>
        TRY_CAST(t_xml.XmlMessage AS XML)
        .value('(/LogMessage/CHUID/Card)[1]', 'varchar(50)'),
        -- 2) <LogMessage><CHUID>‚Ä¶</CHUID> (no nested <Card>)
        TRY_CAST(t_xml.XmlMessage AS XML)
        .value('(/LogMessage/CHUID)[1]', 'varchar(50)'),
        -- 3) shredded fallback
        SCard.[value]
    ) AS CardNumber
    ) AS t5_card
 
LEFT JOIN
    [ACVSUJournal_00010027].[dbo].[ACVSUJournalLogxmlShred] AS t5_Rej
    ON t1.XmlGUID = t5_Rej.GUID
    AND t5_Rej.Name = 'RejectCode'
 
   
   --include both admits and rejects
   WHERE t1.MessageType IN ('CardAdmitted', 'CardRejected')
   AND t1.PartitionName2 = 'APAC.Default'
   AND CONVERT(date, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) >= '2025-01-01')
 
 SELECT
        -- Format as ISO string for the full datetime
        CONVERT(VARCHAR(25), LocaleMessageTime, 126) AS LocaleMessageTime,
        -- Keep date only as 'YYYY-MM-DD'
        CONVERT(VARCHAR(10), LocaleMessageTime, 23)  AS Dateonly,
        -- Extract just the time as 'HH:MM:SS'
        CONVERT(VARCHAR(8), LocaleMessageTime, 108)  AS Swipe_Time,
        EmployeeID,
        Objectidentity1,
        ObjectName1,
        PersonnelType,
        CardNumber,
        AdmitCode,
        Direction,
        ObjectName2 AS Door,
        Rejection_Type
      FROM CombinedQuery
      ORDER BY LocaleMessageTime DESC
      OFFSET ${offset} ROWS
      FETCH NEXT ${pageSize} ROWS ONLY;
    `;

    const result = await request.query(sqlQuery);

    res.json({
      page,
      pageSize,
      data: result.recordset,
    });
  } catch (error) {
    console.error('SQL error:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\liveOccupancyController.js


// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\liveOccupancyController.js


const { DateTime } = require('luxon');
// const { poolConnect, pool, sql } = require('../config/db');
const { sql, getPool } = require('../config/db');

const doorZoneMap = require('../data/doorZoneMap');
const zoneFloorMap = require('../data/zoneFloorMap');

const ertMembers = require('../data/puneErtMembers.json');

// track which door‚Üízone keys we've already warned on
const warnedKeys = new Set();

//update
function getTodayString() {
  return DateTime.now()
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');
}




function normalizeZoneKey(rawDoor, rawDir) {
  // 1) Ensure it‚Äôs a string and trim whitespace
  let door = String(rawDoor || '').trim();

  // 2) Strip any "_HH:MM:SS" or "_XX:XX:XX" suffix (hex codes or times at end)
  door = door.replace(/_[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');

  // 3) Collapse multiple spaces into one, then uppercase
  door = door.replace(/\s+/g, ' ').toUpperCase();

  // 4) Pick the direction token exactly as doorZoneMap expects
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';

  return `${door}___${dir}`;
}

/** Normalize "Last, First" or "First Last" ‚Üí lowercase "first last" */
function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

/**
 * Map a swipe‚Äôs door+direction ‚Üí zone using exactly doorZoneMap.
 * If not in doorZoneMap, log once and return "Unknown Zone".
 * If OutDirection but not "Out of office", strip off " Zone" suffix.
 */
function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  const zone = doorZoneMap[key];

  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('‚õî Unmapped door‚Äìdirection key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }

  // If it's an OutDirection but not the real "Out of office", remove trailing " Zone"
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    return zone.replace(/\s+Zone$/i, '');
  }

  return zone;
}


async function fetchNewEvents(since) {
  // await the shared pool promise instead of poolConnect
  const pool = await getPool();
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  // console.log('üîé [Pune] fetchNewEvents called with since =', since.toISOString());
  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
       


        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >@since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // console.log(`üì• [Pune] fetched ${recordset.length} rows:`,
  // recordset.map(r => r.LocaleMessageTime.toISOString()));

  return recordset;
}



async function buildOccupancy(allEvents) {
  const current = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID,
      ObjectName1, PersonnelType,
      CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw = mapDoorToZone(Door, Direction);
    const zone = zoneRaw && zoneRaw.toLowerCase();

    // ‚îÄ‚îÄ‚îÄ 1) If we can‚Äôt map door+direction to a valid zone, skip this event entirely. ‚îÄ‚îÄ‚îÄ
    //     (prevents "Unknown Zone" from ever entering uniquePeople/current)
    if (zoneRaw === 'Unknown Zone') {
      // We warned once in mapDoorToZone already; just ignore.
      continue;
    }

    const zoneLower = zoneRaw.toLowerCase();



    // 1) True "Out of office" ‚Üí full eviction
    if (Direction === 'OutDirection' && zone === 'out of office') {
      uniquePeople.delete(dedupKey);
      delete current[dedupKey];
      continue;
    }



    if (Direction === 'OutDirection') {
      // Compare lowercased zone safely
      const zoneLower = String(zone).toLowerCase();

      // Only full eviction when it's the real "Out of office"
      if (zoneLower === 'out of office') {
        uniquePeople.delete(dedupKey);
        delete current[dedupKey];
      } else {
        // Keep the person in current headcount for all other OutDirection cases
        // Update their last-seen metadata (zone, door, Direction)
        uniquePeople.set(dedupKey, PersonnelType);
        current[dedupKey] = {
          Dateonly, Swipe_Time,
          EmployeeID, ObjectName1, CardNumber,
          PersonnelType,
          zone: zoneRaw,
          door: Door,
          Direction
        };
      }
      continue;
    }


    // if (Direction === 'OutDirection') {
    //   // true Out-of-office ‚Üí full eviction (already checked earlier too)
    //   if (zone === 'out of office') {
    //     uniquePeople.delete(dedupKey);
    //     delete current[dedupKey];
    //     continue;
    //   }

    //   // Allowlist of OutDirection zones that should be kept (not evicted).
    //   // Add any other special OutDirection zones here as they are discovered.
    //   const allowedOutZones = new Set([
    //     'Assembly Area',
    //     'Reception Area'
    //   ]);

    //   // Preserve if it's an "Outer Area" OR explicitly allowed OutDirection zone.
    //   if (zoneRaw.endsWith('Outer Area') || allowedOutZones.has(zoneRaw)) {
    //     uniquePeople.set(dedupKey, PersonnelType);
    //     current[dedupKey] = {
    //       Dateonly, Swipe_Time,
    //       EmployeeID, ObjectName1, CardNumber,
    //       PersonnelType,
    //       zone: zoneRaw,
    //       door: Door,
    //       Direction
    //     };
    //   } else {
    //     // Any other OutDirection (TURNSTILE, lobby exits, etc.) = full eviction
    //     if (!warnedKeys.has(`EVICTED_OUT|${normalizePersonName(ObjectName1)}|${zoneRaw}`)) {
    //       console.log(`‚ÑπÔ∏è Evicting OutDirection for ${normalizePersonName(ObjectName1)} at zone ${zoneRaw}`);
    //       warnedKeys.add(`EVICTED_OUT|${normalizePersonName(ObjectName1)}|${zoneRaw}`);
    //     }
    //     uniquePeople.delete(dedupKey);
    //     delete current[dedupKey];
    //   }
    //   continue;
    // }



    // 3) InDirection ‚Üí normal check-in
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // 4) Catch-all eviction
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // live headcounts (only from uniquePeople, which has already evicted all true out-of-office)
  let employeeCount = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee', 'Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build zone‚Üípeople map, but filter out any out-of-office at this final step too
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    const zKey = emp.zone.toLowerCase();
    if (zKey === 'out of office') continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  // zoneDetails
  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType] || 0) + 1;
        return acc;
      }, {});
      return [zone, { total: emps.length, byPersonnelType: byType, employees: emps }];
    })
  );

  // floorBreakdown
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt] || 0) + c;
    }
  }


  const ertStatus = Object.fromEntries(
    Object.entries(ertMembers).map(([role, members]) => {
      const list = members.map(m => {
        // pick the correct name field (JSON uses "Name")
        const rawName = m.name || m.Name;
        const expected = normalizePersonName(rawName);


        // find a matching swipe in current[]
        const matchEvt = Object.values(current).find(e => {
          return normalizePersonName(e.ObjectName1) === expected;
        });

        return {
          ...m,
          present: !!matchEvt,
          zone: matchEvt ? matchEvt.zone : null
        };
      });
      return [role, list];
    })
  );



  return {
    asOf: new Date().toISOString(),
    summary: Object.entries(zoneDetails).map(([z, d]) => ({ zone: z, count: d.total })),
    zoneBreakdown: Object.entries(zoneDetails).map(([z, d]) => ({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown: Object.entries(floorMap).map(([f, d]) => ({ floor: f, ...d.byPersonnelType, total: d.total })),
    details: zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    ertStatus,


    personnelBreakdown: (() => {
      const map = new Map();
      // uniquePeople: Map<dedupKey, PersonnelType>
      for (const pt of uniquePeople.values()) {
        map.set(pt, (map.get(pt) || 0) + 1);
      }
      return Array.from(map, ([personnelType, count]) => ({ personnelType, count }));
    })(),



  };
}


/**
 * Build ‚Äúvisited today‚Äù from the same in‚Äêmemory stream
 */
function buildVisitedToday(allEvents) {
  // ‚ÄúToday‚Äù in Asia/Kolkata, formatted as ‚Äúyyyy-MM-dd‚Äù
  const today = DateTime.now()
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // Use evt.Dateonly (already ‚Äúyyyy-MM-dd‚Äù in local zone) to pick out today's InDirection swipes
  const todayIns = allEvents.filter(evt => {
    return (
      evt.Direction === 'InDirection' &&
      evt.Dateonly === today
    );
  });

  // Dedupe by PersonGUID ‚Üí keep the latest swipe
  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());

  // Separate employees vs contractors
  const employees = finalList.filter(e =>
    !['Contractor', 'Terminated Contractor', 'Temp Badge', 'Visitor', 'Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}


// *******************

// Helper: fetch events in the 24h window ending at `until` (inclusive)
async function fetchEventsWindow(until) {
  const pool = await getPool();
  const req = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > DATEADD(HOUR, -24, @until)
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// Helper: parse row LocaleMessageTime reliably as UTC DateTime (works for Date or string)
function parseRowUtcDateTime(val) {
  if (!val) return null;
  // If it's already a Date object
  if (val instanceof Date) {
    return DateTime.fromMillis(val.getTime(), { zone: 'utc' });
  }
  // If it's a number (ms) or numeric string
  if (typeof val === 'number') {
    return DateTime.fromMillis(val, { zone: 'utc' });
  }
  // otherwise try ISO / RFC parse ‚Äî treat the parsed instant as UTC baseline
  const ms = Date.parse(String(val));
  if (Number.isNaN(ms)) return null;
  return DateTime.fromMillis(ms, { zone: 'utc' });
}

// fetch all events for the IST calendar date that contain events up to `atDate` (inclusive)
async function fetchEventsForDate(atDate) {
  const pool = await getPool();
  const req  = pool.request();

  // Snap to IST calendar day (yyyy-LL-dd) for the requested instant `atDate`
  const dayOnly = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // IST start-of-day for that date
  const startLocal = DateTime.fromISO(dayOnly, { zone: 'Asia/Kolkata' }).startOf('day');

  // Convert start-of-day IST -> UTC Date (for SQL)
  const startUTC = startLocal.toUTC().toJSDate();

  // Use the requested atDate as the upper bound (convert to UTC).
  // Use < @end in SQL, so add 1 millisecond so events exactly at atDate are included.
  const endUTC = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .plus({ milliseconds: 1 })
    .toUTC()
    .toJSDate();

  req.input('start', sql.DateTime2, startUTC);
  req.input('end',   sql.DateTime2, endUTC);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) <  @end
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // Defensive post-filter in JS:
  // - normalized row instant -> IST date must equal requested day
  // - row instant (UTC) must be <= atDate (requested instant)
  const atInstantUtc = DateTime.fromJSDate(atDate, { zone: 'utc' });
  const filtered = recordset.filter(r => {
    if (!r || !r.LocaleMessageTime) return false;

    const rowDt = parseRowUtcDateTime(r.LocaleMessageTime);
    if (!rowDt) return false;

    const rowIstDate = rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
    if (rowIstDate !== dayOnly) return false;

    // ensure not after requested atDate (use UTC comparison)
    return rowDt <= atInstantUtc;
  });

  return filtered;
}



function buildVisitedForDate(allEvents, atDate) {
  const asOfLocalDate = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  const todayIns = allEvents.filter(evt => evt.Direction === 'InDirection' && evt.Dateonly === asOfLocalDate);

  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }
  const finalList = Array.from(dedup.values());
  const employees = finalList.filter(e =>
    !['Contractor', 'Terminated Contractor', 'Temp Badge', 'Visitor', 'Property Management'].includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;
  return { employees, contractors, total: finalList.length };
}



// exports.getSnapshotAt = async (req, res) => {
//   try {
//     const atRaw = req.query.at;
//     if (!atRaw) return res.status(400).json({ error: 'missing "at"' });

//     const atDate = new Date(atRaw);
//     if (Number.isNaN(atDate.getTime())) {
//       return res.status(400).json({ error: 'invalid "at" timestamp' });
//     }

//     // üîë use date-based fetcher instead of 24h rolling window
//     const events = await fetchEventsForDate(atDate);

//     const occupancy   = await buildOccupancy(events);
//     const visitedStats = buildVisitedForDate(events, atDate);

//     occupancy.totalVisitedToday = visitedStats.total;
//     occupancy.visitedToday = visitedStats;
//     occupancy.asOf = atDate.toISOString();

//     return res.json(occupancy);
//   } catch (err) {
//     console.error('getSnapshotAt error:', err);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// };


// Handler: GET /api/occupancy-at?at=<ISO-8601>



// Handler: GET /api/occupancy-at?at=<ISO-8601>
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at"' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // requested IST calendar day (string "yyyy-LL-dd")
    const requestedIstDay = DateTime.fromJSDate(atDate, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');

    // fetch events (SQL limited to IST day's UTC-start .. atDate)
    let events = await fetchEventsForDate(atDate);

    // Extra defensive filter (should be redundant but guarantees correctness)
    events = events.filter(r => {
      const rowDt = parseRowUtcDateTime(r.LocaleMessageTime);
      if (!rowDt) return false;
      const rowIst = rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
      return rowIst === requestedIstDay;
    });

    // Now build occupancy from the strictly filtered events
    const occupancy   = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = visitedStats;
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

// Handler: GET /api/current-occupancy
exports.getCurrentOccupancy = async (req, res) => {
  try {
    const until = new Date();
    const events = await fetchEventsWindow(until);
    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, until);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    occupancy.asOf = until.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getCurrentOccupancy error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};
// *******************


/** Server‚ÄêSent‚ÄêEvents endpoint */
exports.getLiveOccupancy = async (req, res) => {



  try {
    // wait for the shared pool to be ready
    await getPool();

    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive'
    });
    res.write('\n');

    // pull last 24h on startup
    // let lastSeen = new Date(Date.now() - 24*60*60*1000);
    let lastSeen = new Date();
    const events = [];

    const push = async () => {




      // Option B: Recompute date from the JS timestamp in Asia/Kolkata:
      const todayKolkata = DateTime.now().setZone('Asia/Kolkata').toISODate();
      for (let i = events.length - 1; i >= 0; i--) {
        const ts = DateTime.fromJSDate(events[i].LocaleMessageTime, { zone: 'utc' })
          .setZone('Asia/Kolkata')
          .toISODate();
        if (ts !== todayKolkata) {
          events.splice(i, 1);
        }
      }


      //  console.log('üîÑ [PUSH] Running at:', new Date().toISOString());
      // console.log('üîç Last seen swipe time:', lastSeen);


      const fresh = await fetchNewEvents(lastSeen);

      //  console.log('üì• New events fetched:', fresh.length);




      if (fresh.length) {
        // lastSeen = fresh[fresh.length - 1].LocaleMessageTime;
        lastSeen = new Date();
        events.push(...fresh);
      }



      // build occupancy + today counts
      const occupancy = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday = {
        employees: todayStats.employees,
        contractors: todayStats.contractors,
        total: todayStats.total
      };




      // add an `id:` so EventSource treats even identical payloads as ‚Äúnew‚Äù

      const sid = Date.now();
      res.write(`id: ${sid}\n`);
      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);


      if (typeof res.flush === 'function') {
        res.flush();
      }

    };
    await push();
    const timer = setInterval(push, 2000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};


// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\routes\liveOccupancyRoutes.js
const express = require('express');
const router  = express.Router();
const {
  getLiveOccupancy,
  getSnapshotAt,
  getCurrentOccupancy
} = require('../controllers/liveOccupancyController');

router.get('/live-occupancy', getLiveOccupancy);
router.get('/occupancy-at', getSnapshotAt);         // GET /api/occupancy-at?at=...
router.get('/current-occupancy', getCurrentOccupancy); // GET /api/current-occupancy

module.exports = router;


