import React, { useState, useMemo } from "react";
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers,
  FaEnvelopeOpenText,
  FaMobileAlt,
  FaMapMarkerAlt,
} from "react-icons/fa";
import { Card, CardHeader, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";

export default function ERTOverview({ ertStatus }) {
  const [filterZone, setFilterZone] = useState(null);
  const [showAllMembers, setShowAllMembers] = useState(false);

  /** ----------------- ROLES & ICONS ----------------- */
  const firstColumnRoles = [
    "Site Head",
    "BCM Team / Site Operations",
    "HR",
    "Incident Controller",
  ];

  const roleIcons = {
    "Site Head": <FaUserTie className="text-blue-600" />,
    "BCM Team / Site Operations": <FaUserShield className="text-green-600" />,
    HR: <FaUserTie className="text-purple-600" />,
    "Incident Controller": <FaUserShield className="text-orange-600" />,
    "ERT Team Leader": <FaUserShield className="text-red-600" />,
    "ERT Team Members": <FaUsers className="text-teal-600" />,
    "First Aid Team": <FaUserNurse className="text-pink-600" />,
  };

  const baseLocationByRole = {
    "Site Head": "Podium Floor – Red Zone",
    HR: "Podium Floor – Red Zone",
    "Incident Controller": "Podium Floor – Red Zone",
    "First Aid Team": "Podium Floor – Green Zone",
    "ERT Team Leader": "Podium Floor – Green Zone",
    "BCM Team / Site Operations": "Podium Floor – Red Zone",
  };

  /** ----------------- HELPERS ----------------- */
  const DEFAULT_PHOTO = "/photos/default.png";
  const toSlug = (name = "") =>
    name.toLowerCase().trim().replace(/[^a-z0-9]+/g, "_").replace(/^_+|_+$/g, "");

  const getPhotoSrc = (member) => {
    if (!member) return DEFAULT_PHOTO;
    if (member.photo) return member.photo;
    const name = member.name || member.Name;
    if (name) return `/photos/${toSlug(name)}.png`;
    return DEFAULT_PHOTO;
  };

  /** ----------------- MEMBER CARD ----------------- */
  const MemberCard = ({ member, location }) => (
    <div className="flex items-start gap-3 p-3 border-b last:border-0 border-gray-200">
      <img
        src={getPhotoSrc(member)}
        alt={member.name || "Member"}
        className="w-12 h-12 rounded-full object-cover shadow"
        onError={(e) => {
          e.currentTarget.onerror = null;
          e.currentTarget.src = DEFAULT_PHOTO;
        }}
      />
      <div className="flex-1">
        <div className="flex items-center justify-between">
          <span className="font-semibold text-gray-800">{member.name}</span>
          <Badge
            variant={member.present ? "success" : "destructive"}
            className="capitalize"
          >
            {member.present ? "Available" : "Away"}
          </Badge>
        </div>
        <div className="text-sm text-gray-600 mt-1 space-y-1">
          <div className="flex items-center gap-2">
            <FaEnvelopeOpenText className="text-blue-500" />
            <a href={`mailto:${member.email}`} className="hover:underline">
              {member.email}
            </a>
          </div>
          <div className="flex items-center gap-2">
            <FaMobileAlt className="text-green-500" /> {member.phone}
          </div>
          <div className="flex items-center gap-2">
            <FaMapMarkerAlt className="text-red-500" /> {location}
          </div>
        </div>
      </div>
    </div>
  );

  /** ----------------- ROLE CARD ----------------- */
  const RoleCard = ({ role, members }) => {
    const filteredMembers = filterZone
      ? members.filter(
          (m) =>
            m.present &&
            ((m.zone && m.zone.includes(filterZone)) ||
              baseLocationByRole[role].includes(filterZone))
        )
      : members;

    return (
      <Card className="shadow-md rounded-2xl overflow-hidden">
        <CardHeader className="flex items-center gap-2 bg-gray-50 font-semibold">
          {roleIcons[role]} {role}
        </CardHeader>
        <CardContent className="p-0">
          {filteredMembers.length > 0 ? (
            filteredMembers.map((m, i) => (
              <MemberCard
                key={i}
                member={m}
                location={
                  m.present ? m.zone || "Unknown Zone" : baseLocationByRole[role]
                }
              />
            ))
          ) : (
            <div className="text-center text-gray-500 py-4">No members</div>
          )}
        </CardContent>
      </Card>
    );
  };

  /** ----------------- DATA ----------------- */
  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus).forEach(([role, members]) => {
      members.forEach((m) => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  const floorCounts = useMemo(() => {
    const counts = { "Podium Floor": 0, "2nd Floor": 0, "Tower B": 0 };
    allMembers.forEach((m) => {
      if (!m.present) return;
      const z = m.zone?.toLowerCase() || "";
      if (z.includes("2nd")) counts["2nd Floor"]++;
      else if (z.includes("tower b")) counts["Tower B"]++;
      else counts["Podium Floor"]++;
    });
    return counts;
  }, [allMembers]);

  const ertLeaders = useMemo(() => {
    const raw = (ertStatus["ERT Team Leader"] || []).map((m) => ({
      role: "ERT Team Leader",
      ...m,
    }));
    return filterZone
      ? raw.filter(
          (m) =>
            m.present &&
            ((m.zone && m.zone.includes(filterZone)) ||
              baseLocationByRole["ERT Team Leader"].includes(filterZone))
        )
      : raw;
  }, [ertStatus, filterZone]);

  const ertMembers = useMemo(() => {
    const members = (ertStatus["ERT Team Members"] || []).map((m) => ({
      role: "ERT Team Members",
      name: m.Name || m.name,
      baseLocation: m["Base Location"] || m.Floor || m.zone,
      liveLocation: m.zone,
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present,
    }));

    const filtered = filterZone
      ? members.filter(
          (m) =>
            m.present &&
            ((m.liveLocation && m.liveLocation.includes(filterZone)) ||
              m.baseLocation.includes(filterZone))
        )
      : members;

    return showAllMembers ? filtered : filtered.slice(0, 6);
  }, [ertStatus, filterZone, showAllMembers]);

  const floorIcons = {
    "Podium Floor": <FaHome size={26} className="text-red-500" />,
    "2nd Floor": <FaBuilding size={26} className="text-blue-500" />,
    "Tower B": <FaLayerGroup size={26} className="text-green-500" />,
  };

  /** ----------------- RENDER ----------------- */
  return (
    <div className="p-6 space-y-6">
      {/* Dashboard Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <h1 className="text-2xl font-bold text-gray-800">ERT Dashboard</h1>
        <div className="flex gap-2">
          <Button
            variant={filterZone === null ? "default" : "outline"}
            onClick={() => setFilterZone(null)}
          >
            All Zones
          </Button>
          {Object.keys(floorCounts).map((floor) => (
            <Button
              key={floor}
              variant={filterZone === floor ? "default" : "outline"}
              onClick={() =>
                setFilterZone((prev) => (prev === floor ? null : floor))
              }
            >
              {floor}
            </Button>
          ))}
        </div>
      </div>

      {/* Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-gradient-to-r from-indigo-500 to-blue-500 text-white shadow-lg rounded-2xl">
          <CardContent className="p-6 text-center">
            <h6 className="uppercase text-sm">Total Members</h6>
            <div className="text-3xl font-bold mt-2">
              {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
            </div>
          </CardContent>
        </Card>

        {Object.keys(floorCounts).map((floor) => (
          <Card
            key={floor}
            className={`shadow-lg rounded-2xl cursor-pointer transition hover:scale-105 ${
              filterZone === floor ? "border-2 border-blue-500" : ""
            }`}
            onClick={() =>
              setFilterZone((prev) => (prev === floor ? null : floor))
            }
          >
            <CardContent className="p-6 text-center">
              {floorIcons[floor]}
              <h6 className="mt-2 text-sm font-medium">{floor}</h6>
              <div className="text-2xl font-bold">{floorCounts[floor]}</div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Main Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Roles */}
        <div className="space-y-4">
          {firstColumnRoles.map((role) => (
            <RoleCard key={role} role={role} members={ertStatus[role] || []} />
          ))}
        </div>

        {/* Leaders */}
        <div>
          <RoleCard role="ERT Team Leader" members={ertLeaders} />
        </div>

        {/* Members */}
        <div>
          <Card className="shadow-md rounded-2xl overflow-hidden">
            <CardHeader className="flex items-center gap-2 bg-gray-50 font-semibold">
              {roleIcons["ERT Team Members"]} ERT Team Members
            </CardHeader>
            <CardContent className="p-0">
              {ertMembers.length > 0 ? (
                ertMembers.map((m, i) => (
                  <MemberCard
                    key={i}
                    member={m}
                    location={m.present ? m.liveLocation : m.baseLocation}
                  />
                ))
              ) : (
                <div className="text-center text-gray-500 py-4">No members</div>
              )}
              <div className="flex justify-center py-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowAllMembers((prev) => !prev)}
                >
                  {showAllMembers ? "Show Less" : "Show More"}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}