09/11/2025 04:00 PM
i select this but i show this. correc this 
Viewing historical snapshot: 2025-09-11T21:30:00.000+05:30






// C:\Users\W0024618\Desktop\swipeData\client\src\App.js

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link, useLocation } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';
import ZoneDetailsTable from './components/ZoneDetailsTable';
import DashboardHome    from './pages/DashboardHome';
import ErtPage          from './pages/ErtPage';
import TimeTravelControl from './components/TimeTravelControl';   // üîπ NEW
import './App.css';

function ZoneDetailsPage({ detailsData }) {
  const [searchTerm, setSearchTerm] = useState('');

  return (
    <>
      <div
        className="d-flex justify-content-between align-items-center mb-2"
        style={{ flexWrap: 'wrap', gap: '0.5rem' }}
      >
        <Link to="/" className="btn btn-secondary">‚Üê Back to Dashboard</Link>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ flexGrow: 1, maxWidth: 300, padding: '0.4rem 0.8rem', fontSize: '1rem', borderRadius: 4, border: '1px solid #ccc' }}
        />
      </div>
      <ZoneDetailsTable data={detailsData} searchTerm={searchTerm} />
    </>
  );
}

function App() {
  const location = useLocation();
  const headerText = location.pathname === '/ert'
    ? 'Emergency Response Team ‚Äî Western Union Pune'
    : 'Live Occupancy ‚Äî Western Union Pune';

  // ---------- data state ----------
  const [liveData, setLiveData] = useState({
    summary: [],
    details: {},
    floorBreakdown: [],
    zoneBreakdown: [],
    personnelBreakdown: [],
    totalVisitedToday: 0,
    personnelSummary: { employees: 0, contractors: 0 },
    visitedToday: { employees: 0, contractors: 0, total: 0 },
    ertStatus: {}
  });

  // ---------- time travel state ----------
  const [timeTravelMode, setTimeTravelMode] = useState(false);
  const [timeTravelTimestamp, setTimeTravelTimestamp] = useState(null);
  const [timeTravelLoading, setTimeTravelLoading] = useState(false);

  // ---------- live SSE ----------
  useEffect(() => {
    if (timeTravelMode) return; // pause SSE when in history mode

    const es = new EventSource('http://localhost:5000/api/live-occupancy');
    es.onmessage = (e) => {
      try {
        const p = JSON.parse(e.data);
        setLiveData({
          summary: Array.isArray(p.summary) ? p.summary : [],
          details: p.details || {},
          floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
          zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
          personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
          totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
          personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
          visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
          ertStatus: p.ertStatus || {}
        });
      } catch {
        console.error('SSE parse error');
      }
    };

    es.onerror = (err) => {
      console.error('SSE error', err);
      try { es.close(); } catch (e) {}
    };

    return () => {
      try { es.close(); } catch (e) {}
    };
  }, [timeTravelMode]);

  // ---------- helpers ----------
  async function fetchSnapshot(datetimeISO) {
    setTimeTravelLoading(true);
    try {
      const url = `http://localhost:5000/api/occupancy-at?datetime=${encodeURIComponent(datetimeISO)}`;
      console.debug('[TimeTravel] fetching', url);
      const resp = await fetch(url, { headers: { Accept: 'application/json' } });
      if (!resp.ok) {
        window.alert(`Snapshot request failed (${resp.status})`);
        return;
      }
      const p = await resp.json();
      setLiveData({
        summary: Array.isArray(p.summary) ? p.summary : [],
        details: p.details || {},
        floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
        zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
        personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
        totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
        personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
        visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
        ertStatus: p.ertStatus || {}
      });
      setTimeTravelMode(true);
      setTimeTravelTimestamp(p?.asOf || datetimeISO);
    } catch (err) {
      console.error('Failed to fetch snapshot', err);
      window.alert('Failed to fetch snapshot');
    } finally {
      setTimeTravelLoading(false);
    }
  }

  function clearTimeTravel() {
    setTimeTravelLoading(true);
    setTimeTravelMode(false);
    setTimeTravelTimestamp(null);
    setTimeTravelLoading(false);
  }

  // ---------- render ----------
  return (
    <>
      <Navbar bg="dark" variant="dark" expand="lg" className="px-4">
        <Navbar.Brand as={Link} to="/" className="wu-brand">{headerText}</Navbar.Brand>
        <Nav className="ms-auto align-items-center">
          <div className="me-3" style={{ display: 'flex', alignItems: 'center' }}>
            <TimeTravelControl
              currentTimestamp={timeTravelTimestamp}
              onApply={(iso) => fetchSnapshot(iso)}
              onLive={() => clearTimeTravel()}
              loading={timeTravelLoading}
            />
          </div>
          <Nav.Link as={Link} to="/" className="nav-item-infographic"><i className="bi bi-house"></i></Nav.Link>
          <Nav.Link href="http://10.199.22.57:3000/partition/Pune/history" className="nav-item-infographic"><i className="bi bi-clock-history"></i></Nav.Link>
          <Nav.Link as={Link} to="/details" className="nav-item-infographic"><i className="fa-solid fa-calendar-day"></i></Nav.Link>
          <Nav.Link as={Link} to="/ert" className="nav-item-infographic">ERT Overview</Nav.Link>
          <Nav.Link className="theme-toggle-icon" title="Dark mode only"><FaSun/></Nav.Link>
        </Nav>
      </Navbar>

      <Container fluid className="mt-2">
        {timeTravelMode && (
          <div style={{
            background: '#2b2b2b',
            color: '#FFD100',
            padding: '8px 16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderLeft: '4px solid #FFD100',
            marginBottom: 8
          }}>
            <div>
              Viewing historical snapshot:&nbsp;
              <strong>{timeTravelTimestamp}</strong>
            </div>
            <div>
              <button className="btn btn-sm btn-outline-warning" onClick={() => clearTimeTravel()} disabled={timeTravelLoading}>
                Return to Live
              </button>
            </div>
          </div>
        )}

        <Routes>
          <Route
            path="/"
            element={
              <DashboardHome
                summaryData={liveData.summary}
                detailsData={liveData.details}
                floorData={liveData.floorBreakdown}
                zoneBreakdown={liveData.zoneBreakdown}
                personnelBreakdown={liveData.personnelBreakdown}
                totalVisitedToday={liveData.totalVisitedToday}
                personnelSummary={liveData.personnelSummary}
                visitedToday={liveData.visitedToday}
                ertStatus={liveData.ertStatus}
              />
            }
          />
          <Route path="/details" element={<ZoneDetailsPage detailsData={liveData.details} />} />
          <Route path="/ert" element={<ErtPage ertStatus={liveData.ertStatus} />} />
        </Routes>
      </Container>
    </>
  );
}

export default function WrappedApp() {
  return (
    <BrowserRouter>
      <div className="dark-theme">
        <App />
      </div>
    </BrowserRouter>
  );
}



// src/components/TimeTravelControl.jsx
import React, { useEffect, useState } from 'react';
import { Button, InputGroup, FormControl, Spinner } from 'react-bootstrap';

/**
 * TimeTravelControl
 * - shows a "YYYY-MM-DDTHH:mm" input that is treated literally as UTC
 * - when Apply clicked -> sends "<local-value>:00.000Z" (no timezone conversion)
 * - keeps input in sync with parent-provided currentTimestamp (ISO)
 */
export default function TimeTravelControl({ currentTimestamp, onApply, onLive, loading }) {
  // store local value as "YYYY-MM-DDTHH:mm" (no timezone)
  const [local, setLocal] = useState(currentTimestamp ? isoToInput(currentTimestamp) : '');

  // sync when parent changes currentTimestamp
  useEffect(() => {
    if (currentTimestamp) setLocal(isoToInput(currentTimestamp));
    else setLocal('');
  }, [currentTimestamp]);

  function handleApply() {
    if (!local) return;
    // Build ISO exactly corresponding to displayed value:
    const iso = `${local}:00.000Z`;
    onApply(iso);
  }

  function handleLive() {
    setLocal('');
    onLive();
  }

  return (
    <div style={{ display: 'flex', gap: 8, alignItems: 'center', minWidth: 340 }}>
      <InputGroup>
        <FormControl
          type="datetime-local"
          value={local}
          onChange={(e) => setLocal(e.target.value)}
          placeholder="Select date & time"
        />
      </InputGroup>

      <div style={{ display: 'flex', gap: 6 }}>
        <Button variant="outline-warning" onClick={handleApply} disabled={loading || !local}>
          {loading ? <><Spinner animation="border" size="sm" />&nbsp;Applying</> : 'Apply'}
        </Button>
        <Button variant="warning" onClick={handleLive} disabled={loading}>
          Live
        </Button>
      </div>
    </div>
  );
}

/** helpers **/

function pad(n) { return String(n).padStart(2, '0'); }

/**
 * Convert an ISO timestamp into a "YYYY-MM-DDTHH:mm" string for the input.
 * Uses UTC getters so the text shown matches the ISO exactly (no timezone shift).
 */
function isoToInput(iso) {
  if (!iso) return '';
  const d = new Date(iso);
  const year = d.getUTCFullYear();
  const month = pad(d.getUTCMonth() + 1);
  const day = pad(d.getUTCDate());
  const hours = pad(d.getUTCHours());
  const minutes = pad(d.getUTCMinutes());
  return `${year}-${month}-${day}T${hours}:${minutes}`;
}
