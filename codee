exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // requested IST calendar day (string "yyyy-LL-dd")
    const requestedIstDay = DateTime.fromJSDate(atDate, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');

    // <<< IMPORTANT CHANGE: fetch only the IST calendar day's rows up to atDate >>>
    let events = await fetchEventsForDate(atDate);

    // Final defensive filter: parse each row as UTC instant & ensure IST day equals requested
    // and that the instant is <= requested instant.
    const atInstantUtc = DateTime.fromJSDate(atDate, { zone: 'utc' });
    events = events.filter(r => {
      const rowDt = parseRowUtcDateTime(r.LocaleMessageTime);
      if (!rowDt) return false;
      // ensure the IST calendar-day matches and that row time <= requested instant
      return rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd') === requestedIstDay
        && rowDt <= atInstantUtc;
    });

    // Build occupancy from strictly filtered events
    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = visitedStats;
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};