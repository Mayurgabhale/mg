i want more atractive infographic 3d design ok.
like above image


// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LabelList
} from 'recharts';
import { Card } from 'react-bootstrap';
import './PersonnelDonutChart.css'; // Custom CSS for enhanced styling

// Solid colors for reliability (derived from original WU theme + accents)
// Using start colors from gradients to avoid SVG defs issues
const COLORS = [
  '#FFD100', // WU Yellow
  '#009E60', // WU Green
  '#88B04B', // Olive
  '#FF6F61', // Coral
  '#58595B', // WU Gray
  '#FFB800', // Accent Yellow
  '#6B5B95'  // Indigo
];

// Custom label renderer function that returns a positioned text element
const renderCustomLabel = (entry) => {
  const { name, percent } = entry;
  const radian = Math.PI / 180;
  const radius = 120; // Adjusted for outer radius + some offset for positioning
  const x = (entry.cx + (entry.outerRadius + 20) * Math.cos(-entry.midAngle * radian)) || 0;
  const y = (entry.cy + (entry.outerRadius + 20) * Math.sin(-entry.midAngle * radian)) || 0;

  return (
    <text
      x={x}
      y={y}
      fill="#fff"
      textAnchor={x > entry.cx ? 'start' : 'end'}
      dominantBaseline="central"
      className="pie-label"
      fontSize="11px"
      fontWeight="500"
    >
      <tspan dy="-10" x={x}>{name}</tspan>
      <tspan x={x} className="percent-text" fontSize="12px" fontWeight="bold" dy="15">
        {(percent * 100).toFixed(0)}%
      </tspan>
    </text>
  );
};

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value, percent } = payload[0];
  return (
    <div className="custom-tooltip">
      <div className="tooltip-title">{name}</div>
      <div className="tooltip-value">Count: {value}</div>
      <div className="tooltip-percent">({(percent * 100).toFixed(1)}%)</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white p-4 text-center">No personnel data available</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 personnel-card shadow-lg border-0">
      <Card.Header className="bg-gradient-dark text-warning text-center fw-bold">
        <h5 className="mb-0">Personnel Type Headcount</h5>
        <div className="header-underline"></div>
      </Card.Header>
      <Card.Body className="p-3 bg-dark position-relative">
        <ResponsiveContainer width="100%" height={400}>
          <PieChart className="enhanced-pie">
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={70} // Increased for better donut hole visibility
              outerRadius={110} // Adjusted for container size
              paddingAngle={4}
              minAngle={15}
              stroke="#fff"
              strokeWidth={3}
              cornerRadius={5} // Slight rounding for modern look
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={COLORS[idx % COLORS.length]}
                  stroke="#fff"
                  strokeWidth={2}
                />
              ))}
            </Pie>
            <LabelList data={sorted} content={renderCustomLabel} />
            {/* Center label for total */}
            <text
              x="50%"
              y="50%"
              textAnchor="middle"
              dominantBaseline="middle"
              className="center-label"
              fill="#FFD100"
              fontSize="2.5rem"
              fontWeight="bold"
            >
              {total.toLocaleString()}
            </text>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{
                paddingTop: '20px',
                color: '#FFD100',
                fontSize: '1rem',
                fontWeight: '500'
              }}
              iconType="circle"
              iconSize={12}
              formatter={(value) => <span style={{ color: '#FFD100' }}>{value}</span>}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}



/* PersonnelDonutChart.css */

.personnel-card {
  background: linear-gradient(145deg, #1a1a1a, #0d0d0d);
  border-radius: 15px;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.bg-gradient-dark {
  background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
  border-bottom: 3px solid #FFD100;
}

.header-underline {
  width: 50px;
  height: 3px;
  background: linear-gradient(90deg, #FFD100, #FF9800);
  margin: 0 auto;
  border-radius: 2px;
}

.enhanced-pie {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));
}

.pie-label {
  fill: #fff;
  font-size: 10px;
  font-weight: 600;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
}

.percent-text {
  fill: #FFD100;
  font-size: 12px;
  font-weight: bold;
}

.center-label {
  fill: #FFD100 !important;
  font-size: 2.8rem !important;
  font-weight: 800 !important;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
  dominant-baseline: middle !important;
  text-anchor: middle !important;
}

.custom-tooltip {
  background: linear-gradient(145deg, #1a1a1a, #2d2d2d);
  color: #FFD100;
  border: 1px solid #FFD100;
  border-radius: 8px;
  padding: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
  font-size: 0.95rem;
  min-width: 120px;
}

.tooltip-title {
  font-weight: bold;
  margin-bottom: 4px;
  color: #fff;
}

.tooltip-value,
.tooltip-percent {
  color: #ccc;
  font-size: 0.9rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .pie-label {
    font-size: 8px;
  }
  
  .center-label {
    font-size: 2rem !important;
  }
}
