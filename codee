http://10.199.22.57:4000/api/occupancy/live-summary

{
      "LocaleMessageTime": "2025-08-15T22:42:12.000Z",
      "Dateonly": "2025-08-15",
      "Swipe_Time": "22:42:12",
      "EmployeeID": "W0026146",
      "PersonGUID": "AE191490-D301-41F9-9E31-D9FA49F8690A",
      "ObjectName1": "Montenegro, Norma",
      "Door": "LACA ARG MOLINETE 1 IN",
      "PersonnelType": "Contractor",
      "CardNumber": "617920",
      "Text5": "Buenos Aires - Montevideo 825",
      "PartitionName2": "AR.Cordoba",
      "AdmitCode": "Admit",
      "Direction": "InDirection",
      "Floor": "1st Floor"
    },



 Name	Montenegro, Norma
 Employee ID	W0026146
 Manager	Andres Ferreira
 Active Cards	1
Swipe Details
No recent swipe
 Total Cards	1


‚úÖ DB pool acquired for image
‚úÖ Image query rows: 1
‚úÖ Serving image, type: image/jpeg size: 145191
Occupancy fetch failed for http://10.199.22.57:4000/api/occupancy/live-summary timeout of 5000ms exceeded
üéØ [GET] /api/employees/2097210273/image called
‚úÖ DB pool acquired for image
‚úÖ Image query rows: 1
‚úÖ Serving image, type: image/jpeg size: 48911
Occupancy fetch failed for http://10.199.22.57:4000/api/occupancy/live-summary timeout of 5000ms exceeded


 Name	Montenegro, Norma
 Employee ID	W0026146
 Manager	Andres Ferreira
 Active Cards	1
Swipe Details  <---- thi is 
No recent swipe
 Total Cards	1

chekc api, she is preset but  in thsi not show swppte detail
but in api is how 

chekc all code carefully and slove this iisue , why not show swpite details 

// ////////////////////////////////////////////
// ////////////////////////////////////////////





// controllers/employeeLocationController.js
const axios = require('axios');
const sql = require('mssql');
const { getPool } = require('../config/db');

const OCCUPANCY_URLS = [
  'http://10.199.22.57:3006/api/occupancy/live-summary',

  'http://10.199.22.57:3007/api/occupancy/live-summary',  // EMEA


  'http://10.199.22.57:3008/api/occupancy/live-summary',  //Pune


  'http://10.199.22.57:4000/api/occupancy/live-summary'   //laca

];

// Simple in-memory cache: { [employeeObjId]: { ts: Number, data: Object } }
const cache = {};
const CACHE_TTL_MS = 50000; // 5 seconds ‚Äî tune as needed

function normalizeString(s) {
  if (!s && s !== 0) return '';
  return String(s).trim().toLowerCase();
}

function parseRecordTime(rec) {
  // Priority: LocaleMessageTime -> snapshotTime -> Dateonly + Swipe_Time
  if (rec.LocaleMessageTime) return new Date(rec.LocaleMessageTime);
  if (rec.snapshotTime) return new Date(rec.snapshotTime);
  if (rec.Dateonly && rec.Swipe_Time) {
    // e.g. "2025-08-11" + "00:02:41"
    return new Date(`${rec.Dateonly}T${rec.Swipe_Time}Z`);
  }
  return null;
}

async function getEmployeeLiveLocation(req, res) {
  const employeeObjId = req.params.id;
  if (!employeeObjId) return res.status(400).json({ error: 'Missing id' });

  // Serve cache if fresh
  const cached = cache[employeeObjId];
  if (cached && Date.now() - cached.ts < CACHE_TTL_MS) {
    return res.json({ cached: true, ...cached.data });
  }

  try {
    // 1) Fetch EmployeeID and Name from DB (same logic as getEmployees)
    const pool = await getPool();
    const empResult = await pool.request()
      .input('objid', sql.BigInt, employeeObjId)
      .query(`
        SELECT AP.ObjectID,
               AP.Name AS EmpName,
               AP.Int1,
               AP.Text12
        FROM ACVSCore.Access.Personnel AP
        WHERE AP.ObjectID = @objid
      `);

    if (!empResult.recordset.length) {
      return res.status(404).json({ error: 'Employee not found' });
    }

    const empRow = empResult.recordset[0];
    // EmployeeID logic mirroring existing query:
    const EmployeeID = (empRow.Int1 === 0 || empRow.Int1 === '0' || empRow.Int1 === null)
      ? (empRow.Text12 ? String(empRow.Text12) : '')
      : String(empRow.Int1);

    const empName = empRow.EmpName || '';

    // 2) Query occupancy endpoints concurrently
    const requests = OCCUPANCY_URLS.map(u => axios.get(u, { timeout: 5000 }).catch(e => ({ error: e, url: u })));
    const responses = await Promise.all(requests);

    // 3) Collect and flatten details
    let allDetails = [];
    for (const r of responses) {
      if (!r || r.error) {
        // Log but continue
        console.warn('Occupancy fetch failed for', r && r.url, r && r.error && r.error.message);
        continue;
      }
      if (r.data && Array.isArray(r.data.details)) {
        // Keep source url for debugging
        const src = r.config && r.config.url ? r.config.url : null;
        const annotated = r.data.details.map(d => ({ ...d, __source: src }));
        allDetails.push(...annotated);
      }
    }

    // 4) Find matches by EmployeeID (preferred), fallback to name (ObjectName1), then PersonGUID
    const normEmployeeID = normalizeString(EmployeeID);
    const normEmpName = normalizeString(empName);

    const matches = allDetails.filter(rec => {
      const recEmpId = normalizeString(rec.EmployeeID);
      if (recEmpId && normEmployeeID && recEmpId === normEmployeeID) return true;

      const recName = normalizeString(rec.ObjectName1);
      if (recName && normEmpName && recName === normEmpName) return true;

      if (rec.PersonGUID) {
        // optionally, you can compare GUIDs if you have them
      }
      return false;
    });

    if (!matches.length) {
      const result = { found: false, message: 'No recent swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    // 5) Select most recent
    let best = null;
    for (const m of matches) {
      const t = parseRecordTime(m);
      if (!t) continue;
      if (!best) best = { rec: m, time: t };
      else if (t > best.time) best = { rec: m, time: t };
    }

    if (!best) {
      const result = { found: false, message: 'No timestamped swipe found' };
      cache[employeeObjId] = { ts: Date.now(), data: result };
      return res.json(result);
    }

    const r = best.rec;



    const payload = {
      found: true,
      source: r.__source || null,
      partition: r.PartitionName2 || r.Partition || null,
      floor: r.Floor || r.Zone || r.floor || null,
      Zone: r.Zone,
      door: r.Door || null,
      direction: r.Direction || null,
      timestampUTC: r.LocaleMessageTime || r.snapshotTime || `${r.Dateonly}T${r.Swipe_Time}Z` || null,
      personnelType: r.PersonnelType || null,
      cardNumber: r.CardNumber || null,
      raw: r
    };
    cache[employeeObjId] = { ts: Date.now(), data: payload };

    return res.json(payload);

  } catch (err) {
    console.error('getEmployeeLiveLocation error', err && err.stack || err);
    return res.status(500).json({ error: 'Failed to fetch live location', message: err.message });
  }
}

module.exports = { getEmployeeLiveLocation };



C:\Users\W0024618\Desktop\employee-verification\config\db.js

const sql    = require('mssql');
const dotenv = require('dotenv');
dotenv.config();

const config = {
  server:   process.env.DB_SERVER,
  user:     process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_DATABASE,
  connectionTimeout: 30000,    // 30 s to establish
  requestTimeout:    0,        // no timeout on individual queries
  pool: {
    max:                  100,
    min:                   0,

    // Use maximum 32-bit signed‚Äêint (~24.8 days) so Node/tarn doesn't overflow
    idleTimeoutMillis:    2147483647,
    acquireTimeoutMillis: 2147483647
  },
  options: {
    encrypt:               true,
    trustServerCertificate: true
  }
};

let poolPromise = null;

async function getPool(attempts = 100) {
  if (poolPromise) return poolPromise;

  poolPromise = (async () => {
    try {
      const pool = await sql.connect(config);
      console.log('‚úÖ MSSQL pool connected');
      return pool;
    } catch (err) {
      console.error('‚ùå MSSQL pool connection failed:', err);
      poolPromise = null;
      if (attempts > 0) {
        console.log(`‚è≥ Retrying MSSQL connect (${attempts} left)‚Ä¶`);
        await new Promise(res => setTimeout(res, 3000));
        return getPool(attempts - 1);
      }
      throw err;
    }
  })();

  sql.on('error', err => {
    console.error('‚ùå MSSQL global error:', err);
    // Don‚Äôt force‚Äêreset poolPromise here unless it‚Äôs a fatal error you want to recover from.
  });

  return poolPromise;
}

// Keep‚Äêalive ping every 5 minutes
setInterval(async () => {
  try {
    const pool = await getPool();
    await pool.request().query('SELECT 1');
    // console.log('üîÑ MSSQL keep‚Äêalive succeeded');
  } catch (err) {
    console.error('‚ö†Ô∏è MSSQL keep‚Äêalive ping failed:', err);
    // poolPromise stays intact so we keep using the same pool
  }
}, 5 * 60 * 1000);

module.exports = { sql, getPool };



chek all code each line carefully. 

