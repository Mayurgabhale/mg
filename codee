// src/components/TimeTravelControl.jsx
import React, { useState } from 'react';
import { Button, InputGroup, FormControl, Spinner } from 'react-bootstrap';

/**
 * TimeTravelControl
 * - local UI to pick a datetime (uses <input type="datetime-local">)
 * - calls onApply(isoTimestamp) when user applies a timestamp
 * - calls onLive() when user wants to return to live mode
 *
 * Note: the parent is responsible for converting to backend format (we pass ISO UTC).
 */
export default function TimeTravelControl({ currentTimestamp, onApply, onLive, loading }) {
  // store local value as datetime-local string (no timezone)
  const [local, setLocal] = useState(currentTimestamp ? isoToLocalDatetimeInput(currentTimestamp) : '');

  function handleApply() {
    if (!local) return;
    // Convert local datetime (browser local) to an ISO UTC string
    const iso = new Date(local).toISOString();
    onApply(iso);
  }

  function handleLive() {
    setLocal('');
    onLive();
  }

  return (
    <div style={{ display: 'flex', gap: 8, alignItems: 'center', minWidth: 340 }}>
      <InputGroup>
        <FormControl
          type="datetime-local"
          value={local}
          onChange={(e) => setLocal(e.target.value)}
          placeholder="Select date & time"
        />
      </InputGroup>

      <div style={{ display: 'flex', gap: 6 }}>
        <Button variant="outline-warning" onClick={handleApply} disabled={loading || !local}>
          {loading ? <><Spinner animation="border" size="sm" />&nbsp;Applying</> : 'Apply'}
        </Button>
        <Button variant="warning" onClick={handleLive} disabled={loading}>
          Live
        </Button>
      </div>
    </div>
  );
}

/** helpers **/
function isoToLocalDatetimeInput(iso) {
  // iso -> "YYYY-MM-DDTHH:mm" suitable for <input type=datetime-local>
  if (!iso) return '';
  const d = new Date(iso);
  // offset to obtain local equivalent
  const tzOffsetMs = d.getTimezoneOffset() * 60000;
  const localDate = new Date(d.getTime() - tzOffsetMs);
  return localDate.toISOString().slice(0, 16);
}