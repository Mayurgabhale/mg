in this on issue or big issue, know came,,,,,
we select Sunday, 31 August, 2025 history but, in this alos diplsy 	9/1/2025 entry, 
so waht is the prbolme, why so this entry in 2025-08-31
Read all code careflly, and chekc , 


24	9/1/2025	09:49:34 PM	W0022873	Hernandez, Sofia	Contractor	612791	LACA CR F4 Main Lobby Door	CR.Costa Rica Partition


// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  const filterCode = decodedPartition?.split('.')[0] || null;

  const [data, setData]               = useState(null);
  const [loading, setLoading]         = useState(true);
  const [pickedDate, setPickedDate]   = useState(null);
  const [showDetails, setShowDetails] = useState(false);

  // 1) pick summary for the date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const ds = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r =>
      r.date === ds || r.date.startsWith(ds)
    ) || null;
  }, [data, pickedDate]);

  // 2) build partitionRows (unchanged)
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };
    return Object.entries(summaryEntry.partitions)
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, v]) => {
        const [code, cityRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          city: cityRaw.replace('Partition','').trim(),
          employee:   v.Employee   ?? v.EmployeeCount   ?? 0,
          contractor: v.Contractor ?? v.ContractorCount ?? 0,
          tempBadge:  v.TempBadge  ?? 0,
          total:      v.total      ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) build detailRows exactly like APAC:
  const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // filter by date field (SwipeDate OR LocaleMessageTime) & partition
    const filtered = data.details.filter(r => {
      const inDay = (r.SwipeDate && r.SwipeDate.startsWith(ds))
        || format(new Date(r.LocaleMessageTime), 'yyyy-MM-dd') === ds;
      const inPartition = !filterCode
        || r.PartitionName2.startsWith(filterCode + '.');
      return inDay && inPartition;
    });

    // sort oldest â†’ newest
    filtered.sort((a,b) =>
      new Date(a.LocaleMessageTime) - new Date(b.LocaleMessageTime)
    );

    // dedupe by PersonGUID, keep first
    const seen = new Set();
    return filtered.filter(r => {
      if (seen.has(r.PersonGUID)) return false;
      seen.add(r.PersonGUID);
      return true;
    });
  }, [data, pickedDate, showDetails, filterCode]);

  // fetch on mount
  useEffect(() => {
    setLoading(true);
    fetchHistory()
      .then(json => setData(json))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <LoadingSpinner />;
  if (!data)    return null;

  // Export
  const handleExport = () => {
    const ws = XLSX.utils.json_to_sheet(
      detailRows.map((r,i) => ({
        Sr: i + 1,
        Date: format(new Date(r.LocaleMessageTime),'yyyy-MM-dd'),
        Time: formatApiTime12(r.LocaleMessageTime),
        EmployeeID: r.EmployeeID,
        Name: r.ObjectName1,
        PersonnelType: r.PersonnelType,
        CardNumber: r.CardNumber,
        Door: r.Door,
        Partition: r.PartitionName2
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Details');
    const buf = XLSX.write(wb, { bookType:'xlsx', type:'array' });
    saveAs(new Blob([buf]), `history_${format(pickedDate,'yyyyMMdd')}.xlsx`);
  };

  const isCostaRica = filterCode === 'CR';



// Interpret the API ISO string as UTC text (no timezone conversion),
// extract the HH:mm:ss and return 12-hour formatted "hh:mm:ss AM/PM".
const formatApiTime12 = (iso) => {
  if (!iso || typeof iso !== 'string') return '';

  // Try to extract HH:mm:ss from ISO (handles "2025-09-01T00:15:57.000Z"
  // and also a few other common variants).
  const m = iso.match(/T?(\d{2}):(\d{2}):(\d{2})/);
  if (!m) return '';

  const hh = parseInt(m[1], 10);
  const mm = m[2];
  const ss = m[3];

  if (Number.isNaN(hh)) return `${m[1]}:${mm}:${ss}`;

  // convert to 12-hour
  let h12 = hh % 12;
  if (h12 === 0) h12 = 12;
  const ampm = hh >= 12 ? 'PM' : 'AM';

  return `${String(h12).padStart(2, '0')}:${mm}:${ss} ${ampm}`;
};
  return (
    <>
      <Header />
      <Container maxWidth={false} disableGutters sx={{ pt:2, pb:4 }}>
        {pickedDate && summaryEntry ? (
          <Box display="flex" alignItems="flex-start" sx={{ px:2, mb:2, gap:1 }}>
            {/* DatePicker */}
            <Box sx={{ width:200 }}>
              <LocalizationProvider dateAdapter={AdapterDateFns}>
                <DatePicker
                  label="Select date"
                  value={pickedDate}
                  onChange={d => { setPickedDate(d); setShowDetails(false); }}
                  renderInput={params => <TextField fullWidth {...params} />}
                />
              </LocalizationProvider>
            </Box>
            {/* Summary */}
            <Box sx={{ flex:1, maxWidth:900, display:'flex', flexDirection:'column', gap:2 }}>
              <Paper elevation={3} sx={{ px:4, py:3, border:'3px solid #000', borderRadius:2 }}>
                <Table sx={{ border:'2px solid #000' }}>
                  <TableHead>
                    <TableRow>
                      <TableCell colSpan={isCostaRica?6:5} align="center"
                        sx={{ fontWeight:'bold', fontSize:16, bgcolor:'#000', color:'#fff', border:'2px solid #000' }}
                      >
                        {format(pickedDate,'EEEE, d MMMM, yyyy')}
                      </TableCell>
                    </TableRow>
                    <TableRow sx={{ bgcolor:'#FFC107' }}>
                      {[
                        'Country','City','Employee','Contractors',
                        ...(isCostaRica?['Temp Badge']:[]),
                        'Total'
                      ].map(h=>(
                        <TableCell key={h}
                          align={['Country','City'].includes(h)?'left':'right'}
                          sx={{ color:'#000', fontWeight:'bold', fontSize:14, border:'2px solid #000' }}
                        >{h}</TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {partitionRows.map((row,i)=>(
                      <TableRow key={i}>
                        <TableCell sx={{border:'2px solid #000'}}>{row.country}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{row.city}</TableCell>
                        <TableCell align="right" sx={{border:'2px solid #000'}}>{row.employee}</TableCell>
                        <TableCell align="right" sx={{border:'2px solid #000'}}>{row.contractor}</TableCell>
                        {isCostaRica && (
                          <TableCell align="right" sx={{border:'2px solid #000'}}>{row.tempBadge}</TableCell>
                        )}
                        <TableCell align="right" sx={{bgcolor:'#FFC107',fontWeight:'bold',border:'2px solid #000'}}>
                          {row.total}
                        </TableCell>
                      </TableRow>
                    ))}
                    <TableRow sx={{ bgcolor:'#666' }}>
                      <TableCell colSpan={2} align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                        Total
                      </TableCell>
                      <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                        {partitionRows.reduce((s,r)=>s+r.employee,0)}
                      </TableCell>
                      <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                        {partitionRows.reduce((s,r)=>s+r.contractor,0)}
                      </TableCell>
                      {isCostaRica && (
                        <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', border:'2px solid #000' }}>
                          {partitionRows.reduce((s,r)=>s+r.tempBadge,0)}
                        </TableCell>
                      )}
                      <TableCell align="right" sx={{ color:'#fff', fontWeight:'bold', bgcolor:'#333',border:'2px solid #000' }}>
                        {partitionRows.reduce((s,r)=>s+r.total,0)}
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </Paper>
              {/* Details toggle & export */}
              <Box display="flex" justifyContent="center" sx={{ mt:1 }}>
                <Button variant="contained" sx={{ bgcolor:'#FFC107', color:'#000' }}
                  onClick={()=>setShowDetails(v=>!v)}>
                  {showDetails?'Hide Details':'See Details'}
                </Button>
                {showDetails && (
                  <Button variant="outlined" sx={{ ml:2,borderColor:'#FFC107',color:'#FFC107' }}
                    onClick={handleExport}>
                    Export to Excel
                  </Button>
                )}
              </Box>
            </Box>
          </Box>
        ) : (
          <Box sx={{ px:2, mb:3 }}>
            <LocalizationProvider dateAdapter={AdapterDateFns}>
              <DatePicker
                label="Select date"
                value={pickedDate}
                onChange={d=>{ setPickedDate(d); setShowDetails(false); }}
                renderInput={params=><TextField fullWidth {...params}/>}
              />
            </LocalizationProvider>
            {!pickedDate && (
              <Typography variant="body1" color="textSecondary" sx={{ mt:2 }}>
                Please pick a date to view region summary.
              </Typography>
            )}
          </Box>
        )}

        {/* Details table */}
        {showDetails && (
          <Box display="flex" justifyContent="center" mb={2} sx={{ width:'100%' }}>
            <Paper elevation={1} sx={{ px:4,py:1,width:'100%',border:'3px solid #000',borderRadius:2 }}>
              {detailRows.length > 0 ? (
                <Table sx={{ border:'2px solid #000', borderCollapse:'collapse' }}>
                  <TableHead>
                    <TableRow sx={{ bgcolor:'#000' }}>
                      {[
                        'Sr','Date','Time',
                        'Employee ID','Name','Personnel Type',
                        'Card Number','Door','Partition'
                      ].map(h=>(
                        <TableCell key={h} align="center"
                          sx={{ color:'#FFC107', fontWeight:'bold', fontSize:14, border:'2px solid #000' }}
                        >{h}</TableCell>
                      ))}
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {detailRows.map((r,i)=>(
                      <TableRow key={`${r.PersonGUID}-${i}`}>
                        <TableCell sx={{border:'2px solid #000'}}>{i+1}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>
                          {format(new Date(r.LocaleMessageTime),'yyyy-MM-dd')}
                        </TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>
                         {formatApiTime12(r.LocaleMessageTime)}
                        </TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{r.EmployeeID}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{r.ObjectName1}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{r.PersonnelType}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{r.CardNumber}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{r.Door}</TableCell>
                        <TableCell sx={{border:'2px solid #000'}}>{r.PartitionName2}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <Typography variant="body2" sx={{ color:'#666', textAlign:'center', mt:2, fontStyle:'italic' }}>
                  No swipe records found for this date.
                </Typography>
              )}
            </Paper>
          </Box>
        )}
      </Container>
      <Footer />
    </>
  );
}

Sr	Date	Time	EmployeeID	Name	PersonnelType	CardNumber	Door	Partition
1	2025-08-31	09:42:37 PM	W0020261	Parrales, Jorge	Contractor	612769	LACA CR B1 Main Lobby Door	CR.Costa Rica Partition
2	2025-08-31	12:36:23 AM	73432593	Obando, Kevin	Contractor	612770	LACA CR B1 Main Lobby Door	CR.Costa Rica Partition
3	2025-08-31	04:57:12 AM	322905	Vega, Juan	Employee	606775	LACA CR A2 Emergency Elevators Door	CR.Costa Rica Partition
4	2025-08-31	05:42:49 AM	73432652	Mora, Carlos	Contractor	612776	LACA CR B1 Main Lobby Door	CR.Costa Rica Partition
5	2025-08-31	05:46:47 AM	W0010141	Guadamuz, Kevin	Contractor	612763	LACA CR F4 Main Lobby Door	CR.Costa Rica Partition
6	2025-08-31	05:57:06 AM	328760	Delgado, Priscilla Maria	Employee	617107	LACA CR B2  Main Lobby Door	CR.Costa Rica Partition
7	2025-08-31	06:03:46 AM	326170	Flores, Carlos Manuel	Employee	612869	LACA CR B2  Main Lobby Door	CR.Costa Rica Partition
8	2025-08-31	06:39:34 AM	325360	Hernandez, Kimberly Alejandra	Employee	605557	LACA CR B2  Main Lobby Door	CR.Costa Rica Partition
9	2025-08-31	06:39:41 AM	323639	Mora, Javier Emilio	Employee	606304	LACA CR F4 Main Lobby Door	CR.Costa Rica Partition
10	2025-08-31	07:51:45 AM	326974	Rodriguez, Karina Sofia	Employee	613249	LACA CR B2  Main Lobby Door	CR.Costa Rica Partition
11	2025-08-31	08:12:49 AM	314656	Amundarain, Jesus Orlando	Employee	417638	LACA CR B3 3rd Floor Elevator Emergency Door	CR.Costa Rica Partition
12	2025-08-31	08:16:49 AM	W0019475	Rodriguez, Darling	Contractor	613083	LACA CR A1 Main Lobby Door	CR.Costa Rica Partition
13	2025-08-31	08:23:54 AM	317570	Espinoza, Danilo	Employee	415829	LACA CR B1 Main Lobby Door	CR.Costa Rica Partition
14	2025-08-31	08:44:10 AM	72250974	Valverde, Luis	Contractor	612783	LACA CR B3 Main Lobby Door	CR.Costa Rica Partition
15	2025-08-31	09:05:08 AM	318906	Chavez, Carlos	Employee	606950	LACA CR E4 Main Lobby Door	CR.Costa Rica Partition
16	2025-08-31	11:29:21 AM	W0027218	Araya, Ignacio	Contractor	617168	LACA CR B1 Main Lobby Door	CR.Costa Rica Partition
17	2025-08-31	01:41:04 PM	328311	Urbina, Brayan Antonio	Employee	613148	LACA CR B2 Emergency Elevators Door	CR.Costa Rica Partition
18	2025-08-31	01:47:59 PM	W0026016	Segura, Kevin	Contractor	606975	LACA CR B1 Main Lobby Door	CR.Costa Rica Partition
19	2025-08-31	01:59:25 PM	328171	Cruz, Thomas	Employee	612748	LACA CR B2  Main Lobby Door	CR.Costa Rica Partition
20	2025-08-31	02:11:00 PM	193221	Pull, Brigitte K.	Employee	302606	LACA CR B2 Emergency Elevators Door	CR.Costa Rica Partition
21	2025-08-31	02:27:27 PM	307010	Marquez, Maxime	Employee	417165	LACA CR B2 Emergency Elevators Door	CR.Costa Rica Partition
22	2025-08-31	02:55:29 PM	328401	Mejias, Kiany Dayana	Employee	606940	LACA CR B2  Main Lobby Door	CR.Costa Rica Partition
23	2025-08-31	04:53:33 PM	315037	Peraza, Yamila	Employee	416049	LACA CR F4 Main Lobby Door	CR.Costa Rica Partition
24	9/1/2025	09:49:34 PM	W0022873	Hernandez, Sofia	Contractor	612791	LACA CR F4 Main Lobby Door	CR.Costa Rica Partition











