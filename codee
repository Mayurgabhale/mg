// src/components/LacaERTOverview.jsx
import React, { useState, useEffect, useMemo, useCallback } from "react";
import { Card, Row, Col, Badge } from "react-bootstrap";
import {
  FaEnvelopeOpenText,
  FaMapMarkerAlt,
  FaUsers,
  FaMobileAlt,
  FaLayerGroup,
} from "react-icons/fa";
import LoadingSpinner from "./LoadingSpinner";
import { mergeMembers } from "../utils/mergeMembers";
import "../App.css";

export default function LacaERTOverview() {
  const [members, setMembers] = useState([]);
  const [filterType, setFilterType] = useState("total");
  const [loading, setLoading] = useState(true);

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      const res = await fetch("http://localhost:3001/api/occupancy/live-summary");
      const liveData = await res.json();
      const liveDetails = Array.isArray(liveData.details) ? liveData.details : [];
      setMembers(mergeMembers(liveDetails));
    } catch (err) {
      console.error("Error fetching live data:", err);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const totalCount = useMemo(() => members.length, [members]);
  const availableCount = useMemo(
    () => members.filter((m) => m.present).length,
    [members]
  );

  const displayedMembers =
    filterType === "available" ? members.filter((m) => m.present) : members;

  if (loading) return <LoadingSpinner />;

  return (
    <>
      {/* === TOP SUMMARY CARDS === */}
      <Row className="g-3 mb-4">
        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 hover-card"
            style={{ backgroundColor: "#061f38", cursor: "pointer" }}
            onClick={() => setFilterType("total")}
          >
            <Card.Body className="py-3">
              <FaLayerGroup size={28} style={{ color: "#7F8C8D" }} className="mb-2" />
              <h5 className="mb-1" style={{ color: "#fff" }}>
                Total Members
              </h5>
              <h2 className="m-0" style={{ color: "#fff", fontWeight: "600" }}>
                {totalCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>

        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 hover-card"
            style={{ backgroundColor: "#061f38", cursor: "pointer" }}
            onClick={() => setFilterType("available")}
          >
            <Card.Body className="py-3">
              <FaUsers size={28} style={{ color: "#1ABC9C" }} className="mb-2" />
              <h5 className="mb-1" style={{ color: "#fff" }}>
                Available Members
              </h5>
              <h2 className="m-0" style={{ color: "#1ABC9C", fontWeight: "600" }}>
                {availableCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* === MEMBERS CARD === */}
      {/* ... your existing card rendering ... */}
    </>
  );
}






...
// src/components/LacaERTOverview.jsx
import React, { useState, useEffect, useMemo } from "react";
import { Card, Row, Col, Badge } from "react-bootstrap";
import {
  FaEnvelopeOpenText,
  FaMapMarkerAlt,
  FaUsers,
  FaMobileAlt,
  FaLayerGroup,
} from "react-icons/fa";
import membersData from "../data/lacaErtMembers.json";
import LoadingSpinner from "./LoadingSpinner";
import { lookupFloor } from "../utils/floorLookup";
import '../App.css';


export default function LacaERTOverview() {
  const [members, setMembers] = useState([]);
  const [filterType, setFilterType] = useState("total"); // "total" | "available"
  const [loading, setLoading] = useState(true); // ⬅️ add state

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true); // ⬅️ add this line
        const res = await fetch("http://localhost:3001/api/occupancy/live-summary");
        const liveData = await res.json();
        const liveDetails = Array.isArray(liveData.details) ? liveData.details : [];

        const merged = membersData["Team Members"].map((m) => {
          const live = liveDetails.find((d) => d.EmployeeID === m.emp_id) || {};
          const inLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "InDirection")
              : "";
          const outLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "OutDirection")
              : "";

          return {
            ...m,
            present: !!live.EmployeeID,
            direction: live.Direction || "",
            inLocation,
            outLocation,
            door: live.Door || "",
            phone: m.phone || "",
          };
        });

        const sorted = merged.sort((a, b) =>
          a.present === b.present ? 0 : a.present ? -1 : 1
        );

        setMembers(sorted);
      } catch (err) {
        console.error("Error fetching live data:", err);
      } finally {
        setLoading(false); // ⬅️ add this line
      }
    }

    fetchData();
    // const interval = setInterval(fetchData, 15000);
    // return () => clearInterval(interval);
  }, []);

  const totalCount = useMemo(() => members.length, [members]);
  const availableCount = useMemo(
    () => members.filter((m) => m.present).length,
    [members]
  );

  // Filter members to display based on selection
  const displayedMembers =
    filterType === "available"
      ? members.filter((m) => m.present)
      : members;



  if (loading) {
    return <LoadingSpinner />;
  }


  return (
    <>

      {/* === TOP SUMMARY CARDS (Black theme, yellow border) === */}
      <Row className="g-3 mb-4">

        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 hover-card"
            style={{
              // backgroundColor: "#061f38",
              backgroundColor: "#061f38",
              cursor: "pointer"

            }}
            onClick={() => setFilterType("total")}

          >
            <Card.Body className="py-3">
              <FaLayerGroup
                size={28}
                style={{ color: "#7F8C8D" }}
                className="mb-2"
              />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff", textDecoration: filterType === "total" ? "underline" : "none", textDecoration: "none" }}>
                Total Members
              </h5>
              <h2 className="m-0" style={{ color: "#fff", fontWeight: "600" }}>
                {totalCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>

        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 hover-card"
            style={{
              backgroundColor: "#061f38",
              cursor: "pointer"


            }}
            onClick={() => setFilterType("available")}
          >
            <Card.Body className="py-3">
              <FaUsers
                size={28}
                style={{ color: "#1ABC9C" }}
                className="mb-2"
              />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff" }}>
                Available Members
              </h5>
              <h2
                className="m-0"
                style={{ color: "#1ABC9C", fontWeight: "600", textDecoration: filterType === "available" ? "underline" : "none", textDecoration: "none" }}
              >
                {availableCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* === MEMBERS CARD (Black theme, yellow border, 3-column layout) === */}
      <Card
        className="shadow-sm"
        style={{ backgroundColor: "#1a1a1a", border: "2px solid #F1C40F" }}
      >
        <Card.Header
          style={{
            borderBottom: "1px solid #F1C40F",
            fontWeight: "600",
            display: "flex",
            fontSize: "20px",
            justifyContent: "center",
            alignItems: "center",
            textAlign: "center",
            gap: "10px",
            color: "#fff",
          }}
        >
          <FaUsers style={{ color: "#F1C40F", alignItems: "center", textAlign: "center" }} />
          {/* Costa Rica ERT Team Members */}
          {filterType === "available"
            ? "Available Costa Rica ERT Members"
            : "All Costa Rica ERT Members"}
        </Card.Header>

        <Card.Body style={{ padding: "1.5rem" }}>

          {displayedMembers.length > 0 ? (
            // ⬇️ add the three-col-divider class here
            <Row className="g-3 three-col-divider">

              {displayedMembers.map((m, i) => {
                const isAway =
                  m.present === false ||
                  (m.direction === "OutDirection" &&
                    m.outLocation.trim().toLowerCase() === "out of office");

                const location = m.present
                  ? m.inLocation || "Unknown Zone"
                  : "Away";

                return (
                  <Col xs={12} md={6} lg={4} key={i}>
                    <div
                      className="mb-3 pb-2"
                      style={{
                        borderBottom: "0.5px solid rgb(86, 86, 85)",
                        color: "#fff",
                      }}
                    >
                      {/* === NAME + STATUS === */}
                      <div className="d-flex justify-content-between align-items-center">
                        <h5 style={{ fontWeight: "600", marginBottom: "0.5rem" }}>
                          {m.name}{" "}
                          <span style={{ fontSize: "0.8rem", color: "#bbb" }}>
                            ({m.emp_id})
                          </span>
                        </h5>

                        <Badge
                          bg={!isAway ? "success" : "danger"}
                          pill
                          style={{ marginBottom: "0.8rem" }}
                        >
                          {!isAway ? "Available" : "Away"}
                        </Badge>
                      </div>

                      {/* === Email === */}
                      <div
                        className="d-flex align-items-center mt-2 mb-1"
                        style={{ fontSize: "0.85rem" }}
                      >
                        <FaEnvelopeOpenText
                          className="me-2"
                          style={{ color: "#3498DB", minWidth: "16px" }}
                        />
                        <a
                          href={`mailto:${m.email}`}
                          style={{ color: "#2980B9", textDecoration: "none" }}
                        >
                          {m.email}
                        </a>
                      </div>

                      {/* === Phone === */}
                      {m.phone && (
                        <div
                          className="d-flex align-items-center mb-1"
                          style={{ fontSize: "0.85rem" }}
                        >
                          <FaMobileAlt
                            className="me-2"
                            style={{ color: "#27AE60", minWidth: "16px" }}
                          />
                          <span style={{ color: "#27AE60" }}>{m.phone}</span>
                        </div>
                      )}

                      {/* === Location === */}
                      <div
                        className="d-flex align-items-center"
                        style={{ fontSize: "0.85rem" }}
                      >
                        <FaMapMarkerAlt
                          className="me-2"
                          style={{ color: "#E74C3C", minWidth: "16px" }}
                        />
                        <span style={{ color: "#E74C3C" }}>{location}</span>
                      </div>
                    </div>
                  </Col>



                );
              })}
            </Row>
          ) : (
            <div className="text-muted text-center py-2" style={{ color: "#fff" }}>No members</div>
          )}
        </Card.Body>
      </Card>


    </>
  );
}






