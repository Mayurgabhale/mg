import React, { useEffect, useMemo, useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import { 
  FiDownload as Download, 
  FiSearch as Search, 
  FiCalendar as Calendar, 
  FiRefreshCw as Refresh,
  FiUsers as Users,
  FiUser as User,
  FiPieChart as PieChartIcon,
  FiTrendingUp as TrendingUp,
  FiFilter,
  FiCheckSquare,
  FiX
} from "react-icons/fi";

export default function PuneMonthlyDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth = initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => { alive = false; };
  }, [month]);

  const days = useMemo(
    () => (data?.attendanceSheet?.length ? Object.keys(data.attendanceSheet[0]).filter(k => /^\d{4}-\d{2}-\d{2}$/.test(k)) : data?.days || []),
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter(r => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term);
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const topVisitors = data?.top10Visitors || [];

  // derive distribution for pie
  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = ["#4F46E5", "#10B981", "#F59E0B", "#EF4444", "#8B5CF6", "#EC4899", "#06B6D4"];

  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance;
    const headers = ["employeeId", "name", "personnelType", "daysPresent", "attendancePercent"];
    const csv = [headers.join(",")].concat(
      rows.map(r => headers.map(h => `"${(r[h] ?? "").toString().replace(/"/g, '""')}"`).join(","))
    ).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `attendance-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function humanDay(d) { return d.slice(8); }

  function pctColorClass(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-gray-100 text-gray-700";
    if (n >= 90) return "bg-emerald-500 text-white";
    if (n >= 75) return "bg-amber-500 text-white";
    return "bg-rose-500 text-white";
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-[1400px] mx-auto">
        {/* Header */}
        <header className="bg-white rounded-xl shadow-sm p-6 mb-6">
          <div className="flex flex-col md:flex-row md:items-center justify-between gap-4">
            <div>
              <h1 className="text-2xl md:text-3xl font-bold text-gray-900 flex items-center gap-2">
                <div className="w-10 h-10 rounded-lg bg-indigo-100 flex items-center justify-center text-indigo-600">
                  <Users size={24} />
                </div>
                Pune — Monthly Attendance Dashboard
              </h1>
              <p className="text-sm text-gray-500 mt-2">
                Comprehensive attendance, occupancy and visitor insights • <span className="font-medium text-indigo-600">{month}</span>
              </p>
            </div>

            <div className="flex flex-col sm:flex-row items-start gap-3">
              <div className="flex items-center gap-2 bg-gray-100 rounded-lg px-3 py-2">
                <Calendar className="text-gray-500" size={18} />
                <input
                  aria-label="Select month"
                  type="month"
                  value={month}
                  onChange={(e) => setMonth(e.target.value)}
                  className="outline-none bg-transparent text-sm font-medium"
                />
              </div>

              <button 
                onClick={() => { setLoading(true); setTimeout(()=> setLoading(false), 600); }} 
                className="flex items-center gap-2 bg-white border border-gray-200 rounded-lg px-3 py-2 text-sm font-medium hover:bg-gray-50 transition-colors"
              >
                <Refresh size={16} />
                Refresh
              </button>

              <div className="flex gap-2">
                <button 
                  onClick={downloadCSV} 
                  className="inline-flex items-center gap-2 bg-indigo-600 text-white text-sm px-3 py-2 rounded-lg shadow hover:bg-indigo-700 transition-colors"
                >
                  <Download size={16} />
                  CSV
                </button>
                <button 
                  onClick={downloadJSON} 
                  className="inline-flex items-center gap-2 border border-gray-200 text-sm px-3 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <Download size={16} />
                  JSON
                </button>
              </div>
            </div>
          </div>
        </header>

        {loading && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {[1, 2, 3].map(i => (
                <div key={i} className="p-4 bg-white rounded-xl shadow-sm animate-pulse h-32" />
              ))}
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="col-span-2 p-4 bg-white rounded-xl shadow-sm animate-pulse h-80" />
              <div className="p-4 bg-white rounded-xl shadow-sm animate-pulse h-80" />
            </div>
            <div className="p-4 bg-white rounded-xl shadow-sm animate-pulse h-96" />
          </div>
        )}

        {error && (
          <div className="p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg flex items-center gap-3">
            <div className="w-10 h-10 rounded-full bg-red-100 flex items-center justify-center">
              <FiX size={20} className="text-red-600" />
            </div>
            <div>
              <div className="font-medium">Error loading data</div>
              <div className="text-sm">{error}</div>
            </div>
          </div>
        )}

        {!loading && data && (
          <main className="space-y-6">
            {/* KPI Cards */}
            <section className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
              <div className="bg-white p-5 rounded-xl shadow-sm border-l-4 border-indigo-500">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-sm text-gray-500 font-medium">Avg Daily Headcount</div>
                    <div className="text-2xl font-bold text-gray-900 mt-1">{data.avgDailyHeadcount ?? '—'}</div>
                    <div className="text-xs text-gray-400 mt-2">Monthly average of unique headcount</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg bg-indigo-100 flex items-center justify-center">
                    <Users className="text-indigo-600" size={24} />
                  </div>
                </div>
              </div>

              <div className="bg-white p-5 rounded-xl shadow-sm border-l-4 border-emerald-500">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-sm text-gray-500 font-medium">Distinct People</div>
                    <div className="text-2xl font-bold text-gray-900 mt-1">{data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}</div>
                    <div className="text-xs text-gray-400 mt-2">Who recorded at least one swipe</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg bg-emerald-100 flex items-center justify-center">
                    <User className="text-emerald-600" size={24} />
                  </div>
                </div>
              </div>

              <div className="bg-white p-5 rounded-xl shadow-sm border-l-4 border-amber-500">
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-sm text-gray-500 font-medium">Days in Month</div>
                    <div className="text-2xl font-bold text-gray-900 mt-1">{data.summary?.daysInMonth ?? (data.days?.length ?? days.length)}</div>
                    <div className="text-xs text-gray-400 mt-2">{month}</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg bg-amber-100 flex items-center justify-center">
                    <Calendar className="text-amber-600" size={24} />
                  </div>
                </div>
              </div>
            </section>

            {/* Charts Section */}
            <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="col-span-2 bg-white rounded-xl shadow-sm p-5">
                <div className="flex items-center justify-between mb-5">
                  <div className="flex items-center gap-2">
                    <TrendingUp size={20} className="text-indigo-600" />
                    <h3 className="text-lg font-semibold text-gray-900">Peak Occupancy</h3>
                  </div>
                  <div className="text-sm text-gray-500">Daily peaks across the month</div>
                </div>
                <div style={{ height: 260 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data.peakOccupancy || []} margin={{ top: 6, right: 12, left: 0, bottom: 6 }}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#E6E9EE" />
                      <XAxis dataKey="date" tickFormatter={d => d.slice(8)} />
                      <YAxis />
                      <Tooltip 
                        formatter={(v) => [v, 'Peak']} 
                        contentStyle={{ borderRadius: '8px', border: '1px solid #E5E7EB' }}
                      />
                      <Bar dataKey="peak" fill="#4F46E5" radius={[6,6,0,0]} />
                      <Line type="monotone" dataKey="peak" stroke="#06B6D4" strokeWidth={2} dot={false} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>

              <div className="bg-white rounded-xl shadow-sm p-5">
                <div className="flex items-center justify-between mb-5">
                  <div className="flex items-center gap-2">
                    <PieChartIcon size={20} className="text-indigo-600" />
                    <h3 className="text-lg font-semibold text-gray-900">People by Type</h3>
                  </div>
                  <div className="text-sm text-gray-500">Breakdown of personnel</div>
                </div>
                <div style={{ height: 200 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie 
                        data={personnelDistribution} 
                        dataKey="value" 
                        nameKey="name" 
                        outerRadius={70} 
                        innerRadius={40} 
                        paddingAngle={4}
                        label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                      >
                        {personnelDistribution.map((entry, idx) => (
                          <Cell key={`c-${idx}`} fill={COLORS[idx % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>

                <div className="mt-4 space-y-3">
                  {personnelDistribution.map((p, i) => (
                    <div key={p.name} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full" style={{ background: COLORS[i % COLORS.length] }} />
                        <div className="text-sm font-medium text-gray-700">{p.name}</div>
                      </div>
                      <div className="text-sm font-bold text-gray-900">{p.value}</div>
                    </div>
                  ))}
                </div>
              </div>
            </section>

            {/* Data Table Section */}
            <section className="bg-white rounded-xl shadow-sm p-5">
              <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-5">
                <div className="flex flex-col sm:flex-row gap-3">
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Search className="text-gray-400" size={18} />
                    </div>
                    <input
                      className="pl-10 pr-4 py-2 border border-gray-200 rounded-lg text-sm w-full lg:w-64 focus:ring-2 focus:ring-indigo-200 focus:border-indigo-500"
                      placeholder="Search name or ID..."
                      value={q}
                      onChange={(e) => setQ(e.target.value)}
                    />
                  </div>

                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FiFilter className="text-gray-400" size={18} />
                    </div>
                    <select 
                      className="pl-10 pr-8 py-2 border border-gray-200 rounded-lg text-sm w-full appearance-none focus:ring-2 focus:ring-indigo-200 focus:border-indigo-500" 
                      value={personnelFilter} 
                      onChange={(e) => setPersonnelFilter(e.target.value)}
                    >
                      {personnelTypes.map((pt) => (
                        <option key={pt} value={pt}>{pt}</option>
                      ))}
                    </select>
                  </div>

                  <label className="flex items-center gap-2 text-sm text-gray-700 bg-gray-100 rounded-lg px-3 py-2">
                    <FiCheckSquare size={16} />
                    <input 
                      type="checkbox" 
                      checked={showTopOnly} 
                      onChange={(e) => setShowTopOnly(e.target.checked)} 
                      className="rounded focus:ring-indigo-500"
                    /> 
                    Show top 50 only
                  </label>
                </div>

                <div className="flex items-center gap-3 text-sm text-gray-500">
                  <div>Showing <strong className="text-gray-900">{filteredAttendance.length}</strong> records</div>
                  <div className="h-4 w-px bg-gray-300"></div>
                  <div>Updated: <span className="font-medium text-gray-700">{new Date().toLocaleTimeString()}</span></div>
                </div>
              </div>

              <div className="overflow-auto border border-gray-200 rounded-lg">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">#</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee</th>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                      {days.map(d => (
                        <th key={d} className="px-2 py-3 text-xs text-center text-gray-500 uppercase tracking-wider">{humanDay(d)}</th>
                      ))}
                      <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Present</th>
                      <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">%</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {(showTopOnly ? filteredAttendance.slice(0,50) : filteredAttendance).map((r, idx) => (
                      <tr key={(r.employeeId || idx) + "-" + idx} className="hover:bg-gray-50 transition-colors">
                        <td className="px-4 py-3 text-sm font-medium text-gray-900">{idx + 1}</td>
                        <td className="px-4 py-3">
                          <div className="flex items-center gap-3">
                            <div className="w-9 h-9 rounded-full bg-indigo-100 flex items-center justify-center text-sm font-semibold text-indigo-700">
                              {(r.name || "?").split(" ").map(s=>s[0]).slice(0,2).join("")}
                            </div>
                            <div>
                              <div className="text-sm font-medium text-gray-900">{r.name}</div>
                              <div className="text-xs text-gray-500">{r.employeeId}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-700">
                          <span className="px-2 py-1 bg-gray-100 rounded-md text-xs">{r.personnelType}</span>
                        </td>
                        {days.map(d => {
                          const v = r[d];
                          const isP = String(v).toUpperCase() === 'P' || v === true;
                          return (
                            <td key={d} className="px-1 py-1 text-center">
                              <div className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-semibold ${isP ? 'bg-emerald-100 text-emerald-800' : 'bg-gray-100 text-gray-500'}`}>
                                {isP ? 'P' : 'A'}
                              </div>
                            </td>
                          );
                        })}
                        <td className="px-4 py-3 text-sm font-medium text-gray-900 text-right">{r.daysPresent ?? '—'}</td>
                        <td className="px-4 py-3 text-right">
                          <span className={`inline-flex items-center justify-center px-2 py-1 text-xs font-bold rounded-full ${pctColorClass(r.attendancePercent)}`}>
                            {r.attendancePercent ? `${r.attendancePercent}%` : '—'}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </section>

            <footer className="text-xs text-gray-500 p-4 bg-white rounded-lg shadow-sm">
              <div>Notes: Present = any InDirection swipe (Asia/Kolkata). Data fetched from <code className="bg-gray-100 px-1 py-0.5 rounded">/api/monthly-summary?month=YYYY-MM</code>.</div>
            </footer>
          </main>
        )}
      </div>
    </div>
  );
}