Compiled with problems:
×
ERROR in ./src/components/MonthlySummary.jsx 7:0-58
Module not found: Error: Can't resolve 'lucide-react' in 'C:\Users\W0024618\Desktop\swipeData\client\src\components'
Compiled with problems:
×
ERROR in ./src/components/MonthlySummary.jsx 9:0-58
Module not found: Error: Can't resolve 'lucide-react' in 'C:\Users\W0024618\Desktop\swipeData\client\src\components'



// src/App.js
import React, { useEffect, useState, useRef } from 'react';
import { Container, Navbar, Nav, Button, InputGroup, FormControl, Spinner } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link, useLocation } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';
import ZoneDetailsTable from './components/ZoneDetailsTable';
import DashboardHome from './pages/DashboardHome';
import ErtPage from './pages/ErtPage';
import monthlySummaryPage from './pages/monthlySummaryPage';
import './App.css';

function TimeTravelControl({ currentTimestamp, onApply, onLive, loading }) {
  const [local, setLocal] = useState(currentTimestamp ? isoToInput(currentTimestamp) : '');

  useEffect(() => {
    if (currentTimestamp) setLocal(isoToInput(currentTimestamp));
    else setLocal('');
  }, [currentTimestamp]);

  function handleApply() {
    if (!local) return;

    // Convert selected local datetime to a Date object
    const selected = new Date(local);
    const now = new Date();

    if (selected > now) {
      window.alert("Please select a relevant time — snapshot cannot be in the future");
      return;
    }

    const [datePart, timePart] = local.split('T');
    onApply(datePart, timePart);
  }

  function handleLive() {
    setLocal('');
    onLive();
  }

  return (
    <div style={{ display: 'flex', gap: 8, alignItems: 'center', minWidth: 340 }}>
      <InputGroup>
        <FormControl
          type="datetime-local"
          value={local}
          onChange={(e) => setLocal(e.target.value)}
          placeholder="Select date & time"
        />
      </InputGroup>

      <div style={{ display: 'flex', gap: 6 }}>
        <Button variant="outline-warning" onClick={handleApply} disabled={loading || !local}>
          {loading ? <><Spinner animation="border" size="sm" />&nbsp;Applying</> : 'Apply'}
        </Button>
        <Button variant="warning" onClick={handleLive} disabled={loading}>
          Live
        </Button>
      </div>
    </div>
  );
}




function pad(n) { return String(n).padStart(2, '0'); }

// function isoToInput(iso) {
//   if (!iso) return '';
//   const d = new Date(iso);
//   const year = d.getUTCFullYear();
//   const month = pad(d.getUTCMonth() + 1);
//   const day = pad(d.getUTCDate());
//   const hours = pad(d.getUTCHours());
//   const minutes = pad(d.getUTCMinutes());
//   return `${year}-${month}-${day}T${hours}:${minutes}`;
// }


// ###wrokin code  function isoToInpu --------^^^^^^^^^^^^^^^^^^^^^^

function isoToInput(iso) {
  if (!iso) return '';
  const d = new Date(iso);
  const year = d.getFullYear();        // local year
  const month = pad(d.getMonth() + 1); // local month
  const day = pad(d.getDate());        // local day
  const hours = pad(d.getHours());     // local hours
  const minutes = pad(d.getMinutes()); // local minutes
  return `${year}-${month}-${day}T${hours}:${minutes}`;
}

// -----------------------------
// ZoneDetailsPage
// -----------------------------
function ZoneDetailsPage({ detailsData }) {
  const [searchTerm, setSearchTerm] = useState('');
  return (
    <>
      <div
        className="d-flex justify-content-between align-items-center mb-2"
        style={{ flexWrap: 'wrap', gap: '0.5rem' }}
      >
        <Link to="/" className="btn btn-secondary">← Back to Dashboard</Link>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ flexGrow: 1, maxWidth: 300, padding: '0.4rem 0.8rem', fontSize: '1rem', borderRadius: 4, border: '1px solid #ccc' }}
        />
      </div>
      <ZoneDetailsTable data={detailsData} searchTerm={searchTerm} />
    </>
  );
}

// -----------------------------
// Main App
// -----------------------------
function App() {
  const location = useLocation();
  const headerText = location.pathname === '/ert'
    ? 'Emergency Response Team — Western Union Pune'
    : 'Live Occupancy — Western Union Pune';

  // ---------- CONFIG: API base URL ----------
  const API_BASE = (process.env.REACT_APP_API_BASE_URL)
    || (process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : window.location.origin);
  const API_ORIGIN = API_BASE.replace(/\/$/, '');
  // ------------------------------------------

  const [liveData, setLiveData] = useState({
    summary: [],
    details: {},
    floorBreakdown: [],
    zoneBreakdown: [],
    personnelBreakdown: [],
    totalVisitedToday: 0,
    personnelSummary: { employees: 0, contractors: 0 },
    visitedToday: { employees: 0, contractors: 0, total: 0 },
    ertStatus: {}
  });

  const [timeTravelMode, setTimeTravelMode] = useState(false);
  const [timeTravelTimestamp, setTimeTravelTimestamp] = useState(null);
  const [timeTravelLoading, setTimeTravelLoading] = useState(false);

  const esRef = useRef(null);

  // SSE: runs only when NOT time-traveling
  useEffect(() => {
    if (timeTravelMode) {
      if (esRef.current) {
        try { esRef.current.close(); } catch (e) { /* ignore */ }
        esRef.current = null;
      }
      return;
    }

    const esUrl = `${API_ORIGIN}/api/live-occupancy`;
    console.debug('[SSE] connecting to', esUrl);
    const es = new EventSource(esUrl);
    esRef.current = es;

    es.onopen = () => console.debug('[SSE] open', esUrl);
    es.onmessage = (e) => {
      try {
        const p = JSON.parse(e.data);
        setLiveData({
          summary: Array.isArray(p.summary) ? p.summary : [],
          details: p.details || {},
          floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
          zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
          personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
          totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
          personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
          visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
          ertStatus: p.ertStatus || {}
        });
      } catch (err) {
        console.error('[SSE] parse error', err, e.data);
      }
    };

    es.onerror = (err) => {
      console.error('[SSE] error', err);
      try { es.close(); } catch (e) {}
      esRef.current = null;
    };

    return () => {
      try { es.close(); } catch (e) {}
      esRef.current = null;
    };
  }, [timeTravelMode, API_ORIGIN]);

  // Helper: unify payload set
  function setPayload(p) {
    setLiveData({
      summary: Array.isArray(p.summary) ? p.summary : [],
      details: p.details || {},
      floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
      zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
      personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
      totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
      personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
      visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
      ertStatus: p.ertStatus || {}
    });
  }

  // Fetch a historical snapshot
  async function fetchSnapshot(dateStr, timeStr) {
    setTimeTravelLoading(true);
    const safeTime = timeStr.length === 5 ? `${timeStr}:00` : timeStr;
    const url = `${API_ORIGIN}/api/occupancy-at-time-pune?date=${encodeURIComponent(dateStr)}&time=${encodeURIComponent(safeTime)}`;
    console.debug('[TimeTravel] fetching', url);
    try {
      const resp = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' } });
      if (!resp.ok) {
        const body = await resp.text().catch(() => '');
        console.error(`[TimeTravel] error ${resp.status} from ${url}`, body);
        window.alert(`Failed to load snapshot (${resp.status}). See console for details.`);
        throw new Error(`Server returned ${resp.status}`);
      }

      const p = await resp.json();
      setPayload(p);
      setTimeTravelMode(true);
      setTimeTravelTimestamp(p?.asOfLocal || `${dateStr} ${safeTime}`);
    } catch (err) {
      console.error('Failed to fetch snapshot', err);
      if (!err.message.includes('Server returned')) {
        window.alert('Failed to load snapshot. See console for details.');
      }
    } finally {
      setTimeTravelLoading(false);
    }
  }

  // Return to live mode
  async function clearTimeTravel() {
    setTimeTravelLoading(true);
    try {
      setTimeTravelMode(false);
      setTimeTravelTimestamp(null);
      try {
        const url = `${API_ORIGIN}/api/current-occupancy`;
        const resp = await fetch(url, { headers: { Accept: 'application/json' } });
        if (resp.ok) {
          const p = await resp.json();
          setPayload(p);
        } else {
          console.debug('[TimeTravel] current-occupancy not available', resp.status);
        }
      } catch (e) {
        console.debug('[TimeTravel] current-occupancy fetch failed (ignored)', e);
      }
    } finally {
      setTimeTravelLoading(false);
    }
  }

  return (
    <>
      <Navbar bg="dark" variant="dark" expand="lg" className="px-4">
        <Navbar.Brand as={Link} to="/" className="wu-brand">{headerText}</Navbar.Brand>
        <Nav className="ms-auto align-items-center">
          <div className="me-3" style={{ display: 'flex', alignItems: 'center' }}>
            <TimeTravelControl
              currentTimestamp={timeTravelTimestamp}
              onApply={(date, time) => fetchSnapshot(date, time)}
              onLive={() => clearTimeTravel()}
              loading={timeTravelLoading}
            />
          </div>

          <Nav.Link as={Link} to="/" className="nav-item-infographic"><i className="bi bi-house"></i></Nav.Link>
          <Nav.Link href="http://10.199.22.57:3000/partition/Pune/history" className="nav-item-infographic"><i className="bi bi-clock-history"></i></Nav.Link>
          <Nav.Link as={Link} to="/details" className="nav-item-infographic"><i className="fa-solid fa-calendar-day"></i></Nav.Link>
          <Nav.Link as={Link} to="/ert" className="nav-item-infographic">ERT Overview</Nav.Link>
          <Nav.Link as={Link} to="/monthlySummaryPage" className="nav-item-infographic">monthlySummaryPage</Nav.Link>
          <Nav.Link className="theme-toggle-icon" title="Dark mode only"><FaSun/></Nav.Link>
        </Nav>
      </Navbar>

      <Container fluid className="mt-2">
        {timeTravelMode && (
          <div style={{
            background: '#434d44',
            color: '#FFF',
            padding: '8px 16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderLeft: '4px solid rgb(0, 255, 21)',
            marginBottom: 8
          }}>
            <div>
              Viewing historical snapshot for:&nbsp;
              <strong>{new Date(timeTravelTimestamp).toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })}</strong>
            </div>
            <div>
              <button className="btn btn-sm btn-outline-warning" onClick={() => clearTimeTravel()} disabled={timeTravelLoading}>
                Return to Live
              </button>
            </div>
          </div>
        )}

        <Routes>
          <Route
            path="/"
            element={
              <DashboardHome
                summaryData={liveData.summary}
                detailsData={liveData.details}
                floorData={liveData.floorBreakdown}
                zoneBreakdown={liveData.zoneBreakdown}
                personnelBreakdown={liveData.personnelBreakdown}
                totalVisitedToday={liveData.totalVisitedToday}
                personnelSummary={liveData.personnelSummary}
                visitedToday={liveData.visitedToday}
                ertStatus={liveData.ertStatus}
              />
            }
          />
          <Route path="/details" element={<ZoneDetailsPage detailsData={liveData.details} />} />
          <Route path="/ert" element={<ErtPage ertStatus={liveData.ertStatus} />} />
          <Route path="/monthlySummaryPage" element={<monthlySummaryPage ertStatus={liveData.monthlySummaryPage} />} />
        </Routes>
      </Container>
    </>
  );
}

export default function WrappedApp() {
  return (
    <BrowserRouter>
      <div className="dark-theme">
        <App />
      </div>
    </BrowserRouter>
  );
}



// C:\Users\W0024618\Desktop\swipeData\client\src\pages\monthlySummaryPage.jsx

import React from 'react';
import { Container, Row, Col } from 'react-bootstrap';

import PuneMonthlyDashboard from '../components/MonthlySummary';

function monthlySummaryPage({ PuneMonthlyDashboard }) {
  return (
    <Container fluid className="py-1">
      <Row className="g-1">
        <Col><PuneMonthlyDashboard PuneMonthlyDashboard={PuneMonthlyDashboard} /></Col>
      </Row>

      <footer style={{
        backgroundColor: '#000',
        color: '#FFC72C',
        padding: '1.5rem 0',
        textAlign: 'center',
        marginTop: '2rem',
        borderTop: '2px solid #FFC72C',
        fontSize: '0.95rem',
        lineHeight: '1.6'
      }}>
        <div><strong>Global Security Operations Center</strong><br/>
          Live HeadCount against Occupancy dashboard for Western Union Pune — Real-time occupancy, floor activity, and personnel insights.
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
             style={{ color: '#FFC72C', textDecoration: 'underline' }}>
            GSOC Mail
          </a>&nbsp;|&nbsp;
          Landline:&nbsp;<span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </Container>
  );
}

export default React.memo(monthlySummaryPage);


// C:\Users\W0024618\Desktop\swipeData\client\src\components\MonthlySummary.jsx

import React, { useEffect, useMemo, useState } from "react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, LineChart, Line, AreaChart, Area, CartesianGrid, Legend } from "recharts";
import { Download, Search, Calendar } from "lucide-react";

/*
  Pune Monthly Summary Dashboard
  ---------------------------------
  - Default export is a single-file React component you can drop into a page.
  - Tailwind is used for styling (no Tailwind imports required here).
  - Charts use recharts (install: `npm i recharts`).
  - Icons use lucide-react (install: `npm i lucide-react`).

  How to use
  ----------
  1) Put this file in your React app (e.g. src/components/PuneMonthlyDashboard.jsx)
  2) Ensure Tailwind CSS is configured in your app.
  3) Install dependencies: `npm i recharts lucide-react`
  4) Mount <PuneMonthlyDashboard /> in a route or page.

  Endpoint expectation
  --------------------
  It calls: GET /api/monthly-summary?month=YYYY-MM
  Response example: the JSON you provided earlier (avgDailyHeadcount, peakOccupancy[], top10Visitors[], attendanceSheet[])

  Notes & ideas
  -------------
  - The attendance table is horizontally scrollable and color-coded for "P"/"A".
  - You can add server-side filters (personnelType) and a JSON export filter if needed.
*/

export default function PuneMonthlyDashboard({ initialMonth }) {
  // initialMonth: optional string 'YYYY-MM' to pre-load
  const now = new Date();
  const defaultMonth = initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  // UI controls
  const [q, setQ] = useState(""); // search
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => { alive = false; };
  }, [month]);

  // Derived datasets
  const days = useMemo(() => data?.attendanceSheet?.length ? Object.keys(data.attendanceSheet[0]).filter(k => /^\d{4}-\d{2}-\d{2}$/.test(k)) : data?.days || [], [data]);

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter(r => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term);
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  // small helpers
  const pctColor = (pct) => {
    if (pct >= 90) return "bg-emerald-500";
    if (pct >= 75) return "bg-yellow-500";
    return "bg-red-500";
  };

  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function humanDay(d) {
    return d.slice(8); // 'YYYY-MM-DD' -> 'DD'
  }

  return (
    <div className="p-6 max-w-[1200px] mx-auto">
      <header className="flex items-center justify-between mb-6">
        <div>
          <h1 className="text-2xl font-semibold">Pune — Monthly Summary</h1>
          <p className="text-sm text-slate-500">Monthly attendance, peak occupancy and visitor insights</p>
        </div>

        <div className="flex items-center gap-3">
          <label className="flex items-center gap-2 text-sm text-slate-600">
            <Calendar size={16} />
            <input
              aria-label="Select month"
              type="month"
              value={month}
              onChange={(e) => setMonth(e.target.value)}
              className="border rounded-md px-3 py-1 text-sm"
            />
          </label>

          <button
            onClick={downloadJSON}
            className="inline-flex items-center gap-2 bg-slate-800 text-white text-sm px-3 py-2 rounded-lg shadow"
            title="Download JSON"
          >
            <Download size={14} /> Export
          </button>
        </div>
      </header>

      {loading && (
        <div className="py-12 text-center text-slate-500">Loading...</div>
      )}

      {error && (
        <div className="p-4 bg-red-50 border border-red-200 text-red-700 rounded">Error: {error}</div>
      )}

      {!loading && data && (
        <main className="space-y-6">
          {/* KPI row */}
          <section className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="p-4 bg-white rounded-lg shadow-sm">
              <div className="text-sm text-slate-500">Avg Daily Headcount</div>
              <div className="mt-2 text-3xl font-bold">{data.avgDailyHeadcount ?? "—"}</div>
              <div className="text-xs text-slate-400">Average of the month</div>
            </div>

            <div className="p-4 bg-white rounded-lg shadow-sm">
              <div className="text-sm text-slate-500">Distinct People (attendance)</div>
              <div className="mt-2 text-3xl font-bold">{data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}</div>
              <div className="text-xs text-slate-400">People who recorded at least one In swipe</div>
            </div>

            <div className="p-4 bg-white rounded-lg shadow-sm">
              <div className="text-sm text-slate-500">Days in month</div>
              <div className="mt-2 text-3xl font-bold">{data.summary?.daysInMonth ?? (data.days?.length ?? days.length)}</div>
              <div className="text-xs text-slate-400">{month}</div>
            </div>
          </section>

          {/* Charts */}
          <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-2 p-4 bg-white rounded-lg shadow-sm">
              <h3 className="text-sm font-medium text-slate-700 mb-3">Peak Occupancy (by day)</h3>
              <div style={{ height: 240 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={data.peakOccupancy || []} margin={{ top: 10, right: 10, left: 0, bottom: 0 }}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="date" tickFormatter={d => d.slice(8)} />
                    <YAxis />
                    <Tooltip formatter={(v) => [v, 'Peak']} />
                    <Bar dataKey="peak" fill="#2563EB" radius={[6,6,0,0]} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="p-4 bg-white rounded-lg shadow-sm">
              <h3 className="text-sm font-medium text-slate-700 mb-3">Top Visitors (by visits)</h3>
              <ul className="space-y-3 max-h-[240px] overflow-auto">
                {(data.top10Visitors || []).map((t, i) => (
                  <li key={i} className="flex items-center justify-between">
                    <div>
                      <div className="text-sm font-medium">{t.name}</div>
                      <div className="text-xs text-slate-400">{t.employeeId} • {t.personnelType}</div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-semibold">{t.visits}</div>
                      <div className="text-xs text-slate-400">visits</div>
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          </section>

          {/* Attendance controls */}
          <section className="p-4 bg-white rounded-lg shadow-sm">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="relative">
                  <input
                    className="pl-9 pr-3 py-2 border rounded-md text-sm w-64"
                    placeholder="Search name or id"
                    value={q}
                    onChange={(e) => setQ(e.target.value)}
                  />
                  <div className="absolute left-2 top-2 text-slate-400"><Search size={14} /></div>
                </div>

                <select className="border rounded-md px-2 py-2 text-sm" value={personnelFilter} onChange={(e) => setPersonnelFilter(e.target.value)}>
                  {personnelTypes.map((pt) => (
                    <option key={pt} value={pt}>{pt}</option>
                  ))}
                </select>

                <label className="text-sm flex items-center gap-2">
                  <input type="checkbox" checked={showTopOnly} onChange={(e) => setShowTopOnly(e.target.checked)} /> Show top 50
                </label>
              </div>

              <div className="flex items-center gap-3 text-sm text-slate-500">
                <div>Showing <strong>{filteredAttendance.length}</strong> rows</div>
              </div>
            </div>

            {/* Attendance table */}
            <div className="overflow-auto border rounded">
              <table className="min-w-full divide-y">
                <thead className="bg-slate-50 sticky top-0">
                  <tr>
                    <th className="px-3 py-2 text-left text-xs font-medium text-slate-600">#</th>
                    <th className="px-3 py-2 text-left text-xs font-medium text-slate-600">Name</th>
                    <th className="px-3 py-2 text-left text-xs font-medium text-slate-600">Type</th>
                    {days.map(d => (
                      <th key={d} className="px-2 py-2 text-xs text-center text-slate-500">{humanDay(d)}</th>
                    ))}
                    <th className="px-3 py-2 text-xs text-right text-slate-600">Present</th>
                    <th className="px-3 py-2 text-xs text-right text-slate-600">% </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y">
                  {(showTopOnly ? filteredAttendance.slice(0,50) : filteredAttendance).map((r, idx) => (
                    <tr key={r.employeeId + idx} className="hover:bg-slate-50">
                      <td className="px-3 py-2 text-sm">{idx + 1}</td>
                      <td className="px-3 py-2 text-sm font-medium">{r.name}</td>
                      <td className="px-3 py-2 text-sm text-slate-500">{r.personnelType}</td>
                      {days.map(d => {
                        const v = r[d];
                        const isP = String(v).toUpperCase() === 'P' || v === true;
                        return (
                          <td key={d} className="px-1 py-1 text-center">
                            <div className={`inline-block text-xs font-semibold px-2 py-0.5 rounded ${isP ? 'bg-emerald-100 text-emerald-700' : 'bg-slate-100 text-slate-500'}`}>
                              {isP ? 'P' : 'A'}
                            </div>
                          </td>
                        );
                      })}
                      <td className="px-3 py-2 text-sm text-right">{r.daysPresent ?? r.daysPresent}</td>
                      <td className="px-3 py-2 text-sm text-right">
                        <span className={`inline-block px-2 py-0.5 text-xs rounded ${pctColor(parseFloat((r.attendancePercent||'0').toString()))}`}>{r.attendancePercent}</span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

          </section>

          <section className="text-xs text-slate-500">
            <div>Notes: Present = any InDirection swipe for that date (Asia/Kolkata local time). Data fetched from <code>/api/monthly-summary?month=YYYY-MM</code>.</div>
          </section>

        </main>
      )}
    </div>
  );
}
