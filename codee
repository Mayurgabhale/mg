
// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  LabelList,
  Sector
} from 'recharts';
import { Card } from 'react-bootstrap';
import { FaUsers, FaUserTie, FaUserNurse, FaUserCog, FaUserShield, FaUserAstronaut, FaUserSecret } from 'react-icons/fa'; // Example icons for personnel types
import './PersonnelDonutChart.css'; // Custom CSS for 3D-like styling

// Enhanced colors with 3D gradient definitions (WU theme + accents)
const COLORS = [
  { start: '#FFD100', end: '#FFA000', light: '#FFF8E1' }, // WU Yellow
  { start: '#009E60', end: '#006D3F', light: '#E8F5E8' }, // WU Green
  { start: '#88B04B', end: '#5F7A2E', light: '#F0F7E8' }, // Olive
  { start: '#FF6F61', end: '#D9453A', light: '#FFE8E6' }, // Coral
  { start: '#58595B', end: '#3D3F42', light: '#E9EAEB' }, // WU Gray
  { start: '#FFB800', end: '#CC9400', light: '#FFF3CD' }, // Accent Yellow
  { start: '#6B5B95', end: '#4A3F6E', light: '#EDE7F6' }  // Indigo
];

// Map personnel types to icons (customize based on your data)
const getIconForType = (type) => {
  const iconMap = {
    'Manager': <FaUserTie />,
    'Engineer': <FaUserCog />,
    'Nurse': <FaUserNurse />,
    'Security': <FaUserShield />,
    'Admin': <FaUsers />,
    'Specialist': <FaUserAstronaut />,
    'Analyst': <FaUserSecret />
  };
  return iconMap[type] || <FaUsers />;
};

// Custom active sector for hover 3D effect (lift on hover)
const renderActiveShape = (props) => {
  const { cx, cy, innerRadius, outerRadius, startAngle, endAngle, fill, percent } = props;
  return (
    <g>
      <Sector
        cx={cx}
        cy={cy}
        innerRadius={innerRadius}
        outerRadius={outerRadius + 5} // Slight expansion for 3D lift
        startAngle={startAngle}
        endAngle={endAngle}
        fill={fill}
        stroke="#fff"
        strokeWidth={3}
        filter="url(#shadow)"
      />
      {/* Inner highlight for 3D bevel */}
      <Sector
        cx={cx}
        cy={cy}
        innerRadius={innerRadius}
        outerRadius={innerRadius + 10}
        startAngle={startAngle}
        endAngle={endAngle}
        fill={`linear-gradient(to bottom, ${COLORS[props.index % COLORS.length].light}, transparent)`}
      />
    </g>
  );
};

// Custom label with icon and positioned text for infographic feel
const renderCustomLabel = (entry) => {
  const { name, percent, x, y, midAngle, cx, outerRadius } = entry;
  const radian = Math.PI / 180;
  const sin = Math.sin(-midAngle * radian);
  const cos = Math.cos(-midAngle * radian);
  const labelX = cx + (outerRadius + 40) * cos;
  const labelY = cy + (outerRadius + 40) * sin;
  const iconX = cx + (outerRadius + 25) * cos;
  const iconY = cy + (outerRadius + 25) * sin;
  const isLeft = midAngle > 90 && midAngle < 270;

  return [
    // Icon
    <g key="icon" transform={`translate(${iconX}, ${iconY})`}>
      <foreignObject x="-12" y="-12" width="24" height="24">
        <div className="pie-icon" style={{ color: '#fff', fontSize: '16px' }}>
          {getIconForType(name)}
        </div>
      </foreignObject>
    </g>,
    // Text label
    <text
      key="text"
      x={labelX}
      y={labelY}
      fill="#fff"
      textAnchor={isLeft ? 'end' : 'start'}
      dominantBaseline="middle"
      className="pie-label"
    >
      <tspan dy="-8" x={labelX} fontSize="10px">{name}</tspan>
      <tspan x={labelX} dy="16" className="percent-text" fontSize="11px" fontWeight="bold">
        {(percent * 100).toFixed(0)}%
      </tspan>
    </text>
  ];
};

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value, percent } = payload[0];
  const icon = getIconForType(name);
  return (
    <div className="custom-tooltip">
      <div className="tooltip-icon">{icon}</div>
      <div className="tooltip-title">{name}</div>
      <div className="tooltip-value">Count: {value}</div>
      <div className="tooltip-percent">({(percent * 100).toFixed(1)}%)</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white p-4 text-center">No personnel data available</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);
  const [activeIndex, setActiveIndex] = React.useState(0);

  const onPieEnter = React.useCallback((_, index) => {
    setActiveIndex(index);
  }, []);

  return (
    <Card className="mb-4 personnel-card shadow-2xl border-0">
      <Card.Header className="bg-gradient-3d text-warning text-center fw-bold">
        <h5 className="mb-0">Personnel Type Headcount</h5>
        <div className="header-underline"></div>
      </Card.Header>
      <Card.Body className="p-4 bg-dark position-relative">
        <ResponsiveContainer width="100%" height={450}>
          <PieChart className="enhanced-pie-3d">
            {/* SVG defs for 3D effects */}
            <defs>
              <filter id="shadow" x="-50%" y="-50%" width="200%" height="200%">
                <feDropShadow dx="0" dy="3" stdDeviation="3" floodColor="#000" floodOpacity="0.3" />
              </filter>
              {COLORS.map((color, idx) => (
                <linearGradient key={idx} id={`grad-${idx}`} x1="0%" y1="0%" x2="0%" y2="100%">
                  <stop offset="0%" stopColor={color.start} stopOpacity="1" />
                  <stop offset="70%" stopColor={color.end} stopOpacity="0.8" />
                  <stop offset="100%" stopColor={color.end} stopOpacity="0.5" />
                </linearGradient>
              ))}
              {/* Center star-like background */}
              <radialGradient id="center-glow" cx="50%" cy="50%" r="50%">
                <stop offset="0%" stopColor="#FFD100" stopOpacity="0.3" />
                <stop offset="100%" stopColor="#FFD100" stopOpacity="0" />
              </radialGradient>
            </defs>
            <Pie
              activeIndex={activeIndex}
              activeShape={renderActiveShape}
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={80}
              outerRadius={120}
              paddingAngle={5}
              minAngle={20}
              onMouseEnter={onPieEnter}
              stroke="#fff"
              strokeWidth={4}
              cornerRadius={8}
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={`cell-${idx}`}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={3}
                />
              ))}
            </Pie>
            <LabelList data={sorted} content={renderCustomLabel} />
            {/* Custom center with total and glow */}
            <g transform="translate(50%, 50%)">
              <circle cx="0" cy="0" r="60" fill="url(#center-glow)" />
              <text
                x="0"
                y="-15"
                textAnchor="middle"
                dominantBaseline="middle"
                className="center-title"
                fill="#fff"
              >
                Total
              </text>
              <text
                x="0"
                y="10"
                textAnchor="middle"
                dominantBaseline="middle"
                className="center-label"
                fill="#FFD100"
                fontSize="2.8rem"
                fontWeight="bold"
              >
                {total.toLocaleString()}
              </text>
              {/* Simple star shape for infographic center */}
              <polygon
                points="0,-30 8,-10 25,0 8,10 0,30 -8,10 -25,0 -8,-10"
                fill="#FFD100"
                opacity="0.2"
                transform="scale(0.8)"
              />
            </g>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{
                paddingTop: '30px',
                color: '#FFD100',
                fontSize: '1.1rem',
                fontWeight: '600'
              }}
              iconType="circle"
              iconSize={14}
              formatter={(value) => <span>{value}</span>}
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}



