we getting issue::
i select this date and time
http://localhost:5000/api/occupancy-at?date=2025-09-18&time=10:00:00
But in respons i got this;
we got alos privisu date date; 
++ but we need only select date and time not privius: the date get only select date and  time 
++++++++

{
  "asOf": "2025-09-18T04:30:00.000Z",   +++++++++++++++++++++++++++++++++
  "summary": [
    {
      "zone": "Red Zone - Outer Area",
      "count": 1
    },
    {
      "zone": "Tower B",
      "count": 5
    },
    {
      "zone": "Reception Area",
      "count": 45
    },
    {
      "zone": "Yellow Zone",
      "count": 4
    },
    {
      "zone": "2nd Floor, Pune",
      "count": 3
    },
    {
      "zone": "Orange Zone",
      "count": 2
    },
    {
      "zone": "Green Zone",
      "count": 2
    },
    {
      "zone": "Red Zone",
      "count": 2
    }
  ],
  "zoneBreakdown": [
    {
      "zone": "Red Zone - Outer Area",
      "Property Management": 1,
      "total": 1

details": {
    "Red Zone - Outer Area": [
      {
        "Dateonly": "2025-09-17",
        "Swipe_Time": "18:59:00",
        "EmployeeID": "0",
        "ObjectName1": "Patil, Shivanand (Teapoint)",
        "CardNumber": "413971",
        "PersonnelType": "Property Management",
        "zone": "Red Zone - Outer Area",
        "door": "APAC_IN_PUN_PODIUM_ST 1-DOOR 1 (RED)",
        "Direction": "OutDirection"
      }
    ],
    "Tower B": [
      {
        "Dateonly": "2025-09-17",
        "Swipe_Time": "10:22:08",
        "EmployeeID": "0",
        "ObjectName1": "Pune, VIS_PUN_150",
        "CardNumber": "419394",
        "PersonnelType": "Visitor",
        "zone": "Tower B",
        "door": "APAC_IN_PUN_TOWER B_ST5_WKS SIDE DOOR",
        "Direction": "OutDirection"
      },
   {
        "Dateonly": "2025-09-11",
        "Swipe_Time": "15:20:37",
        "EmployeeID": "318837",
        "ObjectName1": "Shaha, Ajinkya",
        "CardNumber": "602472",
        "PersonnelType": "Terminated Personnel",
        "zone": "Reception Area",
        "door": "APAC_IN_PUN_PODIUM_RED_RECEPTION TO WS ENTRY 1-DOOR NEW",
        "Direction": "OutDirection"
      },

},
  "personnelBreakdown": [
    {
      "personnelType": "Property Management",
      "count": 6
    },
    {
      "personnelType": "Visitor",
      "count": 30
    },
    {
      "personnelType": "Temp Badge",
      "count": 7
    },
    {
      "personnelType": "Terminated Personnel",
      "count": 7
    },
    {
      "personnelType": "Employee",
      "count": 10
    },
    {
      "personnelType": "None",
      "count": 1
    },
    {
      "personnelType": "Contractor",
      "count": 3
    }
  ],
  "requestedAsOfLocal": "2025-09-18T10:00:00.000+05:30",
  "requestedAsOfHuman": "2025-09-18 10:00:00",
  "_meta": {
    "historyHoursUsed": 168,
    "eventsConsidered": 106494
  }

/**
 * GET /occupancy-at?date=YYYY-MM-DD&time=HH:mm:ss
 *
 * Example:
 *   /occupancy-at?date=2025-09-16&time=03:00:00
 *
 * Optional:
 *   &hours=N   (how many hours of history to fetch before target, default 168)
 */
exports.getOccupancyAt = async (req, res) => {
  try {
    await getPool(); // ensure DB pool ready

    const { date, time, hours } = req.query;
    if (!date || !time) {
      return res.status(400).json({
        error: 'Please provide both `date` (YYYY-MM-DD) and `time` (HH:mm:ss)',
      });
    }

    // Parse target datetime in Asia/Kolkata
    let targetDT = DateTime.fromFormat(
      `${date} ${time}`,
      'yyyy-LL-dd HH:mm:ss',
      { zone: 'Asia/Kolkata' }
    );

    // fallback if only HH:mm was given
    if (!targetDT.isValid) {
      targetDT = DateTime.fromFormat(
        `${date} ${time}`,
        'yyyy-LL-dd HH:mm',
        { zone: 'Asia/Kolkata' }
      );
    }

    if (!targetDT.isValid) {
      return res.status(400).json({
        error: 'Invalid date or time format. Example: date=2025-09-16&time=03:00:00',
      });
    }

    // ✅ Check if target is in the future (compared to "now" in Asia/Kolkata)
    const nowLocal = DateTime.now().setZone('Asia/Kolkata');
    if (targetDT > nowLocal) {
      return res.status(400).json({
        error: 'Please select a relevant time — cannot be in the future',
      });
    }

    const lookbackHours = Number.isFinite(Number(hours))
      ? Math.max(1, parseInt(hours, 10))
      : 168; // default 7 days

    const sinceDT = targetDT.minus({ hours: lookbackHours }).toUTC();
    const sinceJS = sinceDT.toJSDate();

    // fetch events newer than sinceJS
    const rawEvents = await fetchNewEvents(sinceJS);

    // filter events only up to the target moment
    const targetUTCjs = targetDT.toUTC().toJSDate();
    const eventsUpToTarget = rawEvents.filter(
      evt => evt.LocaleMessageTime <= targetUTCjs
    );

    // build occupancy as of that time
    const occupancy = await buildOccupancy(eventsUpToTarget);

    occupancy.asOf = targetDT.toUTC().toISO();
    occupancy.requestedAsOfLocal = targetDT.toISO();
    occupancy.requestedAsOfHuman = targetDT.toFormat('yyyy-LL-dd HH:mm:ss');
    occupancy._meta = {
      historyHoursUsed: lookbackHours,
      eventsConsidered: eventsUpToTarget.length,
    };

    return res.json(occupancy);
  } catch (err) {
    console.error('Error in getOccupancyAt:', err);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Internal Server Error' });
    }
  }
};
