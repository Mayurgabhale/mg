const handleSearch = () => {
  const term = searchTerm.trim().toLowerCase();
  setError('');

  if (!term) {
    setSuggestions([]); // ensure suggestions empty
    return setError('Please enter name or ID');
  }

  // Find exact match
  const match = allEmployees.find(emp => {
    const name = (emp.EmpName || '').toLowerCase();
    const id = (emp.EmployeeID || '').toLowerCase();
    return name === term || id === term;
  });

  if (match) {
    selectEmployee(match);
  } else {
    setSelected(null);
    setSuggestions([]); // no match â†’ clear suggestions
    setError('No matching employee');
  }
};





....

// Build Related Results only (no dropdown) and sort by relevance
useEffect(() => {
  const term = searchTerm.trim().toLowerCase();

  // If search term is empty, clear suggestions
  if (!term) {
    setSuggestions([]);
    return;
  }

  // Filter employees by name or ID containing term
  const filtered = allEmployees.filter(emp => {
    const name = (emp.EmpName || '').toLowerCase();
    const id = (emp.EmployeeID || '').toLowerCase();
    return name.includes(term) || id.includes(term);
  });

  // Sort exact matches first
  const sorted = filtered.sort((a, b) => {
    const nameA = (a.EmpName || '').toLowerCase();
    const nameB = (b.EmpName || '').toLowerCase();
    const idA = (a.EmployeeID || '').toLowerCase();
    const idB = (b.EmployeeID || '').toLowerCase();

    const exactA = nameA === term || idA === term ? 0 : 1;
    const exactB = nameB === term || idB === term ? 0 : 1;

    return exactA - exactB;
  });

  setSuggestions(sorted);
}, [searchTerm, allEmployees]);