  const handleExport = async () => {
    if (!pickedDate || !detailRows.length) return;

    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet("Details");

    // --- Top date row (merged across all columns) ---
    sheet.mergeCells(1, 1, 1, 11); // merge across 11 columns
    const titleCell = sheet.getCell("A1");
    titleCell.value = format(pickedDate, "EEEE, d MMMM, yyyy");
    titleCell.alignment = { horizontal: "center", vertical: "middle" };
    titleCell.font = { bold: true, size: 14 };

    // --- Header row ---
    const headers = [
      "Sr",
      "Date",
      "Time",
      "Employee ID",
      "Card Number",
      "Name",
      "Personnel Type",
      "Company",
      "Primary Location",
      "Door",
      "Partition"
    ];
    const headerRow = sheet.addRow(headers);
    headerRow.eachCell(cell => {
      cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
      cell.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "FFFFC107" }
      };
      cell.alignment = { horizontal: "center" };
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
      };
    });

    // --- Data rows ---
    detailRows.forEach((r, i) => {
      const row = sheet.addRow([
        i + 1,
        r.LocaleMessageTime ? r.LocaleMessageTime.slice(0, 10) : "",
        formatApiTime12(r.LocaleMessageTime),
        r.EmployeeID,
        r.CardNumber,
        r.ObjectName1,
        r.PersonnelType,
        r.CompanyName,
        r.PrimaryLocation,
        r.Door,
        formatPartition(r.PartitionNameFriendly)
      ]);
      row.eachCell(cell => {
        cell.border = {
          top: { style: "thin" },
          left: { style: "thin" },
          bottom: { style: "thin" },
          right: { style: "thin" }
        };
      });
    });

    // --- Auto column width with limits ---
    sheet.columns.forEach(col => {
      let maxLen = 7;
      col.eachCell({ includeEmpty: true }, c => {
        maxLen = Math.max(maxLen, (c.value ? c.value.toString().length : 0) + 2);
      });
      // keep columns within a reasonable range
      col.width = Math.min(Math.max(maxLen, 10), 40);
    });

    // --- Save file ---
    const buf = await workbook.xlsx.writeBuffer();
    saveAs(new Blob([buf]), `apac_history_${format(pickedDate, "yyyyMMdd")}.xlsx`);
  };
