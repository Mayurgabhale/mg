
// CurrentLocation.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';

export default function CurrentLocation({ empId }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!empId) {
      setLoc(null);
      setError('');
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError('');
    setLoc(null);

    axios
      .get(`http://localhost:5001/api/employees/${empId}/location`)
      .then((res) => {
        if (cancelled) return;
        setLoc(res.data);
      })
      .catch((err) => {
        if (cancelled) return;
        console.error('Location load error', err && err.message ? err.message : err);
        setError('Failed to load location');
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="current-location-card" style={{ marginTop: 1 }}>
      <h4 style={{ margin: '0 0 6px 0', fontSize: 14 }}>Swipe Details</h4>

      {loading && <div style={{ color: '#fff' }}>Loading location…</div>}

      {error && <div style={{ color: '#fff' }}>{error}</div>}

      {!loading && loc && !loc.found && (
        <div style={{ color: '#2ced0e' }}>No recent swipe</div>
      )}

      {!loading &&
        loc &&
        loc.found &&
        (() => {
          const istDate = loc.timestampUTC
            ? new Date(loc.timestampUTC).toLocaleDateString('en-IN', {
                timeZone: 'Asia/Kolkata',
              })
            : '';

          const istTime = loc.timestampUTC
            ? new Date(loc.timestampUTC).toLocaleTimeString('en-IN', {
                timeZone: 'Asia/Kolkata',
              })
            : '';

          return (
            <table
              
              className='table'
            >
              <tbody>
                <tr>
                  <td style={{ opacity: 0.8, width: 140 }}>Location</td>
                  <td>
                    {loc.partition || '—'}
                    {loc.floor ? ` · ${loc.floor}` : ''}
                  </td>
                </tr>

                <tr>
                  <td style={{ opacity: 0.8 }}>Zone</td>
                  <td>{loc.Zone || '—'}</td>
                </tr>

                <tr>
                  <td style={{ opacity: 0.8 }}>Date</td>
                  <td>{istDate || '—'}</td>
                </tr>

                <tr>
                  <td style={{ opacity: 0.8 }}>Time</td>
                  <td>{istTime || '—'}</td>
                </tr>

                <tr>
                  <td style={{ opacity: 0.8 }}>Door</td>
                  <td>{loc.door || '—'}</td>
                </tr>

                <tr>
                  <td style={{ }}>Direction</td>
                  <td>{loc.direction || '—'}</td>
                </tr>
              </tbody>
            </table>
          );
        })()}
    </div>
  );
}





