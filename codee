  Search bard wrok also, name, employee id, and  card number

   {
      "ObjectName1": "India, TEMP_PUN_006",
      "Door": "APAC_IN_PUN_PODIUM_GSOC DOOR Restricted door",
      "PersonnelType": "Temp Badge",
      "EmployeeID": "",
      "CardNumber": "411106",
      "PartitionName2": "Pune",
      "LocaleMessageTime": "2025-08-16T10:54:00.000Z",
      "Direction": "InDirection",
      "PersonGUID": "8369E38D-9D1D-41AB-930B-6D9E1304CEB5",
      "Zone": "Yellow Zone",
      "Floor": "Podium Floor"
    },
  {
      "ObjectName1": "Arcilla, Lea D",
      "Door": "APAC_PH_Manila_7th Floor_Open Office Door 2-721",
      "PersonnelType": "Employee",
      "EmployeeID": "322769",
      "CardNumber": "608245",
      "PartitionName2": "Quezon City",
      "LocaleMessageTime": "2025-08-16T13:04:17.000Z",
      "Direction": "InDirection",
      "PersonGUID": "F0742FA2-AF43-4B5A-9652-7687DAAA6008",
      "Zone": "7th Floor",
      "Floor": "7th Floor"
    },

C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\SearchBar.jsx



// C:\Users\W0024618\Desktop\employee-verification\frontend\src\components\SearchBar.jsx
import React from 'react';

export default function SearchBar({ value, onChange, onSearch }) {
  return (
    <div className="search-bar-container">
      <form
        onSubmit={e => {
          e.preventDefault();
          onSearch();
        }}
      >
        <input
          type="text"
          placeholder="Search by Name or EmpID"
          value={value}
          onChange={e => onChange(e.target.value)}
          autoComplete="off"
        />
        <button type="submit">Search</button>
      </form>
    </div>
  );
}


C:\Users\W0024618\Desktop\employee-verification\frontend\src\App.js


// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);

  // Update Related Results based on searchTerm
  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();

    if (!term) {
      setSuggestions([]);
      return;
    }

    const filtered = allEmployees.filter(emp => {
      if (!emp.EmpName) return false;

      // Check EmployeeID first
      const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
      if (id.includes(term)) return true;

      // Split name into components
      const nameParts = emp.EmpName.toLowerCase().split(' ');

      // Check each name component
      return nameParts.some(part => part.includes(term));
    });

    setSuggestions(filtered);
  }, [searchTerm, allEmployees]);



  const handleSearch = () => {
    const term = searchTerm.trim().toLowerCase();
    setError('');

    if (!term) {
      setSuggestions([]);
      setSelected(null);
      return setError('Please enter name or ID');
    }

    // Find matches - now checking name components
    const matches = allEmployees.filter(emp => {
      if (!emp.EmpName) return false;

      // Check ID first
      const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
      if (id === term) return true;

      // Check name components
      const nameParts = emp.EmpName.toLowerCase().split(' ');
      return nameParts.some(part => part === term);
    });

    if (matches.length === 1) {
      selectEmployee(matches[0]);
    } else if (matches.length > 1) {
      setSuggestions(matches);
      setError('Multiple matches found - please select one');
    } else {
      setSelected(null);
      setError('No exact matching employee found');
    }
  };

  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName || '');
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  const pickSuggestion = emp => {
    if (!emp) return;
    selectEmployee(emp);
  };

  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

        <div className="right-panel">
          <div className="lists-container">

            {/* <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.length === 0 && <li>No results</li>}
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div> */}


            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.length === 0 && searchTerm && <li>No matching employees found</li>}
                {!searchTerm && <li>Start typing to see suggestions</li>}
                {suggestions.map((emp, idx) => (
                  <li key={`${emp.EmployeeID ?? emp.EmpName}-${idx}`} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}


              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map((emp, idx) => (
                  <li key={`${emp.EmployeeID ?? emp.EmpName}-${idx}`} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </div>
  );
}

export default App;
