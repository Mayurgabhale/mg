CREATE more atractie dashboard for this,
wiht diffent color and icons look more like,
backeoru whte and text black ok 
and moe and moe atractive desing,
import React, { useEffect, useMemo, useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import { FiDownload as Download, FiSearch as Search, FiCalendar as Calendar, FiRefreshCw as Refresh } from "react-icons/fi";

export default function PuneMonthlyDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth = initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => { alive = false; };
  }, [month]);

  const days = useMemo(
    () => (data?.attendanceSheet?.length ? Object.keys(data.attendanceSheet[0]).filter(k => /^\d{4}-\d{2}-\d{2}$/.test(k)) : data?.days || []),
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter(r => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term);
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const topVisitors = data?.top10Visitors || [];

  // derive distribution for pie
  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = ["#2563EB", "#10B981", "#F59E0B", "#EF4444", "#6B7280"];

  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance;
    const headers = ["employeeId", "name", "personnelType", "daysPresent", "attendancePercent"];
    const csv = [headers.join(",")].concat(
      rows.map(r => headers.map(h => `"${(r[h] ?? "").toString().replace(/"/g, '""')}"`).join(","))
    ).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `attendance-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function humanDay(d) { return d.slice(8); }

  function pctColorClass(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-slate-200 text-slate-700";
    if (n >= 90) return "bg-gradient-to-r from-emerald-400 to-emerald-600 text-white";
    if (n >= 75) return "bg-gradient-to-r from-yellow-400 to-yellow-600 text-white";
    return "bg-gradient-to-r from-rose-300 to-rose-500 text-white";
  }

  return (
    <div className="p-6 max-w-[1200px] mx-auto">
      <header className="flex items-start justify-between mb-6 gap-6">
        <div>
          <h1 className="text-2xl md:text-3xl font-extrabold">Pune — Monthly Summary</h1>
          <p className="text-sm text-slate-500 mt-1">Attendance, occupancy and visitor insights • <span className="font-medium">{month}</span></p>
        </div>

        <div className="flex items-center gap-3">
          <label className="flex items-center gap-2 text-sm text-slate-600 bg-white border rounded-lg px-3 py-2 shadow-sm">
            <Calendar size={16} />
            <input
              aria-label="Select month"
              type="month"
              value={month}
              onChange={(e) => setMonth(e.target.value)}
              className="outline-none text-sm"
            />
          </label>

          <button onClick={() => { setLoading(true); setTimeout(()=> setLoading(false), 600); }} title="Refresh" className="bg-white border rounded-lg p-2 shadow-sm">
            <Refresh size={18} />
          </button>

          <div className="flex gap-2">
            <button onClick={downloadCSV} className="inline-flex items-center gap-2 bg-slate-800 text-white text-sm px-3 py-2 rounded-lg shadow">CSV</button>
            <button onClick={downloadJSON} className="inline-flex items-center gap-2 border border-slate-200 text-sm px-3 py-2 rounded-lg">Export</button>
          </div>
        </div>
      </header>

      {loading && (
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="p-4 bg-white rounded-lg shadow-sm animate-pulse h-24" />
            <div className="p-4 bg-white rounded-lg shadow-sm animate-pulse h-24" />
            <div className="p-4 bg-white rounded-lg shadow-sm animate-pulse h-24" />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-2 p-4 bg-white rounded-lg shadow-sm animate-pulse h-56" />
            <div className="p-4 bg-white rounded-lg shadow-sm animate-pulse h-56" />
          </div>
        </div>
      )}

      {error && (
        <div className="p-4 bg-red-50 border border-red-200 text-red-700 rounded">Error: {error}</div>
      )}

      {!loading && data && (
        <main className="space-y-6">
          {/* KPI row */}
          <section className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="p-4 bg-gradient-to-br from-white to-slate-50 rounded-xl shadow-md flex items-center gap-4">
              <div className="flex-shrink-0">
                <div className="w-12 h-12 rounded-lg bg-indigo-50 flex items-center justify-center text-indigo-600 font-bold text-lg">H</div>
              </div>
              <div>
                <div className="text-xs text-slate-500">Avg Daily Headcount</div>
                <div className="text-2xl font-bold mt-1">{data.avgDailyHeadcount ?? '—'}</div>
                <div className="text-xs text-slate-400 mt-1">Monthly average of unique headcount</div>
              </div>
            </div>

            <div className="p-4 bg-black rounded-xl shadow-md flex items-center gap-4">
              <div className="flex-shrink-0">
                <div className="w-12 h-12 rounded-lg bg-emerald-50 flex items-center justify-center text-emerald-600 font-bold text-lg">P</div>
              </div>
              <div>
                <div className="text-xs text-slate-500">Distinct People</div>
                <div className="text-2xl font-bold mt-1">{data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}</div>
                <div className="text-xs text-slate-400 mt-1">Who recorded at least one swipe</div>
              </div>
            </div>

            <div className="p-4 bg-white rounded-xl shadow-md flex items-center gap-4">
              <div className="flex-shrink-0">
                <div className="w-12 h-12 rounded-lg bg-yellow-50 flex items-center justify-center text-yellow-600 font-bold text-lg">D</div>
              </div>
              <div>
                <div className="text-xs text-slate-500">Days in month</div>
                <div className="text-2xl font-bold mt-1">{data.summary?.daysInMonth ?? (data.days?.length ?? days.length)}</div>
                <div className="text-xs text-slate-400 mt-1">{month}</div>
              </div>
            </div>
          </section>

          {/* Charts */}
          <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-2 p-4 bg-white rounded-xl shadow-md">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-medium text-slate-700">Peak Occupancy</h3>
                <div className="text-xs text-slate-400">Daily peaks across the month</div>
              </div>
              <div style={{ height: 260 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={data.peakOccupancy || []} margin={{ top: 6, right: 12, left: 0, bottom: 6 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#E6E9EE" />
                    <XAxis dataKey="date" tickFormatter={d => d.slice(8)} />
                    <YAxis />
                    <Tooltip formatter={(v) => [v, 'Peak']} />
                    <Bar dataKey="peak" fill="#2563EB" radius={[6,6,0,0]} />
                    <Line type="monotone" dataKey="peak" stroke="#06B6D4" strokeWidth={2} dot={false} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="p-4 bg-white rounded-xl shadow-md">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-sm font-medium text-slate-700">People by Type</h3>
                <div className="text-xs text-slate-400">Breakdown of personnel</div>
              </div>
              <div style={{ height: 200 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie data={personnelDistribution} dataKey="value" nameKey="name" outerRadius={70} innerRadius={34} paddingAngle={4}>
                      {personnelDistribution.map((entry, idx) => (
                        <Cell key={`c-${idx}`} fill={COLORS[idx % COLORS.length]} />
                      ))}
                    </Pie>
                    <Legend verticalAlign="bottom" height={36} />
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </div>

              <div className="mt-3 space-y-2 text-xs text-slate-500">
                {personnelDistribution.map((p, i) => (
                  <div key={p.name} className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 rounded-full" style={{ background: COLORS[i % COLORS.length] }} />
                      <div>{p.name}</div>
                    </div>
                    <div className="font-medium">{p.value}</div>
                  </div>
                ))}
              </div>
            </div>
          </section>

          {/* Controls + Table */}
          <section className="p-4 bg-white rounded-xl shadow-md">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="relative">
                  <input
                    className="pl-9 pr-3 py-2 border rounded-lg text-sm w-72"
                    placeholder="Search name or id"
                    value={q}
                    onChange={(e) => setQ(e.target.value)}
                  />
                  <div className="absolute left-3 top-2 text-slate-400"><Search size={14} /></div>
                </div>

                <select className="border rounded-lg px-3 py-2 text-sm" value={personnelFilter} onChange={(e) => setPersonnelFilter(e.target.value)}>
                  {personnelTypes.map((pt) => (
                    <option key={pt} value={pt}>{pt}</option>
                  ))}
                </select>

                <label className="text-sm flex items-center gap-2">
                  <input type="checkbox" checked={showTopOnly} onChange={(e) => setShowTopOnly(e.target.checked)} /> Show top 50
                </label>
              </div>

              <div className="flex items-center gap-3 text-sm text-slate-500 bg-black ">
                <div>Showing <strong>{filteredAttendance.length}</strong> rows</div>
                <div className="text-xs">Updated: <span className="font-medium">{new Date().toLocaleString()}</span></div>
              </div>
            </div>

            <div className="overflow-auto border rounded-lg">
              <table className="min-w-full divide-y">
                <thead className="bg-slate-50 sticky top-0 z-10">
                  <tr>
                    <th className="px-3 py-3 text-left text-xs font-medium text-slate-600">#</th>
                    <th className="px-3 py-3 text-left text-xs font-medium text-slate-600">Name</th>
                    <th className="px-3 py-3 text-left text-xs font-medium text-slate-600">Type</th>
                    {days.map(d => (
                      <th key={d} className="px-2 py-3 text-xs text-center text-slate-500">{humanDay(d)}</th>
                    ))}
                    <th className="px-3 py-3 text-xs text-right text-slate-600">Present</th>
                    <th className="px-3 py-3 text-xs text-right text-slate-600">%</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y">
                  {(showTopOnly ? filteredAttendance.slice(0,50) : filteredAttendance).map((r, idx) => (
                    <tr key={(r.employeeId || idx) + "-" + idx} className="hover:bg-slate-50">
                      <td className="px-3 py-2 text-sm">{idx + 1}</td>
                      <td className="px-3 py-2 text-sm font-medium flex items-center gap-3">
                        <div className="w-8 h-8 rounded-full bg-slate-100 flex items-center justify-center text-sm font-semibold">{(r.name || "?").split(" ").map(s=>s[0]).slice(0,2).join("")}</div>
                        <div>
                          <div>{r.name}</div>
                          <div className="text-xs text-slate-400">{r.employeeId}</div>
                        </div>
                      </td>
                      <td className="px-3 py-2 text-sm text-slate-500">{r.personnelType}</td>
                      {days.map(d => {
                        const v = r[d];
                        const isP = String(v).toUpperCase() === 'P' || v === true;
                        return (
                          <td key={d} className="px-1 py-1 text-center">
                            <div className={`inline-block text-xs font-semibold px-2 py-0.5 rounded ${isP ? 'bg-emerald-100 text-emerald-800' : 'bg-slate-100 text-slate-500'}`}>
                              {isP ? 'P' : 'A'}
                            </div>
                          </td>
                        );
                      })}
                      <td className="px-3 py-2 text-sm text-right">{r.daysPresent ?? '—'}</td>
                      <td className="px-3 py-2 text-sm text-right">
                        <span className={`inline-block px-2 py-0.5 text-xs rounded ${pctColorClass(r.attendancePercent)}`}>{r.attendancePercent ?? '—'}</span>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </section>

          <section className="text-xs text-slate-500">
            <div>Notes: Present = any InDirection swipe (Asia/Kolkata). Data fetched from <code>/api/monthly-summary?month=YYYY-MM</code>.</div>
          </section>
        </main>
      )}
    </div>
  );
}
