const detailRows = useMemo(() => {
  if (!data || !pickedDate || !showDetails) return [];
  const ds = format(pickedDate, 'yyyy-MM-dd');

  return data.details
    .filter(r => {
      // match date
      if (!r.LocaleMessageTime || r.LocaleMessageTime.slice(0, 10) !== ds) return false;

      // partition (city) filter (backend / friendly)
      if (backendFilterKey) {
        const ok = r.PartitionNameFriendly === backendFilterKey ||
          apacForwardKey[r.PartitionNameFriendly] === backendFilterKey;
        if (!ok) return false;
      }

      // --- personnel header filter (Employees / Contractors) ---
      if (selectedPersonnel) {
        const pt = String(r.PersonnelType || '').toLowerCase();
        if (selectedPersonnel === 'Employee') {
          // conservative match for employees
          if (!(pt.includes('employee') || pt.includes('staff') || pt === 'employee')) return false;
        } else if (selectedPersonnel === 'Contractor') {
          // conservative match for contractors
          if (!(pt.includes('contractor') || pt.includes('vendor') || pt.includes('subcontract') || pt.includes('cont'))) return false;
        }
      }

      // If a summary-partition (country||city) was selected (optional support),
      // ensure detail row belongs to that partition.
      if (selectedSummaryPartition) {
        const [selCountry, selCity] = (selectedSummaryPartition || '').split('||');
        const city = formatPartition(r.PartitionNameFriendly || '');
        const disp = Object.values(apacPartitionDisplay).find(d => d.city === city);
        const country = disp?.country || 'Unknown';
        if (country !== selCountry || city !== selCity) return false;
      }

      // If a company is selected, only include rows for that company (unchanged behavior)
      if (!selectedCompany) return true;

      // compute country & city the same way companyRows does
      const city = formatPartition(r.PartitionNameFriendly || '');
      const disp = Object.values(apacPartitionDisplay).find(d => d.city === city);
      const country = disp?.country || 'Unknown';

      // canonical company name for this row
      const canonical = getCanonicalCompany(r);

      // build key and compare
      const rowKey = makeCompanyKey(country, city, canonical);
      return rowKey === selectedCompany;
    })
    .sort((a, b) => a.LocaleMessageTime.localeCompare(b.LocaleMessageTime));
}, [data, pickedDate, showDetails, backendFilterKey, selectedCompany, selectedPersonnel, selectedSummaryPartition]);