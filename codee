// fetch all events for the IST calendar date that contain events up to `atDate` (inclusive)
async function fetchEventsForDate(atDate) {
  const pool = await getPool();
  const req  = pool.request();

  // Snap to IST calendar day (yyyy-LL-dd) for the requested instant `atDate`
  const dayOnly = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // IST start-of-day for that date
  const startLocal = DateTime.fromISO(dayOnly, { zone: 'Asia/Kolkata' }).startOf('day');

  // Convert start-of-day IST -> UTC Date (for SQL)
  const startUTC = startLocal.toUTC().toJSDate();

  // Use the requested atDate as the upper bound (convert to UTC).
  // Use < @end in SQL, so add 1 millisecond to include events exactly at `atDate`.
  const endUTC = DateTime.fromJSDate(atDate, { zone: 'utc' }).plus({ milliseconds: 1 }).toUTC().toJSDate();

  req.input('start', sql.DateTime2, startUTC);
  req.input('end',   sql.DateTime2, endUTC);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @start
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) <  @end
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // Defensive post-filter:
  // - ensure row's IST date equals the requested day (protects against SQL quirks)
  // - ensure row time <= requested atDate (in UTC)
  const atInstant = DateTime.fromJSDate(atDate, { zone: 'utc' });
  const filtered = recordset.filter(r => {
    if (!r || !r.LocaleMessageTime) return false;

    // Interpret LocaleMessageTime as UTC then convert to IST date string
    const rowIstDate = DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');

    if (rowIstDate !== dayOnly) return false;

    // Ensure row time is not after the requested instant
    const rowUtc = DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' });
    return rowUtc <= atInstant;
  });

  return filtered;
}