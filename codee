import React, { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Line,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import {
  FiDownload as Download,
  FiSearch as Search,
  FiCalendar as Calendar,
  FiRefreshCw as Refresh,
  FiUsers as Users,
  FiUser as User,
  FiPieChart as PieChartIcon,
  FiTrendingUp as TrendingUp,
  FiFilter,
  FiCheckSquare,
  FiMenu,
  FiChevronLeft,
  FiChevronRight,
} from "react-icons/fi";

// Theme constants
const GOLD = "#D4AF37";
const BG = "bg-neutral-900"; // Tailwind dark background
const CARD =
  "bg-gradient-to-br from-neutral-800 via-neutral-900 to-black"; // subtle depth

export default function PuneMonthlyDashboardImproved({ initialMonth }) {
  const now = new Date();
  const defaultMonth =
    initialMonth ||
    `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  // Fetch data
  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => {
      alive = false;
    };
  }, [month]);

  // Days in table
  const days = useMemo(
    () =>
      data?.attendanceSheet?.length
        ? Object.keys(data.attendanceSheet[0]).filter((k) =>
            /\d{4}-\d{2}-\d{2}/.test(k)
          )
        : data?.days || [],
    [data]
  );

  // Personnel types
  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || [])
      set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  // Filtered attendance
  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter((r) => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter)
        return false;
      if (q) {
        const term = q.toLowerCase();
        return (
          (r.name || "").toLowerCase().includes(term) ||
          (r.employeeId || "").toLowerCase().includes(term)
        );
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  // Personnel distribution
  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = [GOLD, "#F59E0B", "#F97316", "#10B981", "#60A5FA", "#A78BFA"];

  // Downloads
  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly
      ? filteredAttendance.slice(0, 50)
      : filteredAttendance;
    const headers = [
      "employeeId",
      "name",
      "personnelType",
      "daysPresent",
      "attendancePercent",
    ];
    const csv = [headers.join(",")]
      .concat(
        rows.map((r) =>
          headers
            .map((h) =>
              `"${(r[h] ?? "").toString().replace(/"/g, '""')}"`
            )
            .join(",")
        )
      )
      .join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `attendance-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  // Helpers
  function humanDay(d) {
    return d.slice(8);
  }

  function pctColor(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-neutral-700 text-neutral-200";
    if (n >= 90) return "bg-emerald-600 text-black";
    if (n >= 75) return "bg-amber-500 text-black";
    return "bg-rose-600 text-white";
  }

  return (
    <div className={`min-h-screen ${BG} text-neutral-100 antialiased`}>
      <div className="flex">
        {/* Sidebar */}
        <motion.aside
          layout
          initial={{ opacity: 0, x: -20 }}
          animate={{ opacity: 1, x: 0 }}
          className={`flex-shrink-0 ${
            sidebarOpen ? "w-72" : "w-16"
          } transition-all`}
        >
          <div
            className={`rounded-2xl p-4 ${CARD} shadow-lg border border-neutral-800`}
          >
            <div className="flex items-center justify-between">
              {sidebarOpen && (
                <div>
                  <h2 className="text-lg font-bold text-yellow-400">
                    Pune Dashboard
                  </h2>
                  <p className="text-xs text-neutral-400">
                    Monthly Attendance
                  </p>
                </div>
              )}
              <button
                onClick={() => setSidebarOpen((s) => !s)}
                aria-label="Toggle sidebar"
                className="p-2 rounded-md hover:bg-neutral-800"
              >
                {sidebarOpen ? <FiChevronLeft /> : <FiChevronRight />}
              </button>
            </div>

            {sidebarOpen && (
              <nav className="mt-6 space-y-3 text-sm">
                <button className="w-full text-left px-3 py-2 rounded-md hover:bg-neutral-800 flex items-center gap-3">
                  <TrendingUp /> <span>Overview</span>
                </button>
                <button className="w-full text-left px-3 py-2 rounded-md hover:bg-neutral-800 flex items-center gap-3">
                  <PieChartIcon /> <span>People</span>
                </button>
                <button className="w-full text-left px-3 py-2 rounded-md hover:bg-neutral-800 flex items-center gap-3">
                  <Users /> <span>People Directory</span>
                </button>
              </nav>
            )}

            {sidebarOpen && (
              <div className="mt-6 pt-3 border-t border-neutral-800 text-xs text-neutral-400">
                Data range:{" "}
                <span className="font-medium text-neutral-100">{month}</span>
              </div>
            )}
          </div>
        </motion.aside>

        {/* Main content */}
        <div className="flex-1">
          {/* Header */}
          {/* ... (rest of your header, KPIs, charts, table, and footer remain the same) */}
        </div>
      </div>
    </div>
  );
}