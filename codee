// Export Details (styled, attractive like summary)
const handleExport = async () => {
  if (!detailRows.length) return;
  try {
    const excelModule = await import('exceljs');
    const Excel = excelModule.default || excelModule;

    let wb;
    if (Excel && Excel.Workbook) wb = new Excel.Workbook();
    else if (typeof Excel === 'function') wb = new Excel();
    else throw new Error('ExcelJS Workbook constructor not found');

    const ws = wb.addWorksheet('Details');

    // Define headers
    const headers = [
      'Sr', 'Date', 'Time',
      'Employee ID', 'Name', 'Personnel Type',
      'Company Name', 'Primary Location',
      'Card Number', 'Door', 'Partition'
    ];

    // Title row
    ws.mergeCells(`A1:${String.fromCharCode(64 + headers.length)}1`);
    const titleCell = ws.getCell('A1');
    titleCell.value = `Details â€” ${format(pickedDate, 'EEEE, d MMMM, yyyy')}`;
    titleCell.alignment = { horizontal: 'center', vertical: 'middle' };
    titleCell.font = { name: 'Calibri', size: 14, bold: true };

    // Spacer
    ws.addRow([]);

    // Header row
    const headerRow = ws.addRow(headers);
    headerRow.eachCell(cell => {
      cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFC107' } };
      cell.font = { bold: true, color: { argb: 'FF000000' } };
      cell.alignment = { horizontal: 'center', vertical: 'middle' };
      cell.border = {
        top: { style: 'thin' }, left: { style: 'thin' },
        bottom: { style: 'thin' }, right: { style: 'thin' }
      };
    });

    // Data rows
    detailRows.forEach((r, i) => {
      const row = ws.addRow([
        i + 1,
        (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10)) ||
          (r.SwipeDate && r.SwipeDate.slice(0, 10)) || '',
        formatApiTime12(r.LocaleMessageTime),
        r.EmployeeID,
        r.ObjectName1,
        r.PersonnelType,
        r.CompanyName || '',
        r.PrimaryLocation || '',
        r.CardNumber,
        r.Door,
        r.PartitionName2
      ]);

      row.eachCell((cell, colNumber) => {
        cell.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
        cell.font = { name: 'Calibri', size: 11 };
        if (colNumber === 1) {
          cell.alignment = { horizontal: 'center', vertical: 'middle' };
        } else {
          cell.alignment = { horizontal: 'left', vertical: 'middle' };
        }
      });

      // zebra effect
      if (i % 2 === 1) {
        row.eachCell(cell => {
          cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF7F7F7' } };
        });
      }
    });

    // Auto-fit columns
    ws.columns.forEach(col => {
      let maxLen = 10;
      col.eachCell({ includeEmpty: true }, c => {
        const v = c.value === null || c.value === undefined ? '' : String(c.value);
        maxLen = Math.max(maxLen, v.trim().length + 2);
      });
      col.width = Math.min(Math.max(maxLen, 10), 40);
    });

    // Freeze top rows
    ws.views = [{ state: 'frozen', ySplit: 3 }];

    // Save
    const buf = await wb.xlsx.writeBuffer();
    saveAs(new Blob([buf]), `history_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
  } catch (err) {
    console.error('handleExport error:', err);
  }
};