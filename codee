// src/components/FloorInOutTable.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { Card, Table, Modal, OverlayTrigger, Tooltip } from 'react-bootstrap';

// Accent palette
const ROW_COLORS = [
  '#FFC72C', '#C9A9A6', '#FFE680',
  '#FFF5EE', '#FFD11A', '#96DED1', '#FFEB99'
];

// Security Employee IDs (hardcoded)
const SECURITY_IDS = [
  "W0023386", "W0026455", "W0028120"
].map(id => id.toUpperCase());

const normalizeId = v => String(v || '').trim().toUpperCase();

// normalize floor names so "Floor 01" == "Floor 1"
const normalizeFloorName = (f) => {
  if (!f && f !== 0) return '';
  return String(f).replace(/^Floor\s0*/, 'Floor ').trim();
};

export default function FloorInOutTable({
  data = [],
  floorBreakdown = [],
  floorInOutSummary = []
}) {
  const securitySet = useMemo(() => new Set(SECURITY_IDS), []);

  // Security modal state (unchanged behavior: only security cell clickable)
  const [showSecurityModal, setShowSecurityModal] = useState(false);
  const [selectedFloorSecurity, setSelectedFloorSecurity] = useState(null);
  const [selectedPeopleSecurity, setSelectedPeopleSecurity] = useState([]);

  // Rejection modal (optional) — we'll show tooltip instead, but keep state if later needed
  const [rejectionDetails, setRejectionDetails] = useState({}); // { floor -> [details...] }
  const [rejectionSummaryMap, setRejectionSummaryMap] = useState({}); // { floor -> count }
  const [rejectionsLoading, setRejectionsLoading] = useState(false);

  // Build securityByFloor from occupants & inOnlyPersons (same logic you had)
  const securityByFloor = useMemo(() => {
    const byFloor = {};

    (floorBreakdown || []).forEach(fb => {
      const people = [];
      (fb.occupants || []).forEach(o => {
        const empId = normalizeId(o.EmployeeID);
        if (securitySet.has(empId)) people.push(o);
      });
      if (people.length) {
        byFloor[fb.floor] = (byFloor[fb.floor] || []).concat(people);
      }
    });

    (floorInOutSummary || []).forEach(f => {
      (f.inOnlyPersons || []).forEach(pid => {
        const empId = normalizeId(pid);
        if (securitySet.has(empId)) {
          byFloor[f.floor] = (byFloor[f.floor] || []).concat([
            { EmployeeID: empId, ObjectName1: "(Unknown)", Swipe_Time: "—", Door: "—", PersonnelType: "—" }
          ]);
        }
      });
    });

    return byFloor;
  }, [floorBreakdown, floorInOutSummary, securitySet]);

  // Fetch rejection summary + details from backend
  useEffect(() => {
    let mounted = true;
    async function loadRejections() {
      setRejectionsLoading(true);
      try {
        const res = await fetch('/api/rejections');
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const payload = await res.json();

        // payload: { summary: [{floor, rejectionCount}, ...], dateWise: [...], details: [...] }
        // Build simple maps for fast lookup
        const summaryMap = {};
        (payload.summary || []).forEach(s => {
          summaryMap[normalizeFloorName(s.floor)] = Number(s.rejectionCount) || 0;
        });

        // For details, group by normalized floor and also build dateWise map if present
        const detailsByFloor = {};
        (payload.details || []).forEach(d => {
          const floorKey = normalizeFloorName(d.floor || d.floor || (d.floor === 0 ? 'Floor 0' : d.floor) || d.floor) ||
                           normalizeFloorName(d.floor) ||
                           normalizeFloorName(d.Location) ||
                           ''; // fallback
          // prefer the provided `floor` if present; else try to derive from Door/Location in backend
          const nf = normalizeFloorName(d.floor || d.Location || '');
          const key = nf || normalizeFloorName(d.Location || '');

          const useKey = key || normalizeFloorName(d.floor) || 'Unknown';

          detailsByFloor[useKey] = detailsByFloor[useKey] || [];
          detailsByFloor[useKey].push(d);
        });

        if (!mounted) return;
        setRejectionSummaryMap(summaryMap);
        setRejectionDetails(detailsByFloor);
      } catch (err) {
        console.error('Failed to load rejections:', err);
        if (mounted) {
          setRejectionSummaryMap({});
          setRejectionDetails({});
        }
      } finally {
        if (mounted) setRejectionsLoading(false);
      }
    }

    loadRejections();
    return () => { mounted = false; };
  }, []);

  // Build sorted table rows (same as before) and attach securityCount & rejectionCount
  const sorted = useMemo(() => {
    const rows = (Array.isArray(data) ? data : []).map(({ floor, inSwipes, outSwipes }) => {
      const normFloor = normalizeFloorName(floor);
      return {
        floor,
        normFloor,
        inSwipes: Number(inSwipes || 0),
        outSwipes: Number(outSwipes || 0),
        inconsistency: Number(inSwipes || 0) - Number(outSwipes || 0),
        securityCount: (securityByFloor[floor] || []).length,
        rejectionCount: rejectionSummaryMap[normFloor] || 0
      };
    });
    return rows.sort((a, b) => b.inconsistency - a.inconsistency);
  }, [data, securityByFloor, rejectionSummaryMap]);

  const top = sorted[0];

  // Security modal handler (only open from Security cell)
  const handleSecurityCellClick = (floor) => {
    const people = securityByFloor[floor] || [];
    if (people.length > 0) {
      setSelectedFloorSecurity(floor);
      setSelectedPeopleSecurity(people);
      setShowSecurityModal(true);
    }
  };

  // Tooltip content for rejection cell: show date-wise breakdown (if available)
  const renderRejectionTooltip = (floor) => {
    // dateWise is returned by backend as array of {date, floors: [{floor, rejectionCount}, ...]}
    // However to keep simple we will show recent details count + first few details if details exist
    const nf = normalizeFloorName(floor);
    const byFloor = rejectionDetails[nf] || [];
    if (!byFloor.length) return 'No rejections';
    const lines = [
      `Total: ${byFloor.length}`,
      '',
      'Recent:'
    ];
    byFloor.slice(0, 6).forEach(d => {
      const date = (d.DateOnly ? (new Date(d.DateOnly)).toISOString().slice(0,10) : (d.LocaleMessageTime ? d.LocaleMessageTime.slice(0,10) : ''));
      const time = (d.SwipeTime ? (typeof d.SwipeTime === 'string' ? d.SwipeTime : new Date(d.SwipeTime).toTimeString().slice(0,8)) : '');
      lines.push(`${date} ${time} — ${d.RejectionType || d.Rejection || ''}`);
    });
    if (byFloor.length > 6) lines.push(`… +${byFloor.length - 6} more`);
    return lines.join('\n');
  };

  return (
    <>
      <Card className="mb-4 shadow-sm" style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}>
        <Card.Header className="text-center fw-bold" style={{ background: '#000', color: '#FFC72C' }}>
          Floor In vs Out Swipe Summary
        </Card.Header>

        <Card.Body style={{ height: 450, padding: '1rem', overflowY: 'auto' }}>
          {top && (
            <div className="mb-3" style={{ color: '#fff', fontSize: '1rem' }}>
              Highest inconsistency:&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.inconsistency}</span>
              &nbsp;on&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.floor}</span>
            </div>
          )}

          <Table striped bordered hover size="sm" variant="dark" className="mb-0">
            <thead>
              <tr>
                <th>Floor</th>
                <th>In Swipes</th>
                <th>Out Swipes</th>
                <th>In − Out</th>
                <th>Security</th>
                <th>Rejection</th>
              </tr>
            </thead>

            <tbody>
              {sorted.map((row, idx) => (
                <tr
                  key={row.floor}
                  style={{
                    backgroundColor: row.securityCount > 0 ? '#333300' : undefined
                  }}
                >
                  <td style={{ color: '#fff' }}>{row.floor}</td>
                  <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>{row.inSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>{row.outSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 2) % ROW_COLORS.length], fontWeight: 'bold' }}>
                    {row.inconsistency}
                  </td>

                  {/* Security cell - clickable only this cell */}
                  <td
                    style={{
                      color: row.securityCount > 0 ? '#FFC72C' : '#aaa',
                      fontWeight: row.securityCount > 0 ? 'bold' : 'normal',
                      cursor: row.securityCount > 0 ? 'pointer' : 'default',
                      textDecoration: row.securityCount > 0 ? 'underline' : 'none'
                    }}
                    onClick={() => { if (row.securityCount > 0) handleSecurityCellClick(row.floor); }}
                  >
                    {row.securityCount}
                  </td>

                  {/* Rejection cell - shows count + tooltip with quick details */}
                  <td style={{
                    color: row.rejectionCount > 0 ? '#FFCCCB' : '#aaa',
                    fontWeight: row.rejectionCount > 0 ? 'bold' : 'normal',
                    cursor: row.rejectionCount > 0 ? 'help' : 'default'
                  }}>
                    {row.rejectionCount > 0 ? (
                      <OverlayTrigger
                        placement="top"
                        overlay={<Tooltip id={`rej-tip-${row.floor.replace(/\s+/g,'_')}`}>{renderRejectionTooltip(row.normFloor)}</Tooltip>}
                      >
                        <span>{row.rejectionCount}</span>
                      </OverlayTrigger>
                    ) : (
                      0
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Card.Body>
      </Card>

      {/* Security Modal */}
      <Modal show={showSecurityModal} onHide={() => setShowSecurityModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>Security Occupants - {selectedFloorSecurity}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Table striped bordered hover size="sm">
            <thead>
              <tr>
                <th>EmployeeID</th>
                <th>Name</th>
                <th>Swipe Time</th>
                <th>Door</th>
                <th>Type</th>
              </tr>
            </thead>
            <tbody>
              {selectedPeopleSecurity.map((p, idx) => (
                <tr key={idx}>
                  <td>{p.EmployeeID}</td>
                  <td>{p.ObjectName1 || "(Unknown)"}</td>
                  <td>{p.Swipe_Time || "—"}</td>
                  <td>{p.Door || "—"}</td>
                  <td>{p.PersonnelType || "—"}</td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Modal.Body>
      </Modal>
    </>
  );
}
