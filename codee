// helper: match a member's live/current location fields against the filter zone (case-insensitive)
  const matchesFilterZone = (member, zone) => {
    if (!zone) return true;
    const needle = String(zone).toLowerCase();

    // only check live/current location fields — not baseLocationByRole
    const candidates = [
      member.zone,
      member.Zone,
      member.liveLocation,
      member.location,
      member.Location,
      member.Floor,
      member.floor,
      member['Base Location']  // include only because in some payloads it represents current zone — still safe
    ]
      .filter(Boolean)
      .map(v => String(v).toLowerCase());

    return candidates.some(c => c.includes(needle));
  };

....
const members = filterZone
    ? membersRaw.filter(m => m.present && matchesFilterZone(m, filterZone))
    : membersRaw;




.....






const filtered = filterZone
      ? raw.filter(m => m.present && matchesFilterZone(m, filterZone))
      : raw;





....


const filtered = filterZone
      ? members.filter(m => m.present && matchesFilterZone(m, filterZone))
      : members;



...




const filtered = filterZone
      ? members.filter(m => m.present && matchesFilterZone(m, filterZone))
      : members;



...



return firstColumnRoles.some(role => {
      const members = ertStatus[role] || [];
      return members.some(m => m.present && matchesFilterZone(m, filterZone));
    });