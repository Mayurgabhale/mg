const { DateTime } = require('luxon');
const { sql, getPool } = require('../config/db');
const doorZoneMap = require('../data/doorZoneMap');
const zoneFloorMap = require('../data/zoneFloorMap');
const ertMembers = require('../data/puneErtMembers.json');

const warnedKeys = new Set();

// --- helpers ---
function getTodayString() {
  return DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
}

function normalizeZoneKey(rawDoor, rawDir) {
  let door = String(rawDoor || '').trim();
  door = door.replace(/_[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');
  door = door.replace(/\s+/g, ' ').toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${door}___${dir}`;
}

function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  const zone = doorZoneMap[key];
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door–direction key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }
  return zone;
}

// --- precompute ERT map ---
const ertMap = new Map(); // name -> role
for (const [role, members] of Object.entries(ertMembers)) {
  for (const m of members) {
    const name = normalizePersonName(m.name || m.Name);
    ertMap.set(name, role);
  }
}

// --- fetch new events ---
async function fetchNewEvents(since) {
  const pool = await getPool();
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel] t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT *
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// --- build visited today ---
function buildVisitedToday(allEvents) {
  const today = getTodayString();
  const dedup = new Map();

  for (const e of allEvents) {
    if (e.Direction !== 'InDirection') continue;
    if (e.Dateonly !== today) continue;

    const key = e.PersonGUID;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) dedup.set(key, e);
  }

  const finalList = Array.from(dedup.values());
  const employees = finalList.filter(e => !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management'].includes(e.PersonnelType)).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

// --- build occupancy (optimized for Map input) ---
async function buildOccupancy(allEvents) {
  const current = {};
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const { EmployeeID, PersonGUID, ObjectName1, PersonnelType, CardNumber, Dateonly, Swipe_Time, Direction, Door } = evt;
    const dedupKey = PersonGUID || EmployeeID || CardNumber || ObjectName1;
    const zoneRaw = mapDoorToZone(Door, Direction);

    if (zoneRaw === 'Unknown Zone') continue;

    const zoneLower = zoneRaw.toLowerCase();
    if (Direction === 'OutDirection') {
      if (zoneLower === 'out of office') {
        uniquePeople.delete(dedupKey);
        delete current[dedupKey];
      } else {
        uniquePeople.set(dedupKey, PersonnelType);
        current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone: zoneRaw, door: Door, Direction };
      }
      continue;
    }

    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, PersonnelType);
      current[dedupKey] = { Dateonly, Swipe_Time, EmployeeID, ObjectName1, CardNumber, PersonnelType, zone: zoneRaw, door: Door, Direction };
      continue;
    }

    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  let employeeCount = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee','Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  const zoneMap = {};
  for (const emp of Object.values(current)) {
    const zKey = emp.zone.toLowerCase();
    if (zKey === 'out of office') continue;
    zoneMap[emp.zone] = zoneMap[emp.zone] || [];
    zoneMap[emp.zone].push(emp);
  }

  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        acc[e.PersonnelType] = (acc[e.PersonnelType]||0)+1;
        return acc;
      }, {});
      return [ zone, { total: emps.length, byPersonnelType: byType, employees: emps } ];
    })
  );

  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt]||0)+c;
    }
  }

  // --- optimized ERT status ---
  const ertStatus = {};
  for (const [name, role] of ertMap.entries()) {
    const matchEvt = Object.values(current).find(e => normalizePersonName(e.ObjectName1) === name);
    ertStatus[role] = ertStatus[role] || [];
    ertStatus[role].push({ name, present: !!matchEvt, zone: matchEvt ? matchEvt.zone : null });
  }

  return {
    asOf: new Date().toISOString(),
    summary: Object.entries(zoneDetails).map(([z,d]) => ({ zone: z, count: d.total })),
    zoneBreakdown: Object.entries(zoneDetails).map(([z,d]) => ({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown: Object.entries(floorMap).map(([f,d]) => ({ floor: f, ...d.byPersonnelType, total: d.total })),
    details: zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    ertStatus,
    personnelBreakdown: Array.from(new Map([...uniquePeople.values()].map(pt => [pt, ([...uniquePeople.values()].filter(v => v===pt).length)])), ([personnelType, count]) => ({ personnelType, count }))
  };
}

// --- SSE endpoint ---
exports.getLiveOccupancy = async (req, res) => {
  try {
    await getPool();

    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date();
    const eventsMap = new Map();
    let sseFlushScheduled = false;
    const sseBufferRef = { occupancy: null };

    const scheduleFlush = (occupancy) => {
      sseBufferRef.occupancy = occupancy;
      if (!sseFlushScheduled) {
        sseFlushScheduled = true;
        setTimeout(() => {
          res.write(`id: ${Date.now()}\n`);
          res.write(`data: ${JSON.stringify(sseBufferRef.occupancy)}\n\n`);
          if (res.flush) res.flush();
          sseFlushScheduled = false;
        }, 500);
      }
    };

    const push = async () => {
      const fresh = await fetchNewEvents(lastSeen);
      lastSeen = new Date();

      for (const evt of fresh) {
        const dedupKey = evt.PersonGUID || evt.EmployeeID || evt.CardNumber || evt.ObjectName1;
        eventsMap.set(dedupKey, evt);
      }

      const todayKolkata = DateTime.now().setZone('Asia/Kolkata').toISODate();
      for (const [key, evt] of eventsMap.entries()) {
        const ts = DateTime.fromJSDate(evt.LocaleMessageTime, { zone: 'utc' }).setZone('Asia/Kolkata').toISODate();
        if (ts !== todayKolkata) eventsMap.delete(key);
      }

      if (fresh.length > 0) {
        const occupancy = await buildOccupancy(Array.from(eventsMap.values()));
        const todayStats = buildVisitedToday(Array.from(eventsMap.values()));

        occupancy.totalVisitedToday = todayStats.total;
        occupancy.visitedToday = {
          employees: todayStats.employees,
          contractors: todayStats.contractors,
          total: todayStats.total
        };

        scheduleFlush(occupancy);
      }
    };

    await push();
    const timer = setInterval(push, 2000);
    req.on('close', () => clearInterval(timer));

  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) res.status(500).json({ error: 'Internal Server Error' });
  }
};