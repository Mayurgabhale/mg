// src/App.js
/**
 * App.js
 * -------------------------------------------------------------------------
 * Root application component for the Denver Live Occupancy dashboard.
 *
 * Responsibilities:
 * - Host the main layout & navigation (Navbar + snapshot controls).
 * - Maintain live state from SSE (EventSource) and one-time fetches (in/out inconsistency).
 * - Provide a snapshot mode (fetch occupancy for a given date/time).
 * - Route to pages: DashboardHome, FloorDetailsPage, DenverInOutInconsistencyPage.
 *
 * Notes:
 * - This file is intentionally presentation + state only. Child components
 *   (SummaryCards, FloorOccupancyChart, etc.) receive data via props.
 * - Styling is loaded from './App.css'. Toggle or remove the `.dark-theme`
 *   wrapper if you want a different global theme.
 */

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav, Form, Button, InputGroup } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';
import DenverInOutInconsistencyPage from './pages/DenverInOutInconsistency';

import './App.css';

export default function App() {
  // -----------------------
  // Live data / application state
  // -----------------------
  const [floorData, setFloorData] = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday] = useState(0);
  const [personnelSummary, setPersonnelSummary] = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday] = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary] = useState([]);

  // In/Out inconsistency page data
  const [inOutData, setInOutData] = useState(null);
  const [loadingInOut, setLoadingInOut] = useState(true);
  const [inOutError, setInOutError] = useState(null);

  // -----------------------
  // Snapshot UI + state (select a historical date/time)
  // -----------------------
  const [snapshotMode, setSnapshotMode] = useState(false);
  const [snapshotTime, setSnapshotTime] = useState(''); // "HH:MM" or "HH:MM:SS"
  const [snapshotDate, setSnapshotDate] = useState(() => {
    // Default to today's date in America/Denver (en-CA: YYYY-MM-DD)
    try {
      return new Date().toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
    } catch (e) {
      // Fallback if environment lacks timeZone support
      const d = new Date();
      const yyyy = d.getFullYear();
      const mm = String(d.getMonth() + 1).padStart(2, '0');
      const dd = String(d.getDate()).padStart(2, '0');
      return `${yyyy}-${mm}-${dd}`;
    }
  });
  const [snapshotLoading, setSnapshotLoading] = useState(false);
  const [snapshotError, setSnapshotError] = useState(null);
  const [snapshotData, setSnapshotData] = useState(null); // payload returned by snapshot API

  // -----------------------
  // Server-Sent Events (live updates)
  // -----------------------
  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');

    es.onmessage = (e) => {
      try {
        const p = JSON.parse(e.data);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []);
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };

    es.onerror = (err) => {
      console.error('SSE error:', err);
      // On error, close to avoid repeated failures.
      es.close();
    };

    return () => {
      es.close();
    };
  }, []);

  // -----------------------
  // One-time fetch: In/Out inconsistency data for Denver
  // -----------------------
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP ${res.status} - ${res.statusText}`);
        return res.json();
      })
      .then((data) => {
        // Store the floor inconsistency array (the page expects an array)
        setInOutData(data.floorInconsistency || []);
        setLoadingInOut(false);
      })
      .catch((err) => {
        console.error('Failed to load in/out inconsistency:', err);
        setInOutError(err.message || String(err));
        setLoadingInOut(false);
      });
  }, []);

  // -----------------------
  // Snapshot handlers
  // -----------------------
  const handleSnapshotTimeChange = (e) => {
    setSnapshotTime(e.target.value);
    setSnapshotError(null);
  };

  const handleSnapshotDateChange = (e) => {
    setSnapshotDate(e.target.value);
    setSnapshotError(null);
  };

  const applySnapshot = async () => {
    // Basic validation
    if (!snapshotTime) {
      setSnapshotError('Select a time first.');
      return;
    }
    if (!snapshotDate) {
      setSnapshotError('Select a date first.');
      return;
    }

    // Ensure time has seconds (append :00 if only HH:MM)
    const timeForApi = snapshotTime.length === 5 ? `${snapshotTime}:00` : snapshotTime;

    setSnapshotLoading(true);
    setSnapshotError(null);

    try {
      const url = `http://localhost:5000/api/occupancy-at-time-denver?date=${encodeURIComponent(
        snapshotDate
      )}&time=${encodeURIComponent(timeForApi)}`;
      const resp = await fetch(url);

      if (!resp.ok) {
        // if API returns text error body, include it for debugging
        const txt = await resp.text();
        throw new Error(`${resp.status} ${resp.statusText} - ${txt}`);
      }

      const json = await resp.json();
      setSnapshotData(json);
      setSnapshotMode(true);
    } catch (err) {
      console.error('Failed to fetch snapshot:', err);
      setSnapshotError(err.message || 'Failed to fetch snapshot');
      setSnapshotData(null);
      setSnapshotMode(false);
    } finally {
      setSnapshotLoading(false);
    }
  };

  const clearSnapshot = () => {
    setSnapshotMode(false);
    setSnapshotData(null);
    setSnapshotTime('');
    setSnapshotError(null);
    setSnapshotLoading(false);
    // keep snapshotDate so the user doesn't need to reselect
  };

  // -----------------------
  // Active dataset selection: snapshot (if enabled) or live
  // -----------------------
  const activeFloorData =
    snapshotMode && snapshotData ? snapshotData.floorBreakdown || [] : floorData;
  const activePersonnelBreakdown =
    snapshotMode && snapshotData ? snapshotData.personnelBreakdown || [] : personnelBreakdown;
  const activeTotalVisitedToday =
    snapshotMode && snapshotData ? snapshotData.totalVisitedToday || 0 : totalVisitedToday;
  const activePersonnelSummary =
    snapshotMode && snapshotData ? snapshotData.personnelSummary || { employees: 0, contractors: 0 } : personnelSummary;
  const activeVisitedToday =
    snapshotMode && snapshotData ? snapshotData.visitedToday || { employees: 0, contractors: 0, total: 0 } : visitedToday;
  const activeFloorInOutSummary =
    snapshotMode && snapshotData ? snapshotData.floorInOutSummary || [] : floorInOutSummary;

  // Snapshot label for header when snapshot is active
  let snapshotLabel = null;
  if (snapshotMode && snapshotData) {
    const asOfLocal = snapshotData.asOfLocal || snapshotData.asOf || snapshotData.asOfUTC;
    try {
      const d = asOfLocal ? new Date(asOfLocal) : null;
      const formatted = d ? d.toLocaleString('en-US', { timeZone: 'America/Denver' }) : `${snapshotDate} ${snapshotTime}`;
      snapshotLabel = `Snapshot: ${formatted} (Denver)`;
    } catch (e) {
      snapshotLabel = `Snapshot: ${snapshotDate} ${snapshotTime}`;
    }
  }

  // -----------------------
  // Render
  // -----------------------
  return (
    <BrowserRouter>
      {/* NOTE: 'dark-theme' wrapper present - remove or change if you want the light theme */}
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy â€” Western Union Denver
          </Navbar.Brand>

          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>

            {/* Link to your existing history / partition UI */}
            <Nav.Link href="http://10.199.22.57:3002/partition/US.CO.OBS/history" className="nav-item-infographic">
              History
            </Nav.Link>

            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>

            <Nav.Link as={Link} to="/inout-inconsistency-denver" className="nav-item-infographic">
              In/Out Inconsistency
            </Nav.Link>

            {/* Snapshot time + date picker UI */}
            <Form className="d-flex align-items-center ms-3" onSubmit={(e) => e.preventDefault()}>
              <InputGroup>
                <Form.Control
                  type="date"
                  value={snapshotDate}
                  onChange={handleSnapshotDateChange}
                  title="Select date (Denver)"
                  style={{ maxWidth: 150 }}
                />
                <Form.Control
                  type="time"
                  step="1" // allow seconds in supporting browsers
                  value={snapshotTime}
                  onChange={handleSnapshotTimeChange}
                  title="Select time (Denver)"
                  style={{ maxWidth: 120 }}
                />
                <Button variant="outline-light" onClick={applySnapshot} disabled={snapshotLoading}>
                  {snapshotLoading ? 'Loadingâ€¦' : 'Apply'}
                </Button>
                <Button variant="outline-secondary" onClick={clearSnapshot} className="ms-1">
                  Clear
                </Button>
              </InputGroup>
            </Form>

            {/* Theme indicator / toggle placeholder */}
            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          {/* If snapshot active show a small label */}
          {snapshotLabel && (
            <div style={{ color: '#FFC72C', marginBottom: 8 }}>
              {snapshotLabel}
              {snapshotError && <span style={{ color: 'salmon', marginLeft: 10 }}>{snapshotError}</span>}
            </div>
          )}

          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={activePersonnelSummary}
                  totalVisitedToday={activeTotalVisitedToday}
                  visitedToday={activeVisitedToday}
                  floorData={activeFloorData}
                  personnelBreakdown={activePersonnelBreakdown}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={activeFloorData}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/inout-inconsistency-denver"
              element={
                <DenverInOutInconsistencyPage
                  data={inOutData}
                  loading={loadingInOut}
                  error={inOutError}
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}