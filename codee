C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\components\ERTOverview.jsx





// src/components/ERTOverview.jsx
import React, { useState, useEffect } from "react";
import { Card, Badge, Row, Col } from "react-bootstrap";
import { FaEnvelopeOpenText, FaMapMarkerAlt, FaUsers } from "react-icons/fa";
import membersData from "../data/lacaErtMembers.json";
import Header from "../components/Header";
import { lookupFloor } from "../utils/floorLookup";

export default function LacaERTOverview() {
  const [members, setMembers] = useState([]);



  useEffect(() => {
    async function fetchData() {
      try {
        const res = await fetch(
          "http://localhost:3001/api/occupancy/live-summary"
        );
        const liveData = await res.json();

        const liveDetails = Array.isArray(liveData.details)
          ? liveData.details
          : [];

        const merged = membersData["Team Members"].map((m) => {
          const live = liveDetails.find(
            (d) => d.EmployeeID === m.emp_id
          ) || {};

          const inLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "InDirection")
              : "";
          const outLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "OutDirection")
              : "";

          return {
            ...m,
            present: !!live.EmployeeID,
            inLocation,
            outLocation,
            door: live.Door || "",
          };
        });

        // ✅ Sort so available members are first
        const sorted = merged.sort((a, b) => (a.present === b.present ? 0 : a.present ? -1 : 1));

        setMembers(sorted);
      } catch (err) {
        console.error("Error fetching live data:", err);
      }
    }

    fetchData();
    const interval = setInterval(fetchData, 15000);
    return () => clearInterval(interval);
  }, []);

  return (
    <>
      <Header />

      <Card
        style={{
          backgroundColor: "#1C1C1C",
          color: "#F0F0F0",
          border: "1px solid #333",
          borderRadius: "12px",
        }}
      >
        <Card.Header  
          style={{
            borderBottom: "1px solid #333",
            fontWeight: "600",
            display: "flex",
            alignItems: "center",
            gap: "10px",
            backgroundColor: "#111",
            color: "#fff",
            fontSize: "1.2rem",
          }}
        >
          <FaUsers style={{ color: "#1ABC9C" }} />
          Costa Rica ERT Team Members
        </Card.Header>

        <Card.Body style={{ padding: "1.5rem" }}>
          <Row xs={1} md={3} className="g-4">

            {members.map((m, i) => {
              const isAway =
                !m.present ||
                (m.outLocation && m.outLocation.trim().toLowerCase() === "out of office");

              return (
                <Col key={i}>
                  <div
                    style={{
                      backgroundColor: "#2C2C2C",
                      borderRadius: "10px",
                      padding: "1rem",
                      border: "1px solid #444",
                      height: "100%",
                    }}
                  >
                    {/* Name + Status */}
                    <div className="d-flex justify-content-between align-items-center">
                      <h5 style={{ fontWeight: "600", marginBottom: "0.5rem" }}>
                        {m.name}{" "}
                        <span style={{ fontSize: "0.8rem", color: "#bbb" }}>
                          ({m.emp_id})
                        </span>
                      </h5>

                      <Badge
                        bg={!isAway ? "success" : "danger"}
                        pill
                        style={{ marginBottom: "0.8rem" }}
                      >
                        {!isAway ? "Available" : "Away"}
                      </Badge>
                    </div>

                    {/* Email */}
                    <div style={{ fontSize: "0.85rem" }}>
                      <div className="d-flex align-items-center mb-2">
                        <FaEnvelopeOpenText
                          className="me-2"
                          style={{ color: "#3498DB", minWidth: "16px" }}
                        />
                        <a
                          href={`mailto:${m.email}`}
                          style={{ color: "#5DADE2", textDecoration: "none" }}
                        >
                          {m.email}
                        </a>
                      </div>

                      {/* Location Info */}
                      {m.present && (m.inLocation || m.outLocation) && (
                        <div className="mb-2">
                          <div className="d-flex align-items-center">
                            <FaMapMarkerAlt
                              className="me-2"
                              style={{ color: "#E74C3C", minWidth: "16px" }}
                            />
                            <span style={{ color: "#E74C3C" }}>
                              {m.inLocation || "Unknown"}
                            </span>
                          </div>
                          {m.outLocation && m.outLocation !== m.inLocation && (
                            <div
                              style={{
                                marginLeft: "1.5rem",
                                fontSize: "0.8rem",
                                color: "#aaa",
                              }}
                            >
                              Exit To: {m.outLocation}
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </Col>
              );
            })}



          </Row>
        </Card.Body>

      </Card>
    </>
  );
}








C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\data\lacaErtMembers.json

{
  "Team Members": [
    { "name": "Esteban Lopez Villalobos", "email": "Esteban.LopezVillalobos@wu.com", "emp_id": "302566" },
    { "name": "Melissa Castro", "email": "Melissa.CastroUgalde@wu.com", "emp_id": "308530" },
    { "name": "Leonardo Escalante", "email": "Leonardo.Escalante@wu.com", "emp_id": "249719" },
    { "name": "María Gabriela Brenes", "email": "Maria.Brenes@wu.com", "emp_id": "239462" },
    { "name": "Jose David Hernandez Salazar", "email": "JOSE.HERNANDEZ@wu.com", "emp_id": "315501" },
    { "name": "Montserrat Sanabria Moreno", "email": "Monserrat.Sanabria@wu.com", "emp_id": "313147" },
    { "name": "Marcelo Rivera Gutierrez", "email": "Marcelo.Rivera@wu.com", "emp_id": "315354" },
    { "name": "Leandro Agredo Orozco", "email": "Leandro.AgredoOrozco@wu.com", "emp_id": "328465" },
    { "name": "Natalia Araya Morera", "email": "NATALIA.ARAYA@wu.com", "emp_id": "81241784" },
    { "name": "Carolina Flores Reyes", "email": "carolina.floresreyes@wu.com", "emp_id": "73432644" },
    { "name": "Paula Jimenez", "email": "paula.jimenez@wu.com", "emp_id": "305073" },
    { "name": "Guido Alberto Ramírez Camacho", "email": "guido.ramirez@westernunion.com", "emp_id": "238287" },
    { "name": "Jason Chaves Vega", "email": "jason.chaves@westernunion.com", "emp_id": "324949" },
    { "name": "Anahita Hashemi", "email": "anahita.hashemi@wu.com", "emp_id": "311968" },
    { "name": "Olga Carvajal Castillo", "email": "olga.carvajal@westernunion.com", "emp_id": "319021" },
    { "name": "Warner Alberto Granados Ewers", "email": "warner.granados@westernunion.com", "emp_id": "178990" },
    { "name": "David Arce Calvo", "email": "david.arce@wu.com", "emp_id": "319972" },
    { "name": "David Briceño", "email": "david.briceno@wu.com", "emp_id": "314240" },
    { "name": "Jafeth Alexander Morales", "email": "Jafet.Morales@westernunion.com", "emp_id": "326589" },
    { "name": "Karl Anthony Orozco", "email": "karl.orozcochinchilla@westernunion.com", "emp_id": "306365" },
    { "name": "Omar Arias", "email": "omar.arias@westernunion.com", "emp_id": "313388" },
    { "name": "Alfonso Guardia", "email": "alfonso.guardia@westernunion.com", "emp_id": "308280" },
    { "name": "Ximena Espinoza", "email": "ximena.espinoza@westernunion.com", "emp_id": "327061" },
    { "name": "Mayer Pereira", "email": "meyer.pereira@westernunion.com", "emp_id": "237998" },
    { "name": "Steven Alexander Alvarado Fallas", "email": "steven.alvarado@wu.com", "emp_id": "243957" },
    { "name": "Kevin Alonso Arce", "email": "kevin.arce@wu.com", "emp_id": "314618" },
    { "name": "Ronald Andrey Garro", "email": "ronald.garro@wu.com", "emp_id": "306147" },
    { "name": "Carlos Manuel Hernandez", "email": "carlos.hernandezgonzalez@westernunion.com", "emp_id": "304864" },
    { "name": "Taeseung Josue Yoon", "email": "taeseung.yoon@westernunion.com", "emp_id": "325507" },
    { "name": "Andrey Molina", "email": "Andrey.Molina@wu.com", "emp_id": "323105" },
    { "name": "Dra Lillan Marti", "email": "Lillan.Marti@westernunion.com", "emp_id": "11561479" }
  ]
}

C:\Users\W0024618\Desktop\laca-occupancy-frontend\src\utils\floorLookup.js


// src/utils/floorLookup.js
import doorMap from './doorMap'; // relative to this file

/**
 * Given a partition, door and direction, return the mapped floor string.
 * Falls back to 'Unmapped' only if there's no matching entry.
 */
export function lookupFloor(partition, door, direction) {
  const entry = doorMap.find(d =>
    d.partition === partition && d.door === door
  );
  if (!entry) return 'Unmapped';


  // return direction === 'InDirection'
  //   ? entry.inDirectionFloor
  //   : entry.outDirectionFloor;

  // trim off any accidental leading/trailing spaces
  const raw = direction === 'InDirection'
    ? entry.inDirectionFloor
    : entry.outDirectionFloor;
  return raw.trim() || 'Unmapped';

}




























