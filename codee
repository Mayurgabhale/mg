useEffect(() => {
  const term = searchTerm.trim().toLowerCase();
  if (!term) {
    setSuggestions([]);
    return;
  }

  // Only include employees whose name or ID includes the term
  const filtered = allEmployees.filter(emp => {
    const id = (emp.EmployeeID || '').toLowerCase();
    const name = (emp.EmpName || '').toLowerCase();
    return name.includes(term) || id.includes(term);
  });

  if (filtered.length === 0) {
    setSuggestions([]);
    return;
  }

  // Sort so exact matches come first
  const sorted = filtered.sort((a, b) => {
    const nameA = (a.EmpName || '').toLowerCase();
    const nameB = (b.EmpName || '').toLowerCase();
    const idA = (a.EmployeeID || '').toLowerCase();
    const idB = (b.EmployeeID || '').toLowerCase();

    const exactA = nameA === term || idA === term ? 0 : 1;
    const exactB = nameB === term || idB === term ? 0 : 1;

    return exactA - exactB;
  });

  setSuggestions(sorted);
}, [searchTerm, allEmployees]);



....


Read all code carefully,

my requirements
1. in Related Results show only match (for example if is search lloyds then only show lloyds, i search neil then only show neil ) not other 
2. if not match then Related Results empty
3. search lloyds, then lloyds show in top in Related Results


// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);

  // --- Build Related Results only (no dropdown) and sort by relevance


useEffect(() => {
  const term = searchTerm.trim().toLowerCase();
  if (!term) {
    setSuggestions([]);
    return;
  }

  const filtered = allEmployees.filter(emp => {
    const id = (emp.EmployeeID || '').toLowerCase();
    const name = (emp.EmpName || '').toLowerCase();
    return id.includes(term) || name.includes(term);
  });

  const rankOf = (emp) => {
    const id = (emp.EmployeeID || '').toLowerCase();
    const name = (emp.EmpName || '').toLowerCase();
    if (name === term || id === term) return 0;
    if (name.startsWith(term) || id.startsWith(term)) return 1;
    return 2;
  };

  const pos = (str) => {
    const i = str.indexOf(term);
    return i === -1 ? Number.POSITIVE_INFINITY : i;
  };

  const sorted = filtered
    .map((emp, idx) => ({ emp, idx }))
    .sort((a, b) => {
      const an = (a.emp.EmpName || '').toLowerCase();
      const bn = (b.emp.EmpName || '').toLowerCase();
      const ai = (a.emp.EmployeeID || '').toLowerCase();
      const bi = (b.emp.EmployeeID || '').toLowerCase();

      const ra = rankOf(a.emp);
      const rb = rankOf(b.emp);
      if (ra !== rb) return ra - rb;

      const pa = Math.min(pos(an), pos(ai));
      const pb = Math.min(pos(bn), pos(bi));
      if (pa !== pb) return pa - pb;

      if (an.length !== bn.length) return an.length - bn.length;
      return a.idx - b.idx;
    })
    .slice(0, 40)
    .map(x => x.emp);

  setSuggestions(sorted);
}, [searchTerm, allEmployees])







const handleSearch = () => {
  setError('');
  const term = searchTerm.trim().toLowerCase();
  if (!term) {
    setSuggestions([]);
    return setError('Please enter name or ID');
  }

  // Clear previous suggestions before new search
  setSuggestions([]);

  const match = allEmployees.find(emp => {
    const id = (emp.EmployeeID || '').toLowerCase();
    const name = (emp.EmpName || '').toLowerCase();
    return name === term || id === term;
  });
  
  if (match) {
    selectEmployee(match);
  } else {
    setSelected(null);
    setError('No matching employee');
  }
};


  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName || '');
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  // Clicking a related result should NOT clear the list
  const pickSuggestion = emp => {
    if (!emp) return;
    selectEmployee(emp);
  };

  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

        <div className="right-panel">
          <div className="lists-container">
            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map(emp => (
                  <li key={emp.id} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div style={{ }}>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </div>
  );
}

export default App;





import React from 'react';

export default function SearchBar({ value, onChange, onSearch }) {
  return (
    <div className="search-bar-container">
      <form
        onSubmit={e => {
          e.preventDefault();
          onSearch();
        }}
      >
        <input
          type="text"
          placeholder="Search by Name or EmpID"
          value={value}
          onChange={e => onChange(e.target.value)}
          autoComplete="off"
        />
        <button type="submit">Search</button>
      </form>
    </div>
  );
}


