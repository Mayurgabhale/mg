thank. 
know, the on problme is
http://localhost:5000/api/occupancy-at?datetime=2025-09-11T18:30:00
i search 2025-09-11 this date. but in this date privius date, count alos disply,
but i want to get only search date count, not other date 2025-09-11 only this date, 
not othe date, ok 

// *****************************************
// /////////////////////////////////////////  start


// ---------- NEW: fetchEventsUntil / helpers / controller for occupancy-at ----------
async function fetchEventsUntil(until) {
  // until: a JS Date object (UTC instant) â€” same style as fetchNewEvents uses
  const pool = await getPool();
  const req  = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
       DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/**
 * Build visited counts for a specific local date (yyyy-LL-dd in Asia/Kolkata)
 * Re-implements the same "dedupe last swipe for the day" logic as buildVisitedToday but for any date.
 */
function buildVisitedForDate(allEvents, dateStr) {
  // dateStr expected 'yyyy-LL-dd' (Asia/Kolkata local date)
  const dateOnly = dateStr;

  const ins = allEvents.filter(evt => {
    return evt.Direction === 'InDirection' && evt.Dateonly === dateOnly;
  });

  // dedupe by PersonGUID keeping the latest LocaleMessageTime
  const dedup = new Map();
  for (const e of ins) {
    const key = e.PersonGUID || e.EmployeeID || e.CardNumber || e.ObjectName1;
    const prev = dedup.get(key);
    if (!prev || e.LocaleMessageTime > prev.LocaleMessageTime) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());

  const employees = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/**
 * Controller: GET /occupancy-at
 * query params:
 *  - datetime (ISO, or any ISO-ish string) OR
 *  - date=yyyy-LL-dd  and time="10:00 PM" or "22:00" or "6:00"
 *
 * Returns same occupancy shape as buildOccupancy but as of the requested timestamp.
 */
exports.getOccupancyAtTime = async (req, res) => {
  try {
    // parse incoming date/time
    const { datetime, date, time } = req.query;

    let dt; // Luxon DateTime in Asia/Kolkata
    if (datetime) {
      // try parse as ISO first; if no zone provided, assume Asia/Kolkata
      dt = DateTime.fromISO(datetime, { zone: 'Asia/Kolkata' });
      if (!dt.isValid) {
        // try RFC or generic parse as fallback
        dt = DateTime.fromRFC2822(datetime, { zone: 'Asia/Kolkata' });
      }
    } else {
      // build from date + time (with sensible defaults)
      const theDate = date || getTodayString(); // already returns yyyy-LL-dd in Asia/Kolkata
      const theTime = time || '00:00';
      // try multiple time formats
      const tryFormats = [
        'yyyy-LL-dd h:mm a',
        'yyyy-LL-dd hh:mm a',
        'yyyy-LL-dd H:mm',
        'yyyy-LL-dd HH:mm',
        'yyyy-LL-dd h:mm',
        'yyyy-LL-dd hh:mm'
      ];
      for (const fmt of tryFormats) {
        const cand = DateTime.fromFormat(`${theDate} ${theTime}`, fmt, { zone: 'Asia/Kolkata' });
        if (cand.isValid) { dt = cand; break; }
      }
      // as last resort, try ISO combine
      if (!dt) {
        const isoStr = `${theDate}T${theTime}`;
        dt = DateTime.fromISO(isoStr, { zone: 'Asia/Kolkata' });
      }
    }

    if (!dt || !dt.isValid) {
      return res.status(400).json({
        error: 'Invalid/Unparseable datetime. Use datetime=ISO or date=yyyy-LL-dd & time="10:00 PM" or "22:00".'
      });
    }

    // Convert to JS Date (UTC instant) to pass into SQL parameter
    const untilJSDate = dt.toJSDate();

    // Fetch all events up to that instant (inclusive) and build occupancy from them
    const events = await fetchEventsUntil(untilJSDate);

    // buildOccupancy expects the events array with same shape; it will compute the headcount
    const occupancy = await buildOccupancy(events);

    // Adjust the asOf to the requested (local) timestamp instead of "now"
    occupancy.asOf = dt.setZone('Asia/Kolkata').toISO();

    // Also provide visited counts for that local date
    const requestedDateStr = dt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
    const visited = buildVisitedForDate(events, requestedDateStr);
    occupancy.totalVisitedOnDate = visited.total;
    occupancy.visitedOnDate = {
      employees: visited.employees,
      contractors: visited.contractors,
      total: visited.total,
      date: requestedDateStr
    };

    return res.json(occupancy);

  } catch (err) {
    console.error('Error in getOccupancyAtTime:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};








// *****************************************
// ///////////////////////////////////////// end

