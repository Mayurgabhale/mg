// routes/occupancyDenverRoutes.js
const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy,getSnapshotAt } = require('../controllers/denverLiveOccupancyController');
const { getDenverInOutInconsistency } = require('../controllers/denverInOutInconsistencyController');

// Denver live occupancy
router.get('/live-occupancy-denver', getDenverLiveOccupancy);

// Denver in/out inconsistency trends
router.get('/inout-inconsistency-denver', getDenverInOutInconsistency);
router.get('/denver-occupancy-at', getSnapshotAt);

module.exports = router;




  // //////////////////////////////////// start
  // ************************************


// ---- Fix normalizeZoneKey (was using wrong template syntax) ----
function normalizeZoneKey(rawDoor, rawDir) {
  // 1) Ensure itâ€™s a string and trim whitespace
  let door = String(rawDoor || '').trim();

  // 2) Strip any "_HH:MM:SS" or "XX:XX:XX" suffix (hex codes or times at end)
  door = door.replace(/[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');

  // 3) Collapse multiple spaces into one, then uppercase
  door = door.replace(/\s+/g, ' ').toUpperCase();

  // 4) Pick the direction token exactly as doorZoneMap expects
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';

  return `${door}___${dir}`;
}

// ---- Fix normalizePersonName (was using wrong template syntax) ----
function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}










// Handler: GET /api/occupancy-at?at=
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;

    // If no 'at' provided, default to "now" in Asia/Kolkata
    let atDate;
    if (!atRaw) {
      atDate = DateTime.now().setZone('Asia/Kolkata').toJSDate();
    } else {
      // Try to parse ISO first (accept timezone), then accept date-only (yyyy-MM-dd) in Asia/Kolkata
      let dt = DateTime.fromISO(atRaw, { zone: 'utc' });
      if (!dt.isValid) {
        // try date-only format in Asia/Kolkata
        dt = DateTime.fromFormat(atRaw, 'yyyy-LL-dd', { zone: 'Asia/Kolkata' });
      }
      if (!dt.isValid) {
        // fallback to native Date as last resort and validate
        const native = new Date(atRaw);
        if (Number.isNaN(native.getTime())) {
          return res.status(400).json({
            error: 'invalid "at" timestamp (provide ISO 8601 or yyyy-MM-dd).'
          });
        }
        atDate = native;
      } else {
        atDate = dt.toJSDate();
      }
    }

    // fetch events in the 24h window ending at atDate
    const events = await fetchEventsWindow(atDate);

    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);

  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};






  // //////////////////////////////////// end
  // ************************************

