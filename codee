import React, { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import {
  BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Line, PieChart, Pie, Cell
} from "recharts";
import {
  FiDownload as Download, FiSearch as Search, FiCalendar as Calendar,
  FiRefreshCw as Refresh, FiUsers as Users, FiUser as User,
  FiPieChart as PieChartIcon, FiTrendingUp as TrendingUp,
  FiFilter, FiCheckSquare, FiMenu, FiChevronLeft, FiChevronRight, FiPlus
} from "react-icons/fi";

const GOLD = "#FFD166";
const GOLD_DEEP = "#D4AF37";
const BG_GRADIENT = "bg-gradient-to-br from-black via-neutral-900 to-neutral-950";
const CARD_GLASS = "bg-white/4 backdrop-blur-md border border-white/6 shadow-lg";

export default function PuneMonthlyPremiumDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth = initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);
  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);
  const [darkMode, setDarkMode] = useState(true);
  const [hoveredBar, setHoveredBar] = useState(null);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true); setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally { if (alive) setLoading(false); }
    }
    load();
    return () => { alive = false; };
  }, [month]);

  const days = useMemo(
    () => data?.attendanceSheet?.length
      ? Object.keys(data.attendanceSheet[0]).filter((k) => /\d{4}-\d{2}-\d{2}/.test(k))
      : data?.days || [],
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter((r) => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term);
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = [GOLD, "#F59E0B", "#F97316", "#10B981", "#60A5FA", "#A78BFA"];

  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a); a.click(); a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance;
    const headers = ["employeeId","name","personnelType","daysPresent","attendancePercent"];
    const csv = [headers.join(",")].concat(
      rows.map((r)=>headers.map((h)=>`"${(r[h]??"").toString().replace(/"/g,'""')}"`).join(","))
    ).join("\n");
    const blob = new Blob([csv], {type:"text/csv"});
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url; a.download = `attendance-${month}.csv`;
    document.body.appendChild(a); a.click(); a.remove();
    URL.revokeObjectURL(url);
  }

  function humanDay(d){return d.slice(8);}
  function pctColor(pct){const n=parseFloat((pct||0).toString());if(Number.isNaN(n))return"bg-neutral-700 text-neutral-200";if(n>=90)return"bg-emerald-500 text-black";if(n>=75)return"bg-amber-400 text-black";return"bg-rose-600 text-white";}

  const cardPop = { whileHover: { y:-6, scale:1.01 }, transition: { type:"spring", stiffness:300 } };

  return (
  <div className={`pune-dashboard ${darkMode ? "" : "bg-neutral-800"}`}>
    <div className={`${BG_GRADIENT} min-h-screen text-neutral-100`}>
      <div className="max-w-[1400px] mx-auto px-4 py-6">
        <div className="flex gap-6">

          {/* SIDEBAR */}
          <aside className={`transition-all ${sidebarOpen?"w-72":"w-16"} flex-shrink-0`}>
            <div className={`${CARD_GLASS} rounded-2xl p-4 border-neutral-700`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-11 h-11 rounded-lg flex items-center justify-center" style={{ background:`linear-gradient(135deg, rgba(255,209,102,0.08), rgba(212,175,55,0.03))` }}>
                    <Users className="text-yellow-300" size={20} />
                  </div>
                  {sidebarOpen && <div>
                    <div className="text-sm font-semibold" style={{ color:GOLD_DEEP }}>Pune Dashboard</div>
                    <div className="text-xs text-neutral-400">Monthly Attendance</div>
                  </div>}
                </div>
                <button onClick={()=>setSidebarOpen(s=>!s)} aria-label="Toggle sidebar" className="p-2 rounded-md hover:bg-white/3">
                  {sidebarOpen?<FiChevronLeft/>:<FiChevronRight/>}
                </button>
              </div>
              {sidebarOpen && <>
                <nav className="mt-6 space-y-2">
                  <button className="w-full text-left px-3 py-2 rounded-md hover:bg-white/3 flex items-center gap-3 transition"><TrendingUp/><span className="text-sm">Overview</span></button>
                  <button className="w-full text-left px-3 py-2 rounded-md hover:bg-white/3 flex items-center gap-3 transition"><PieChartIcon/><span className="text-sm">People</span></button>
                  <button className="w-full text-left px-3 py-2 rounded-md hover:bg-white/3 flex items-center gap-3 transition"><Users/><span className="text-sm">Directory</span></button>
                </nav>
                <div className="mt-6 pt-3 border-t border-white/6 text-xs text-neutral-400">
                  Data range: <span className="text-neutral-100 font-medium">{month}</span>
                </div>
              </>}
            </div>
          </aside>

          {/* MAIN */}
          <div className="flex-1">
            {/* HEADER */}
            <motion.header initial={{opacity:0,y:-8}} animate={{opacity:1,y:0}} className={`${CARD_GLASS} rounded-2xl p-4 mb-6 flex items-center justify-between border-neutral-700`}>
              <div className="flex items-center gap-4">
                <div>
                  <h1 className="text-xl md:text-2xl font-bold" style={{color:GOLD_DEEP}}>Pune — Monthly Attendance</h1>
                  <p className="text-sm text-neutral-300">Premium overview • glass UI • gold accents</p>
                </div>
                <div className="hidden md:flex items-center gap-3 ml-6">
                  <div className="flex items-center gap-2 bg-white/3 rounded-full px-3 py-2">
                    <Calendar className="text-neutral-200" />
                    <input type="month" value={month} onChange={e=>setMonth(e.target.value)} className="bg-transparent outline-none text-sm"/>
                  </div>
                  <button onClick={()=>{setLoading(true); setTimeout(()=>setLoading(false),600)}} className="inline-flex items-center gap-2 px-3 py-2 rounded-full bg-white/6 hover:brightness-105 transition"><Refresh/> Refresh</button>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <button onClick={downloadCSV} className="inline-flex items-center gap-2 px-3 py-2 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-300 text-black font-semibold shadow-sm hover:scale-105 transition transform"><Download/> CSV</button>
                <button onClick={downloadJSON} className="inline-flex items-center gap-2 px-3 py-2 rounded-full border border-white/8 bg-white/3 hover:bg-white/5 transition"><Download/> JSON</button>
                <button onClick={()=>setDarkMode(d=>!d)} className="inline-flex items-center gap-1 px-3 py-2 rounded-full bg-white/6 hover:brightness-105 transition">{darkMode?"Dark":"Ultra"}</button>
              </div>
            </motion.header>

            {/* KPI ROW */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              {/* Repeat KPI cards with gradient bars... */}
            </div>

            {/* CHARTS, TABLE etc. ... */}
            {/* Use hoveredBar state for peak occupancy */}
          </div>
        </div>
      </div>
    </div>
  </div>
  );
}