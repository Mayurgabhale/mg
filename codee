listion 
whne i clikc  summary table header means this Country	City	Employee	Contractors	Total
in heade clikc on Employee then in detials disply all emplyey ok and click on Contractors then disply all Contractors in headr not in in rwo ok 

Wednesday, 3 September, 2025
Country	City	Employee	Contractors	Total
Argentina	Cordoba	199	46	245
Costa Rica	Costa Rica	797	63	860
Brazil	Sao Paulo	64	17	81
Panama	Panama City	23	2	25
Mexico	Mexico City	50	4	55
Peru	Lima	58	5	63
Total	1191	137	1329
// src/pages/History.jsx

import React, { useEffect, useState, useMemo } from 'react';
import { useParams } from 'react-router-dom';
import {
  Container,
  Box,
  Button,
  Typography,
  Table,
  TableHead,
  TableBody,
  TableRow,
  TableCell,
  Paper,
  TextField,
  TableContainer,
} from '@mui/material';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider, DatePicker } from '@mui/x-date-pickers';
import { format } from 'date-fns';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';
// import ExcelJS from 'exceljs';
import Header from '../components/Header';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';
import { fetchHistory } from '../api/occupancy.service';

export default function History() {
  const { partition } = useParams();
  const decodedPartition = partition ? decodeURIComponent(partition) : null;
  const filterCode = decodedPartition?.split('.')[0] || null;

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [pickedDate, setPickedDate] = useState(null);
  const [showDetails, setShowDetails] = useState(false);



  // LACA country codes -> display names (single source of truth)
  const codeToCountry = {
    AR: 'Argentina',
    BR: 'Brazil',
    CR: 'Costa Rica',
    MX: 'Mexico',
    PA: 'Panama',
    PE: 'Peru'
  };

  // selected company from the company table (country||city||company)
  const [selectedCompany, setSelectedCompany] = useState(null);

  // NEW: selected personnel type coming from the summary table ('Employee'|'Contractor'|null)
const [selectedPersonnel, setSelectedPersonnel] = useState(null);
// NEW: selected summary partition (country||city) from summary table clicks
const [selectedSummaryPartition, setSelectedSummaryPartition] = useState(null);




  // --- Canonicalize company names for LACA (keeps your logic, just groups known variants) ---
const getCanonicalCompany = (r) => {
  const raw = r && r.CompanyName ? String(r.CompanyName).trim() : '';
  const pt = r && r.PersonnelType ? String(r.PersonnelType).trim() : '';
  const use = (raw || pt || '').toLowerCase().replace(/\s+/g, ' ').trim();

  if (!use) return 'Unknown';

  // simple pattern matching rules for the examples you provided
  if (/atos/.test(use)) return 'Atos';
  if (/ec sistemas/.test(use)) return 'EC Sistemas SRL';
  if (/gamad/.test(use)) return 'Gamad S.A';
  if (/murata/.test(use)) return 'Murata SA (HCT)';
  if (/gft brasil/.test(use) || /gft brasil consultoria/.test(use)) return 'GFT Brasil Consultoria Informatica LTDA';
  if (/21 grados/.test(use) || /^21\s*grados/.test(use)) return '21 Grados';
  if (/administradora zona franca genesis/.test(use)) return 'Administradora Zona Franca Genesis';
  if (/mabinsa/.test(use)) return 'Mabinsa';
  if (/mt international operations/.test(use) || /mt international operations srl/.test(use)) return 'MT International Operations Srl';
  if (/sbm management/.test(use)) return 'SBM Management de Costa Rica S.A';
  if (/ubion del oeste/.test(use) || /union del oeste/.test(use)) return 'Ubion del Oeste de Costa Rica';
  if (/western union/.test(use) || /^wu\b/.test(use)) return 'Western Union';
  if (/it facil/.test(use) || /itfacil/.test(use)) return 'IT Facil (HCT)';

  // fallback: preserve original CompanyName if present (keeps capitalization), else PersonnelType or Unknown
  return raw || pt || 'Unknown';
};



  // Company-level aggregation (Country || City || Company -> count)
  const companyRows = useMemo(() => {
    if (!data || !pickedDate) return [];

    const ds = format(pickedDate, 'yyyy-MM-dd');

    const filtered = data.details.filter(r =>
      ((r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds) ||
        (r.SwipeDate && r.SwipeDate.slice(0, 10) === ds)) &&
      (!filterCode || (r.PartitionName2 && r.PartitionName2.startsWith(filterCode + '.')))
    );

    const map = new Map();

    filtered.forEach(r => {
      const [code, cityRaw] = String(r.PartitionName2 || '').split('.');
      const city = (cityRaw || r.PartitionName2 || 'Unknown').replace('Partition', '').trim();
      const country = codeToCountry[code] || code || 'Unknown';

      // show CompanyName exactly as returned (fallback to PersonnelType or 'Unknown')
      // const company = (r.CompanyName && String(r.CompanyName).trim()) || (r.PersonnelType && String(r.PersonnelType).trim()) || 'Unknown';
      // canonicalized company name
const company = getCanonicalCompany(r);

      const key = `${country}||${city}||${company}`;
      const existing = map.get(key);
      if (existing) {
        existing.total += 1;
      } else {
        map.set(key, { country, city, company, total: 1 });
      }
    });

    return Array.from(map.values()).sort((a, b) => {
      if (a.country !== b.country) return a.country.localeCompare(b.country);
      if (a.city !== b.city) return a.city.localeCompare(b.city);
      return a.company.localeCompare(b.company);
    });
  }, [data, pickedDate, filterCode]);



  const handleExportCompanies = async () => {
    if (!pickedDate || !companyRows.length) return;
    try {
      const excelModule = await import('exceljs');
      const Excel = excelModule.default || excelModule;

      let wb;
      if (Excel && Excel.Workbook) wb = new Excel.Workbook();
      else if (typeof Excel === 'function') wb = new Excel();
      else throw new Error('ExcelJS Workbook constructor not found');

      const ws = wb.addWorksheet('Company Summary');

      ws.columns = [
        { header: 'Country', key: 'country', width: 20 },
        { header: 'City', key: 'city', width: 25 },
        { header: 'Company', key: 'company', width: 40 },
        { header: 'Total', key: 'total', width: 12 },
      ];

      // Title row
      ws.mergeCells('A1:D1');
      const dateCell = ws.getCell('A1');
      dateCell.value = format(pickedDate, 'EEEE, d MMMM, yyyy');
      dateCell.alignment = { horizontal: 'center', vertical: 'middle' };
      dateCell.font = { name: 'Calibri', size: 14, bold: true };

      ws.addRow([]);

      // Header styling
      const headerRow = ws.addRow(['Country', 'City', 'Company', 'Total']);
      headerRow.eachCell(cell => {
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC107' } };
        cell.font = { bold: true, color: { argb: 'FF000000' } };
        cell.alignment = { horizontal: 'center', vertical: 'middle' };
        cell.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
      });

      companyRows.forEach((r, i) => {
        const row = ws.addRow([r.country, r.city, r.company, r.total]);
        row.eachCell((cell, colNumber) => {
          cell.border = {
            top: { style: 'thin' }, left: { style: 'thin' },
            bottom: { style: 'thin' }, right: { style: 'thin' }
          };
          if (colNumber === 4) {
            cell.alignment = { horizontal: 'right', vertical: 'middle' };
            cell.numFmt = '#,##0';
          } else {
            cell.alignment = { horizontal: 'left', vertical: 'middle' };
          }
        });
        // zebra
        if (i % 2 === 1) {
          row.eachCell(cell => {
            cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF7F7F7' } };
          });
        }
      });

      // totals row
      const total = companyRows.reduce((s, r) => s + r.total, 0);
      const totalRow = ws.addRow(['Total', '', '', total]);
      totalRow.eachCell((cell, colNumber) => {
        cell.font = { bold: true };
        cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };
        cell.border = {
          top: { style: 'thin' }, left: { style: 'thin' },
          bottom: { style: 'thin' }, right: { style: 'thin' }
        };
        if (colNumber === 4) {
          cell.alignment = { horizontal: 'right', vertical: 'middle' };
          cell.numFmt = '#,##0';
        } else {
          cell.alignment = { horizontal: colNumber === 1 ? 'left' : 'center', vertical: 'middle' };
        }
      });

      const buf = await wb.xlsx.writeBuffer();
      saveAs(new Blob([buf]), `laca_companies_${format(pickedDate, 'yyyyMMdd')}.xlsx`);
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error('handleExportCompanies error:', err);
    }
  };


  // 1) pick summary for the date
  const summaryEntry = useMemo(() => {
    if (!data || !pickedDate) return null;
    const ds = format(pickedDate, 'yyyy-MM-dd');
    return data.summaryByDate.find(r =>
      r.date === ds || r.date.startsWith(ds)
    ) || null;
  }, [data, pickedDate]);

  // 2) build partitionRows (unchanged)
  const partitionRows = useMemo(() => {
    if (!summaryEntry) return [];
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };
    return Object.entries(summaryEntry.partitions)
      .filter(([key]) =>
        !filterCode ? true : key.startsWith(filterCode + '.')
      )
      .map(([key, v]) => {
        const [code, cityRaw] = key.split('.');
        return {
          country: codeToCountry[code] || code,
          city: cityRaw.replace('Partition', '').trim(),
          employee: v.Employee ?? v.EmployeeCount ?? 0,
          contractor: v.Contractor ?? v.ContractorCount ?? 0,
          tempBadge: v.TempBadge ?? 0,
          total: v.total ?? 0,
        };
      });
  }, [summaryEntry, filterCode]);

  // 3) build detailRows exactly like APAC, but support selectedCompany filtering
  const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // filter by date field (SwipeDate OR LocaleMessageTime) & partition
    const filtered = data.details.filter(r => {
      const inDay = (r.SwipeDate && r.SwipeDate.startsWith(ds))
        || (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds);

      const inPartition = !filterCode
        || (r.PartitionName2 && r.PartitionName2.startsWith(filterCode + '.'));
      return inDay && inPartition;
    });

    // sort oldest → newest
    filtered.sort((a, b) =>
      (a.LocaleMessageTime || '').localeCompare(b.LocaleMessageTime || '')
    );

    // dedupe by PersonGUID, keep first
    const seen = new Set();
    let rows = filtered.filter(r => {
      if (seen.has(r.PersonGUID)) return false;
      seen.add(r.PersonGUID);
      return true;
    });

    // attach computed company + derived country/city (so UI and exports can use same values)
    rows = rows.map(r => {
      // const company = (r.CompanyName && String(r.CompanyName).trim())
      //   || (r.PersonnelType && String(r.PersonnelType).trim())
      //   || 'Unknown';
      const company = getCanonicalCompany(r);

      const [code, cityRaw] = String(r.PartitionName2 || '').split('.');
      const city = (cityRaw || r.PartitionName2 || 'Unknown').replace('Partition', '').trim();
      const country = codeToCountry[code] || code || 'Unknown';

      // return { ...r, CompanyNameComputed: company, _rowCity: city, _rowCountry: country };
      return { ...r, CompanyNameComputed: company, _rowCity: city, _rowCountry: country };
    });

    // If a company is selected (country||city||company) — filter details strictly to that selection
    if (selectedCompany) {
      const [selCountry, selCity, selCompanyRaw] = selectedCompany.split('||');
      const selCompanyNorm = String(selCompanyRaw || '').replace(/\s+/g, ' ').trim().toLowerCase();

      rows = rows.filter(r => {
        const rnCompany = String(r.CompanyNameComputed || 'Unknown').replace(/\s+/g, ' ').trim().toLowerCase();
        return rnCompany === selCompanyNorm && r._rowCity === selCity && r._rowCountry === selCountry;
      });
    }


    
// --- NEW: if the user clicked a summary cell, filter details to that partition + personnel type ---
    if (selectedSummaryPartition || selectedPersonnel) {
      const [selCountry, selCity] = (selectedSummaryPartition || '').split('||');
      rows = rows.filter(r => {
        let ok = true;
        if (selectedSummaryPartition) {
          ok = ok && r._rowCountry === selCountry && r._rowCity === selCity;
        }
        if (selectedPersonnel) {
          const pt = String(r.PersonnelType || '').toLowerCase();
          if (selectedPersonnel === 'Employee') {
            ok = ok && pt.includes('employee');
          } else if (selectedPersonnel === 'Contractor') {
            ok = ok && pt.includes('contractor');
          }
        }
        return ok;
      });
    }

    return rows;
  }, [data, pickedDate, showDetails, filterCode, selectedCompany]);

  {/* Left: Summary */}
              <Box sx={{ flex: 1, minWidth: 320 }}>
                <Paper elevation={3} sx={{ px: 1, py: 1, border: '3px solid #000', borderRadius: 2 }}>
                  {/* keep same table markup but wrapped in TableContainer with fixed maxHeight */}
                  <TableContainer sx={{ maxHeight: 420 }}>
                    <Table sx={{ border: '2px solid #000' }} size='small'>
                      <TableHead>
                        <TableRow>
                          <TableCell colSpan={isCostaRica ? 6 : 5} align="center"
                            sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}>
                            {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                          </TableCell>
                        </TableRow>
                        <TableRow sx={{ bgcolor: '#FFC107' }}>
                          {[
                            'Country', 'City', 'Employee', 'Contractors',
                            ...(isCostaRica ? ['Temp Badge'] : []),
                            'Total'
                          ].map(h => (
                            <TableCell key={h}
                              align={['Country', 'City'].includes(h) ? 'left' : 'right'}
                              sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}
                            >{h}</TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {partitionRows.map((row, i) => (
                          <TableRow key={i}>
                            <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                            <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>

                            {/* <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell> */}
                            {/* <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell> */}


                            
{/* Employee cell (click to filter details to Employees for this partition) */}
<TableCell
  align="right"
  sx={{
    border: '2px solid #000',
    cursor: 'pointer',
    '&:hover': { backgroundColor: '#f2f2f2' },
  }}
  onClick={() => {
    const key = `${row.country}||${row.city}`;
    // toggle: if same selection clicked again, clear it
    if (selectedPersonnel === 'Employee' && selectedSummaryPartition === key) {
      setSelectedPersonnel(null);
      setSelectedSummaryPartition(null);
    } else {
      setSelectedPersonnel('Employee');
      setSelectedSummaryPartition(key);
      // clear company selection when user chooses summary-based filter
      setSelectedCompany(null);
      setShowDetails(true);
    }
  }}
>
  {row.employee}
</TableCell>

{/* Contractors cell (click to filter details to Contractors for this partition) */}
<TableCell
  align="right"
  sx={{
    border: '2px solid #000',
    cursor: 'pointer',
    '&:hover': { backgroundColor: '#f2f2f2' },
  }}
  onClick={() => {
    const key = `${row.country}||${row.city}`;
    if (selectedPersonnel === 'Contractor' && selectedSummaryPartition === key) {
      setSelectedPersonnel(null);
      setSelectedSummaryPartition(null);
    } else {
      setSelectedPersonnel('Contractor');
      setSelectedSummaryPartition(key);
      setSelectedCompany(null);
      setShowDetails(true);
    }
  }}
>
  {row.contractor}
</TableCell>



                            {isCostaRica && (
                              <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.tempBadge}</TableCell>
                            )}

                            <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                              {row.total}
                            </TableCell>
                          </TableRow>
                        ))}
                        <TableRow sx={{ bgcolor: '#666' }}>
                          <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            Total
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {partitionRows.reduce((s, r) => s + r.employee, 0)}
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                          </TableCell>
                          {isCostaRica && (
                            <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                              {partitionRows.reduce((s, r) => s + r.tempBadge, 0)}
                            </TableCell>
                          )}
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                            {partitionRows.reduce((s, r) => s + r.total, 0)}
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Paper>
                <Box display="flex" justifyContent="center" sx={{ mt: 1, gap: 2 }}>
                  <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }}
                    onClick={() => setShowDetails(v => !v)}>
                    {showDetails ? 'Hide Details' : 'See Details'}
                  </Button>
                  {showDetails && (
                    <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                      onClick={handleExport}>
                      Export to Excel
                    </Button>
                  )}
                  <Button variant="contained" sx={{ ml: 2, bgcolor: '#FFC107', color: '#000' }}
                    onClick={handleExportSummary}
                    disabled={!partitionRows.length}
                  >
                    Export Summary to Excel
                  </Button>
                </Box>
              </Box>
