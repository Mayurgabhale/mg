

// // src/components/PersonnelDonutChart.jsx

// import React from 'react';
// import {
//   PieChart,
//   Pie,
//   Cell,
//   Tooltip,
//   ResponsiveContainer,
//   Legend,
//   Label
// } from 'recharts';
// import { Card } from 'react-bootstrap';

// // 7 colors (WU theme + accents)
// const COLORS = [
//   '#FFD100', // WU Yellow
//   '#009E60', // WU Green
//   '#88B04B', // Olive
//   '#FF6F61', // Coral
//   '#58595B', // WU Gray
//   '#FFB800', // Accent Yellow
//   '#6B5B95'  // Indigo
// ];

// const DarkTooltip = ({ active, payload }) => {
//   if (!active || !payload?.length) return null;
//   const { name, value } = payload[0];
//   return (
//     <div style={{
//       backgroundColor: '#1a1a1a',
//       color: '#FFD100',
//       border: '1px solid var(--wu-yellow)',
//       padding: '0.5rem',
//       borderRadius: 4,
//       fontSize: '0.9rem'
//     }}>
//       <div><strong>{name}</strong></div>
//       <div>Count: {value}</div>
//     </div>
//   );
// };

// export default function PersonnelDonutChart({ data = [] }) {
//   const total = data.reduce((sum, e) => sum + e.count, 0);
//   if (!data.length || total === 0) {
//     return <Card body className="bg-dark text-white">No personnel data</Card>;
//   }

//   const sorted = [...data].sort((a, b) => b.count - a.count);

//   return (
//     <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
//       <Card.Header
//         className="bg-dark text-warning text-center fw-bold"
//         style={{ fontSize: '1.2rem', borderBottom: '2px solid var(--wu-yellow)' }}
//       >
//         Personnel Type Headcount
//       </Card.Header>
//       <Card.Body
//         style={{
//           height: '50vh',
//           padding: '1rem',
//           backgroundColor: '#1a1a1a'
//         }}
//       >
//         <ResponsiveContainer>
//           <PieChart>
//             <Pie
//               data={sorted}
//               dataKey="count"
//               nameKey="personnelType"
//               cx="50%"
//               cy="50%"
//               innerRadius="45%"
//               outerRadius="80%"
//               paddingAngle={2}
//               labelLine={false}
//               label={({ percent, name }) => (
//                 <tspan style={{ fill: '#fff', fontSize: '0.9rem' }}>
//                   {`${name}: ${(percent * 100).toFixed(0)}%`}
//                 </tspan>
//               )}
//               stroke="#fff"
//               strokeWidth={2}
//             >
//               {sorted.map((entry, idx) => (
//                 <Cell
//                   key={entry.personnelType}
//                   fill={COLORS[idx % COLORS.length]}
//                   stroke="#fff"
//                   strokeWidth={1}
//                 />
//               ))}
//               <Label
//                 value={total}
//                 position="center"
//                 style={{ fill: '#fff', fontSize: '2.5rem', fontWeight: 'bold' }}
//               />
//             </Pie>
//             <Tooltip content={<DarkTooltip />} />
//             <Legend
//               verticalAlign="bottom"
//               align="center"
//               wrapperStyle={{ paddingTop: 10, color: '#FFD100', fontSize: '1.1rem' }}
//               iconType="circle"
//             />
//           </PieChart>
//         </ResponsiveContainer>
//       </Card.Body>
//     </Card>
//   );
// }



// //////////  08-09- /////////// mayur 



check above commnet code,
and check why pie chart is dont displat.
read all code carefyyly, 
and write creflly.










// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';
import './PersonnelDonutChart.css'; // We'll add some custom CSS for enhanced styling

// Enhanced colors with gradients for a more 3D-like appearance (WU theme + accents)
const COLORS = [
  { start: '#FFD100', end: '#FFC107' }, // WU Yellow gradient
  { start: '#009E60', end: '#007A4D' }, // WU Green gradient
  { start: '#88B04B', end: '#6B8E23' }, // Olive gradient
  { start: '#FF6F61', end: '#FF5252' }, // Coral gradient
  { start: '#58595B', end: '#424242' }, // WU Gray gradient
  { start: '#FFB800', end: '#FF9800' }, // Accent Yellow gradient
  { start: '#6B5B95', end: '#4A4078' }  // Indigo gradient
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value, percent } = payload[0];
  return (
    <div className="custom-tooltip">
      <div className="tooltip-title">{name}</div>
      <div className="tooltip-value">Count: {value}</div>
      <div className="tooltip-percent">({(percent * 100).toFixed(1)}%)</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 personnel-card shadow-lg border-0">
      <Card.Header className="bg-gradient-dark text-warning text-center fw-bold">
        <h5>Personnel Type Headcount</h5>
        <div className="header-underline"></div>
      </Card.Header>
      <Card.Body className="p-3 bg-dark">
        <ResponsiveContainer width="100%" height="400px">
          <PieChart className="enhanced-pie">
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={3}
              minAngle={10}
              label={({ name, percent }) => (
                <text
                  x={0}
                  y={0}
                  textAnchor="middle"
                  dominantBaseline="middle"
                  className="pie-label"
                >
                  {name.split(' ').map((word, i) => (
                    <tspan key={i} x="0" dy={i === 0 ? 0 : 12}>
                      {word}
                    </tspan>
                  ))}
                  <tspan x="0" dy={12} className="percent-text">
                    {(percent * 100).toFixed(0)}%
                  </tspan>
                </text>
              )}
              stroke="#fff"
              strokeWidth={3}
              strokeLinecap="round"
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={2}
                />
              ))}
              <Label
                value={total.toLocaleString()}
                position="center"
                className="center-label"
              />
            </Pie>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{
                paddingTop: '20px',
                color: '#FFD100',
                fontSize: '1rem',
                fontWeight: '500'
              }}
              iconType="circle"
              iconSize={12}
            />
          </PieChart>
        </ResponsiveContainer>
        {/* SVG Definitions for Gradients */}
        <svg style={{ position: 'absolute', width: 0, height: 0 }}>
          {COLORS.map((color, idx) => (
            <defs key={idx}>
              <linearGradient id={`grad-${idx}`} x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor={color.start} />
                <stop offset="100%" stopColor={color.end} />
              </linearGradient>
            </defs>
          ))}
        </svg>
      </Card.Body>
    </Card>
  );
}

