// controllers/liveOccupancyController.js
'use strict';

const { DateTime } = require('luxon');
const { sql, getPool } = require('../config/db');

const doorZoneMap = require('../data/doorZoneMap');
const zoneFloorMap = require('../data/zoneFloorMap');
const ertMembers = require('../data/puneErtMembers.json');

// track which door→zone keys we've already warned on
const warnedKeys = new Set();

/* -------------------------
   Helpers: normalization
   ------------------------- */

function normalizeZoneKey(rawDoor, rawDir) {
  let door = String(rawDoor || '').trim();
  // strip trailing _HH:MM:SS or _XX:XX:XX (some doors had suffixes)
  door = door.replace(/_[0-9A-F]{2}:[0-9A-F]{2}:[0-9A-F]{2}$/, '');
  door = door.replace(/\s+/g, ' ').toUpperCase();
  const dir = rawDir === 'InDirection' ? 'InDirection' : 'OutDirection';
  return `${door}___${dir}`;
}

function normalizePersonName(raw) {
  let n = String(raw || '').trim();
  if (!n) return '';
  if (n.includes(',')) {
    const [last, rest] = n.split(',', 2);
    n = `${rest.trim()} ${last.trim()}`;
  }
  return n.toLowerCase();
}

function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeZoneKey(rawDoor, rawDir);
  const zone = doorZoneMap[key];
  if (!zone) {
    if (!warnedKeys.has(key)) {
      console.warn('⛔ Unmapped door–direction key:', key);
      warnedKeys.add(key);
    }
    return 'Unknown Zone';
  }
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    // remove trailing " Zone" for nicer names
    return zone.replace(/\s+Zone$/i, '');
  }
  return zone;
}

/* Safe parser for LocaleMessageTime coming from DB (could be Date, string, or null) */
function parseEventTimestamp(evt) {
  if (!evt) return null;
  const v = evt.LocaleMessageTime != null ? evt.LocaleMessageTime : evt.LocaleMessageTime;
  if (!v) return null;
  // If it's already a Date
  if (v instanceof Date) {
    if (Number.isNaN(v.getTime())) return null;
    return v;
  }
  // If it's a number (epoch ms)
  if (typeof v === 'number') {
    const d = new Date(v);
    if (Number.isNaN(d.getTime())) return null;
    return d;
  }
  // Otherwise assume ISO string
  const d = new Date(String(v));
  if (Number.isNaN(d.getTime())) return null;
  return d;
}

/* -------------------------
   SQL fetchers
   ------------------------- */

async function fetchNewEvents(since) {
  const pool = await getPool();
  const req = pool.request();
  req.input('since', sql.DateTime2, since);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > @since
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      FORMAT(LocaleMessageTime, 'hh:mm tt') AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/* Fetch events in 24h window ending at `until` (inclusive) */
async function fetchEventsWindow(until) {
  const pool = await getPool();
  const req = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) > DATEADD(HOUR, -24, @until)
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      FORMAT(LocaleMessageTime, 'hh:mm tt') AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

/* -------------------------
   Occupancy builder
   ------------------------- */

/**
 * Build live occupancy from recent events.
 * allEvents: array of rows from SQL, already ordered asc by LocaleMessageTime.
 */
async function buildOccupancy(allEvents) {
  // Keep last-seen metadata in `current`, keyed by dedupKey (best available id)
  const current = {};
  // uniquePeople maps dedupKey -> PersonnelType for headcount determination
  const uniquePeople = new Map();

  for (const evt of allEvents) {
    const {
      EmployeeID, PersonGUID, ObjectName1, PersonnelType, CardNumber, Dateonly,
      Swipe_Time, Direction, Door
    } = evt;

    const dedupKey = PersonGUID || EmployeeID || CardNumber || (ObjectName1 ? String(ObjectName1).trim() : null);
    if (!dedupKey) {
      // Can't track this person reliably; skip
      continue;
    }

    const zoneRaw = mapDoorToZone(Door, Direction);
    if (zoneRaw === 'Unknown Zone') {
      // skip unmapped doors (we warned earlier)
      continue;
    }

    const zoneLower = zoneRaw.toLowerCase();

    // Normalize personnel type (fallback)
    const pType = PersonnelType || 'Unknown';

    // OUT direction handling:
    if (Direction === 'OutDirection') {
      // True "Out of office" => full eviction from current and uniquePeople
      if (zoneLower === 'out of office') {
        uniquePeople.delete(dedupKey);
        delete current[dedupKey];
      } else {
        // For other out directions (e.g., Outer Areas) we keep the person in current,
        // but update their last-seen metadata to the out location (so zone counts reflect last known)
        uniquePeople.set(dedupKey, pType);
        current[dedupKey] = {
          Dateonly, Swipe_Time,
          EmployeeID, ObjectName1, CardNumber,
          PersonnelType: pType,
          zone: zoneRaw,
          door: Door,
          Direction
        };
      }
      continue;
    }

    // IN direction handling: update / add person
    if (Direction === 'InDirection') {
      uniquePeople.set(dedupKey, pType);
      current[dedupKey] = {
        Dateonly, Swipe_Time,
        EmployeeID, ObjectName1, CardNumber,
        PersonnelType: pType,
        zone: zoneRaw,
        door: Door,
        Direction
      };
      continue;
    }

    // other (catch-all) => evict
    uniquePeople.delete(dedupKey);
    delete current[dedupKey];
  }

  // Tally headcounts from uniquePeople
  let employeeCount = 0;
  let contractorCount = 0;
  for (const pt of uniquePeople.values()) {
    if (['Employee', 'Terminated Personnel'].includes(pt)) employeeCount++;
    else contractorCount++;
  }

  // Build zone map from current[] (use zone string as stored)
  const zoneMap = {};
  for (const emp of Object.values(current)) {
    if (!emp || !emp.zone) continue;
    const zKey = String(emp.zone);
    if (zKey.toLowerCase() === 'out of office') continue;
    zoneMap[zKey] = zoneMap[zKey] || [];
    zoneMap[zKey].push(emp);
  }

  const zoneDetails = Object.fromEntries(
    Object.entries(zoneMap).map(([zone, emps]) => {
      const byType = emps.reduce((acc, e) => {
        const t = e.PersonnelType || 'Unknown';
        acc[t] = (acc[t] || 0) + 1;
        return acc;
      }, {});
      return [zone, { total: emps.length, byPersonnelType: byType, employees: emps }];
    })
  );

  // floor breakdown using zoneFloorMap
  const floorMap = {};
  for (const [zone, data] of Object.entries(zoneDetails)) {
    const floor = zoneFloorMap[zone] || 'Unknown Floor';
    floorMap[floor] = floorMap[floor] || { total: 0, byPersonnelType: {} };
    floorMap[floor].total += data.total;
    for (const [pt, c] of Object.entries(data.byPersonnelType)) {
      floorMap[floor].byPersonnelType[pt] = (floorMap[floor].byPersonnelType[pt] || 0) + c;
    }
  }

  // ERT status: match by normalized name into current
  const ertStatus = Object.fromEntries(
    Object.entries(ertMembers).map(([role, members]) => {
      const list = members.map(m => {
        const rawName = m.name || m.Name || '';
        const expected = normalizePersonName(rawName);
        const matchEvt = Object.values(current).find(e => normalizePersonName(e.ObjectName1) === expected);
        return {
          ...m,
          present: !!matchEvt,
          zone: matchEvt ? matchEvt.zone : null
        };
      });
      return [role, list];
    })
  );

  // Build personnelBreakdown
  const personnelMap = new Map();
  for (const pt of uniquePeople.values()) {
    personnelMap.set(pt, (personnelMap.get(pt) || 0) + 1);
  }
  const personnelBreakdown = Array.from(personnelMap, ([personnelType, count]) => ({ personnelType, count }));

  return {
    asOf: new Date().toISOString(),
    summary: Object.entries(zoneDetails).map(([z, d]) => ({ zone: z, count: d.total })),
    zoneBreakdown: Object.entries(zoneDetails).map(([z, d]) => ({ zone: z, ...d.byPersonnelType, total: d.total })),
    floorBreakdown: Object.entries(floorMap).map(([f, d]) => ({ floor: f, ...d.byPersonnelType, total: d.total })),
    details: zoneMap,
    personnelSummary: { employees: employeeCount, contractors: contractorCount },
    ertStatus,
    personnelBreakdown
  };
}

/* -------------------------
   Visited calculations
   ------------------------- */

/**
 * buildVisitedForDate(allEvents, atDate)
 * - atDate is the snapshot time (JS Date, UTC)
 * - We count unique IN swipes that fall on the same local day as atDate (Asia/Kolkata)
 *   and whose event timestamp <= atDate (inclusive).
 */
function buildVisitedForDate(allEvents, atDate) {
  if (!atDate || Number.isNaN(atDate.getTime())) return { employees: 0, contractors: 0, total: 0 };

  const asOfLocalDate = DateTime.fromJSDate(atDate, { zone: 'utc' }).setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

  // Filter IN swipes that belong to that local day and are not later than snapshot time
  const todayIns = allEvents.filter(evt => {
    if (evt.Direction !== 'InDirection') return false;

    const evtTs = parseEventTimestamp(evt);
    if (!evtTs) return false;

    // event local date in Asia/Kolkata
    const evtLocalDate = DateTime.fromJSDate(evtTs, { zone: 'utc' }).setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

    return evtLocalDate === asOfLocalDate && evtTs.getTime() <= atDate.getTime();
  });

  // Dedupe by best available id: PersonGUID || EmployeeID || CardNumber || ObjectName1
  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID || e.EmployeeID || e.CardNumber || (e.ObjectName1 ? String(e.ObjectName1).trim() : null);
    if (!key) continue;
    const evtTs = parseEventTimestamp(e);
    const prev = dedup.get(key);
    if (!prev || (evtTs && new Date(prev.LocaleMessageTime).getTime() < evtTs.getTime())) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());
  const employees = finalList.filter(e =>
    !['Contractor', 'Terminated Contractor', 'Temp Badge', 'Visitor', 'Property Management'].includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/**
 * buildVisitedToday(allEvents)
 * - compute "today" relative to now (Asia/Kolkata) and count unique IN swipes on that local day
 */
function buildVisitedToday(allEvents) {
  const now = new Date();
  const todayLocal = DateTime.fromJSDate(now, { zone: 'utc' }).setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

  const todayIns = allEvents.filter(evt => {
    if (evt.Direction !== 'InDirection') return false;
    const evtTs = parseEventTimestamp(evt);
    if (!evtTs) return false;
    const evtLocalDate = DateTime.fromJSDate(evtTs, { zone: 'utc' }).setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
    return evtLocalDate === todayLocal;
  });

  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID || e.EmployeeID || e.CardNumber || (e.ObjectName1 ? String(e.ObjectName1).trim() : null);
    if (!key) continue;
    const evtTs = parseEventTimestamp(e);
    const prev = dedup.get(key);
    if (!prev || (evtTs && new Date(prev.LocaleMessageTime).getTime() < evtTs.getTime())) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());
  const employees = finalList.filter(e =>
    !['Contractor', 'Terminated Contractor', 'Temp Badge', 'Visitor', 'Property Management'].includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}

/* -------------------------
   HTTP handlers
   ------------------------- */

/**
 * GET /api/occupancy-at?at=<ISO-8601>
 * Snapshot at the provided UTC timestamp.
 */
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    const atDate = DateTime.fromISO(atRaw, { zone: 'utc' }).toJSDate();
    if (!atDate || Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // fetch events in the 24h window ending at atDate
    const events = await fetchEventsWindow(atDate);

    // ensure events are in chronological order as JS Dates (SQL should return asc)
    // but parse timestamps for safety
    for (const e of events) {
      const parsed = parseEventTimestamp(e);
      if (parsed) {
        e.LocaleMessageTime = parsed.toISOString();
      }
    }

    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    // Override asOf to reflect snapshot time requested
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};

/**
 * GET /api/current-occupancy
 */
exports.getCurrentOccupancy = async (req, res) => {
  try {
    const until = new Date();
    const events = await fetchEventsWindow(until);

    for (const e of events) {
      const parsed = parseEventTimestamp(e);
      if (parsed) e.LocaleMessageTime = parsed.toISOString();
    }

    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, until);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = {
      employees: visitedStats.employees,
      contractors: visitedStats.contractors,
      total: visitedStats.total
    };
    occupancy.asOf = until.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getCurrentOccupancy error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};

/**
 * Server-Sent-Events endpoint: live occupancy stream
 */
exports.getLiveOccupancy = async (req, res) => {
  try {
    await getPool();

    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      Connection: 'keep-alive'
    });
    res.write('\n');

    let lastSeen = new Date();
    const events = [];

    const push = async () => {
      // keep only today's events in Asia/Kolkata
      const todayKolkata = DateTime.now().setZone('Asia/Kolkata').toISODate();
      for (let i = events.length - 1; i >= 0; i--) {
        const ts = parseEventTimestamp(events[i]);
        if (!ts) {
          events.splice(i, 1);
          continue;
        }
        const evtLocal = DateTime.fromJSDate(ts, { zone: 'utc' }).setZone('Asia/Kolkata').toISODate();
        if (evtLocal !== todayKolkata) events.splice(i, 1);
      }

      const fresh = await fetchNewEvents(lastSeen);
      if (fresh.length) {
        // update lastSeen and append events
        lastSeen = new Date();
        // normalize timestamps
        for (const e of fresh) {
          const parsed = parseEventTimestamp(e);
          if (parsed) e.LocaleMessageTime = parsed.toISOString();
        }
        events.push(...fresh);
      }

      const occupancy = await buildOccupancy(events);
      const todayStats = buildVisitedToday(events);

      occupancy.totalVisitedToday = todayStats.total;
      occupancy.visitedToday = {
        employees: todayStats.employees,
        contractors: todayStats.contractors,
        total: todayStats.total
      };

      const sid = Date.now();
      res.write(`id: ${sid}\n`);
      res.write(`data: ${JSON.stringify(occupancy)}\n\n`);
      if (typeof res.flush === 'function') res.flush();
    };

    await push();
    const timer = setInterval(push, 2000);
    req.on('close', () => clearInterval(timer));
  } catch (err) {
    console.error('Live occupancy SSE error:', err);
    if (!res.headersSent) res.status(500).json({ error: 'Internal Server Error' });
  }
};