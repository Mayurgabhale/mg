in the one more condition is add 
if CompanyName CBRE and Personnel Type	is Property Management
then Company is CBRE - CLR  Facility Services Pvt.Ltd.
ok you undestn 


// companyRows: aggregated by normalized CompanyName for pickedDate (respects backendFilterKey)
  const companyRows = useMemo(() => {
    if (!data || !pickedDate) return [];

    const ds = format(pickedDate, 'yyyy-MM-dd');

    // filter details for the date + optional partition filter
    const filtered = data.details.filter(r =>
      r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds &&
      (
        !backendFilterKey ||
        r.PartitionNameFriendly === backendFilterKey ||
        apacForwardKey[r.PartitionNameFriendly] === backendFilterKey
      )
    );

    // aggregate into map: key = country||city||normalizedCompany
    const map = new Map();

    filtered.forEach(r => {
      const city = formatPartition(r.PartitionNameFriendly || '');
      const disp = Object.values(apacPartitionDisplay).find(d => d.city === city);
      const country = disp?.country || 'Unknown';

      const rawCompany = (r.CompanyName || '').toString().trim();
      const pt = (r.PersonnelType || '').toString().trim().toLowerCase();

      // ===== UPDATED COMPANY LOGIC PER YOUR RULES =====
      let company;

      const s = rawCompany.toLowerCase();

      // If CompanyName contains CBRE and also mention of CLR or Facility -> extract CLR facility canonical
      if (s && /\bcbre\b/.test(s) && (/\bclr\b/.test(s) || /\bfacilit/i.test(s))) {
        // User requested the final company to be "CLR  Facility Services Pvt.Ltd."
        company = 'CLR  Facility Services Pvt.Ltd.';
      }
      // If CompanyName is exactly CBRE (or normalizes to CBRE) -> keep CBRE
      else if (s && (s === 'cbre' || normalizeCompany(rawCompany) === 'CBRE')) {
        company = 'CBRE';
      }
      // If CompanyName is blank -> fall back to PersonnelType rules
      else if (!rawCompany) {
        if (pt.includes('contractor')) {
          company = 'CBRE';
        } else if (pt.includes('property') || pt.includes('management') || pt === 'property management') {
          // When company is blank but personnel type indicates property management,
          // use the CBRE - CLR canonical as the fallback
          company = 'CBRE - CLR  Facility Services Pvt.Ltd.';
        } else if (pt === 'employee') {
          company = 'Western Union';
        } else if (pt.includes('visitor')) {
          company = 'Visitor';
        } else if (pt.includes('temp')) {
          company = 'Temp Badge';
        } else {
          company = 'Unknown';
        }
      }
      // Otherwise normalize the provided company name using existing normalizer
      else {
        company = normalizeCompany(rawCompany);
      }
      // ==================================================================

      const key = `${country}||${city}||${company}`;
      const existing = map.get(key);
      if (existing) {
        existing.total += 1; // counting rows as "total" (same behaviour as before)
      } else {
        map.set(key, { country, city, company, total: 1 });
      }
    });

    // return sorted list (optional: by country, city, company)
    return Array.from(map.values()).sort((a, b) => {
      if (a.country !== b.country) return a.country.localeCompare(b.country);
      if (a.city !== b.city) return a.city.localeCompare(b.city);
      return a.company.localeCompare(b.company);
    });
  }, [data, pickedDate, backendFilterKey]);

