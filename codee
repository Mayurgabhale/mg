// src/components/LacaERTOverview.jsx
import React, { useState, useEffect, useMemo } from "react";
import { Card, Row, Col, Badge, Button } from "react-bootstrap";
import {
  FaEnvelopeOpenText,
  FaMapMarkerAlt,
  FaUsers,
  FaMobileAlt,
  FaLayerGroup,
} from "react-icons/fa";
import membersData from "../data/lacaErtMembers.json";
import Header from "../components/Header";
import { lookupFloor } from "../utils/floorLookup";

export default function LacaERTOverview() {
  const [members, setMembers] = useState([]);
  const [showAll, setShowAll] = useState(false);

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await fetch("http://localhost:3001/api/occupancy/live-summary");
        const liveData = await res.json();
        const liveDetails = Array.isArray(liveData.details) ? liveData.details : [];

        const merged = membersData["Team Members"].map((m) => {
          const live = liveDetails.find((d) => d.EmployeeID === m.emp_id) || {};

          const inLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "InDirection")
              : "";
          const outLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "OutDirection")
              : "";

          return {
            ...m,
            present: !!live.EmployeeID,
            inLocation,
            outLocation,
            door: live.Door || "",
            phone: m.phone || "",
          };
        });

        const sorted = merged.sort((a, b) =>
          a.present === b.present ? 0 : a.present ? -1 : 1
        );

        setMembers(sorted);
      } catch (err) {
        console.error("Error fetching live data:", err);
      }
    }

    fetchData();
    const interval = setInterval(fetchData, 15000);
    return () => clearInterval(interval);
  }, []);

  const totalCount = useMemo(() => members.length, [members]);
  const availableCount = useMemo(
    () => members.filter((m) => m.present).length,
    [members]
  );

  const displayedMembers = showAll ? members : members.slice(0, 8);

  return (
    <>
      <Header />

      {/* === TOP SUMMARY CARDS === */}
      <Row className="g-3 mb-4">
        <Col xs={12} md={6}>
          <Card className="text-center shadow-sm h-100 border-0" style={{ backgroundColor: "#061f38" }}>
            <Card.Body className="py-3">
              <FaLayerGroup size={28} style={{ color: "#7F8C8D" }} className="mb-2" />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff" }}>
                Total Members
              </h5>
              <h2 className="m-0" style={{ color: "#fff", fontWeight: "600" }}>
                {totalCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>

        <Col xs={12} md={6}>
          <Card className="text-center shadow-sm h-100 border-0" style={{ backgroundColor: "#061f38" }}>
            <Card.Body className="py-3">
              <FaUsers size={28} style={{ color: "#1ABC9C" }} className="mb-2" />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff" }}>
                Available Members
              </h5>
              <h2 className="m-0" style={{ color: "#1ABC9C", fontWeight: "600" }}>
                {availableCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* === SINGLE CARD: All ERT Members === */}
      <Card className="shadow-sm">
        <Card.Header
          style={{
            borderBottom: "1px solid #EAECEE",
            fontWeight: "600",
            display: "flex",
            alignItems: "center",
            gap: "10px",
          }}
        >
          <FaUsers style={{ color: "#1ABC9C" }} />
          Costa Rica ERT Team Members
        </Card.Header>

        <Card.Body style={{ padding: "1.5rem" }}>
          {displayedMembers.length > 0 ? (
            displayedMembers.map((m, i) => {
              const isAway =
                !m.present ||
                (m.outLocation &&
                  m.outLocation.trim().toLowerCase() === "out of office");

              const location = m.present
                ? m.inLocation || "Unknown Zone"
                : m.outLocation || "Away";

              return (
                <div
                  key={i}
                  className="mb-3 pb-2"
                  style={{ borderBottom: "0.5px solid #595959" }}
                >
                  {/* === NAME + STATUS === */}
                  <div className="d-flex justify-content-between align-items-center">
                    <span style={{ fontWeight: "500" }}>{m.name}</span>
                    <Badge bg={!isAway ? "success" : "danger"} pill>
                      {!isAway ? "Available" : "Away"}
                    </Badge>
                  </div>

                  {/* === Email === */}
                  <div className="d-flex align-items-center mt-2 mb-1" style={{ fontSize: "0.85rem" }}>
                    <FaEnvelopeOpenText className="me-2" style={{ color: "#3498DB" }} />
                    <a href={`mailto:${m.email}`} style={{ color: "#2980B9", textDecoration: "none" }}>
                      {m.email}
                    </a>
                  </div>

                  {/* === Phone === */}
                  {m.phone && (
                    <div className="d-flex align-items-center mb-1" style={{ fontSize: "0.85rem" }}>
                      <FaMobileAlt className="me-2" style={{ color: "#27AE60" }} />
                      <span style={{ color: "#27AE60" }}>{m.phone}</span>
                    </div>
                  )}

                  {/* === Location === */}
                  <div className="d-flex align-items-center" style={{ fontSize: "0.85rem" }}>
                    <FaMapMarkerAlt className="me-2" style={{ color: "#E74C3C" }} />
                    <span style={{ color: "#E74C3C" }}>{location}</span>
                  </div>
                </div>
              );
            })
          ) : (
            <div className="text-muted text-center py-2">No members</div>
          )}

          {/* Show More Button */}
          {members.length > 8 && (
            <div className="text-center mt-3">
              <Button
                variant="outline-primary"
                size="sm"
                onClick={() => setShowAll((prev) => !prev)}
                style={{ minWidth: "120px" }}
              >
                {showAll ? "Show Less" : "Show More"}
              </Button>
            </div>
          )}
        </Card.Body>
      </Card>
    </>
  );
}