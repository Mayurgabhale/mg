// src/components/PersonnelDonutChart.jsx
import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';
import floorCapacities from '../constants/floorCapacities'; // keep if used elsewhere

// 7 colors (WU theme + accents)
const COLORS = [
  '#FFD100', // WU Yellow
  '#009E60', // WU Green
  '#88B04B', // Olive
  '#FF6F61', // Coral
  '#58595B', // WU Gray
  '#FFB800', // Accent Yellow
  '#6B5B95'  // Indigo
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value } = payload[0];
  return (
    <div style={{
      backgroundColor: '#0f1720',
      color: '#FFD100',
      border: '1px solid rgba(255,209,0,0.15)',
      padding: '0.5rem 0.75rem',
      borderRadius: 6,
      fontSize: '0.9rem',
      boxShadow: '0 8px 24px rgba(2,6,23,0.6)'
    }}>
      <div style={{ fontWeight: 700, marginBottom: 6 }}>{name}</div>
      <div style={{ fontSize: 13 }}>Count: <strong>{value}</strong></div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  // helper: produce a slightly darker variant for the depth layer
  const darken = (hex, amount = 0.18) => {
    const c = hex.replace('#','');
    const num = parseInt(c,16);
    let r = (num >> 16) & 0xFF;
    let g = (num >> 8) & 0xFF;
    let b = num & 0xFF;
    r = Math.max(0, Math.floor(r * (1 - amount)));
    g = Math.max(0, Math.floor(g * (1 - amount)));
    b = Math.max(0, Math.floor(b * (1 - amount)));
    return `rgb(${r}, ${g}, ${b})`;
  };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'transparent' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{ fontSize: '1.12rem', borderBottom: '2px solid rgba(255,209,0,0.08)' }}
      >
        Personnel Type Headcount
      </Card.Header>

      <Card.Body style={{ height: '52vh', padding: '1rem', background: '#071018' }}>
        <ResponsiveContainer>
          <PieChart>
            {/* SVG defs: gradients + shadow */}
            <defs>
              {sorted.map((_, idx) => {
                const c = COLORS[idx % COLORS.length];
                const darker = darken(c, 0.2);
                return (
                  <linearGradient id={`slice-grad-${idx}`} key={`slice-grad-${idx}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={c} stopOpacity={1} />
                    <stop offset="70%" stopColor={c} stopOpacity={0.95} />
                    <stop offset="100%" stopColor={darker} stopOpacity={1} />
                  </linearGradient>
                );
              })}

              {/* radial highlight used for glossy center */}
              <radialGradient id="center-glow" cx="50%" cy="40%">
                <stop offset="0%" stopColor="#ffffff" stopOpacity="0.15" />
                <stop offset="45%" stopColor="#ffffff" stopOpacity="0.06" />
                <stop offset="100%" stopColor="#000000" stopOpacity="0" />
              </radialGradient>

              {/* soft drop shadow */}
              <filter id="pieShadow" x="-50%" y="-50%" width="200%" height="200%">
                <feDropShadow dx="0" dy="6" stdDeviation="12" floodColor="#000" floodOpacity="0.45" />
              </filter>
            </defs>

            {/* We render a 'depth' Pie behind the main pie to simulate extrusion.
                The depth pie uses darker fills and is slightly translated down (cy offset).
                Then we render the main, glossy pie on top.
             */}

            {/* Depth/extrusion layer (slightly thicker and lower) */}
            <g transform="translate(0, 8)"> {/* push entire depth layer down a bit */}
              <Pie
                data={sorted}
                dataKey="count"
                nameKey="personnelType"
                cx="50%"
                cy="50%"
                innerRadius="44%"
                outerRadius="82%"
                paddingAngle={2}
                startAngle={90}
                endAngle={-270}
                isAnimationActive={false} // static depth
              >
                {sorted.map((entry, idx) => (
                  <Cell
                    key={`depth-${entry.personnelType}`}
                    fill={darken(COLORS[idx % COLORS.length], 0.28)}
                    stroke="rgba(0,0,0,0)"
                  />
                ))}
              </Pie>
            </g>

            {/* Main glossy donut (slightly squashed vertically to give perspective) */}
            <g transform="translate(0, -6) scale(1, 0.96)"> 
              <Pie
                data={sorted}
                dataKey="count"
                nameKey="personnelType"
                cx="50%"
                cy="50%"
                innerRadius="45%"
                outerRadius="80%"
                paddingAngle={2}
                startAngle={90}
                endAngle={-270}
                stroke="rgba(255,255,255,0.06)"
                strokeWidth={1}
                isAnimationActive={true}
                animationDuration={700}
              >
                {sorted.map((entry, idx) => (
                  <Cell
                    key={`slice-${entry.personnelType}`}
                    fill={`url(#slice-grad-${idx})`}
                    stroke="#0b1014"
                    strokeWidth={1}
                  />
                ))}
              </Pie>

              {/* glossy overlay: a very subtle white radial on top to mimic shine */}
              <Pie
                data={[{ name: 'gloss', value: 1 }]}
                dataKey="value"
                startAngle={90}
                endAngle={-270}
                cx="50%"
                cy="50%"
                innerRadius="0%"
                outerRadius="80%"
                isAnimationActive={false}
              >
                <Cell fill="url(#center-glow)" />
              </Pie>
            </g>

            {/* Center big total label */}
            <Pie
              data={[{ name: 'center', value: total }]}
              dataKey="value"
              cx="50%"
              cy="50%"
              outerRadius="35%"
              innerRadius="0%"
              isAnimationActive={false}
            >
              <Label
                value={total}
                position="center"
                style={{ fill: '#ffffff', fontSize: 36, fontWeight: 700, fontFamily: 'Inter, Arial, sans-serif' }}
              />
            </Pie>

            {/* Tooltip and Legend (kept clean) */}
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{ paddingTop: 8, color: '#E6EEF8', fontSize: 13 }}
              iconType="circle"
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}