
import React, { useState, useMemo } from 'react';
import { Card, Row, Col, Badge, Button, Container } from 'react-bootstrap';
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaEnvelope,
  FaPhone,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers,
  FaEye,
  FaEyeSlash,
  FaUserCog,
  FaIdCard,
  FaLocationArrow
} from 'react-icons/fa';

const firstColumnRoles = [
  'Site Head',
  'BCM Team / Site Operations',
  'HR',
  'Incident Controller'
];

const roleIcons = {
  'Site Head': <FaUserTie className="text-info" />,
  'BCM Team / Site Operations': <FaUserShield className="text-teal" />,
  'HR': <FaUserTie className="text-purple" />,
  'Incident Controller': <FaUserShield className="text-warning" />,
  'ERT Team Leader': <FaUserShield className="text-danger" />,
  'ERT Team Members': <FaUsers className="text-primary" />,
  'First Aid Team': <FaUserNurse className="text-orange" />
};

const baseLocationByRole = {
  'Site Head': 'Podium Floor – Red Zone',
  'HR': 'Podium Floor – Red Zone',
  'Incident Controller': 'Podium Floor – Red Zone',
  'First Aid Team': 'Podium Floor – Green Zone',
  'ERT Team Leader': 'Podium Floor – Green Zone',
  'BCM Team / Site Operations': 'Podium Floor – Red Zone'
};

// ---- Photo helpers ----
const DEFAULT_PHOTO = '/photos/default.png';

const toSlug = (name = '') =>
  name
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9]+/g, '_')
    .replace(/^_+|_+$/g, '');

const getPhotoSrc = (member) => {
  if (!member) return DEFAULT_PHOTO;
  if (member.photo) return member.photo;

  const name = member.name || member.Name;
  if (name) return `/photos/${toSlug(name)}.png`;

  return DEFAULT_PHOTO;
};

// ------------------ Helpers ------------------
const isPresent = (m) => {
  if (!m) return false;
  return typeof m.present === 'boolean' ? m.present : Boolean(m.present);
};

const getLiveLocation = (m = {}) => (m.zone || m.liveLocation || '').toString();
const getBaseLocation = (m = {}) => (m['Base Location'] || m.Floor || m.baseLocation || '').toString();

const matchesFilterZone = (location = '', filterZone = '') => {
  if (!filterZone) return true;
  return (location || '').toLowerCase().includes(filterZone.toLowerCase());
};

// ------------------ Role card renderer ------------------
function renderRoleCard(role, membersRaw = [], filterZone) {
  const members = filterZone
    ? membersRaw.filter(m =>
      isPresent(m) &&
      (matchesFilterZone(getLiveLocation(m), filterZone) ||
        matchesFilterZone(getBaseLocation(m), filterZone) ||
        matchesFilterZone(baseLocationByRole[role] || '', filterZone))
    )
    : membersRaw;

  if (filterZone && members.length === 0) return null;

  return (
    <Card className="dashboard-card mb-1" key={role}>
      <Card.Header className="dashboard-card-header d-flex align-items-center">
        <span className="role-icon me-2">{roleIcons[role] || <FaUserCog className="text-muted" />}</span>
        <span className="role-title">{role}</span>
        <Badge bg="outline-light" className="ms-2">{members.length}</Badge>
      </Card.Header>
      <Card.Body className="p-1">
        {members.length > 0 ? members.map((m, i) => {
          const location = isPresent(m)
            ? getLiveLocation(m) || 'Unknown Zone'
            : getBaseLocation(m) || baseLocationByRole[role] || 'Unknown Zone';

          return (
            <div key={i} className="member-item pb-0 mb-1">
              <div className="d-flex justify-content-between align-items-start mb-1">
                <div className="d-flex align-items-center">
                  <div className={`member-photo-container ${isPresent(m) ? 'present-border' : 'away-border'}`}>
                    <img
                      src={getPhotoSrc(m)}
                      alt={m.name || m.Name || 'Member'}
                      className="member-photo"
                      onError={(e) => {
                        e.currentTarget.onerror = null;
                        e.currentTarget.src = DEFAULT_PHOTO;
                      }}
                    />
                    <div className={`status-indicator ${isPresent(m) ? 'present' : 'away'}`}></div>
                  </div>
                  <div className="ms-3">
                    <h6 className="mb-0 member-name">{m.name || m.Name}</h6>
                    <small className="text-muted">{m.designation || m.role}</small>
                  </div>
                </div>
                <Badge bg={isPresent(m) ? 'success' : 'danger'} className="status-badge">
                  {isPresent(m) ? 'Available' : 'Away'}
                </Badge>
              </div>

              <div className="member-contact-info">
                <div className="contact-item">
                  <FaEnvelope className="contact-icon text-primary" />
                  <a href={`mailto:${m.email || m.Email}`} className="contact-link">{m.email || m.Email}</a>
                </div>
                <div className="contact-item">
                  <FaPhone className="contact-icon text-success" />
                  <span className="contact-text">{m.phone || m.Phone}</span>
                </div>
                <div className="contact-item">
                  <FaLocationArrow className="contact-icon text-danger" />
                  <span className="contact-text">{location}</span>
                </div>
              </div>
            </div>
          );
        }) : (
          <div className="text-center py-3 text-muted">
            <FaIdCard size={24} className="mb-2" />
            <p className="mb-0">No members available</p>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}

// ------------------ Main component ------------------
export default function ERTOverview({ ertStatus = {} }) {
  const [filterZone, setFilterZone] = useState(null);
  const [showAllMembers, setShowAllMembers] = useState(false);

  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus || {}).forEach(([role, members]) => {
      (members || []).forEach(m => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  // ---- Floor Counts (like in first code)
  const floorCounts = useMemo(() => {
    const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };
    allMembers.forEach(m => {
      if (!isPresent(m)) return;
      const z = (m.zone || m.liveLocation || '').toLowerCase();
      if (z.includes('2nd')) counts['2nd Floor']++;
      else if (z.includes('tower b')) counts['Tower B']++;
      else counts['Podium Floor']++;
    });
    return counts;
  }, [allMembers]);

  // ---- ERT Leaders
  const ertLeaders = useMemo(() => {
    const raw = (ertStatus['ERT Team Leader'] || []).map(m => ({ role: 'ERT Team Leader', ...m }));
    const filtered = filterZone
      ? raw.filter(m => isPresent(m) &&
        (matchesFilterZone(getLiveLocation(m), filterZone) ||
          matchesFilterZone(getBaseLocation(m), filterZone) ||
          matchesFilterZone(baseLocationByRole['ERT Team Leader'], filterZone)))
      : raw;

    const order = ['Vishal Chaudhari', 'Vinit Kumar', 'Sonu Pandey', 'Sagar Jamdade', 'Rangare, Bhupendra Babu', 'Satish Bhoyane'];
    return filtered.sort((a, b) => {
      const pa = isPresent(a) ? 1 : 0, pb = isPresent(b) ? 1 : 0;
      if (pa !== pb) return pb - pa;
      const ia = order.indexOf(a.name || a.Name || ''), ib = order.indexOf(b.name || b.Name || '');
      if (ia !== -1 || ib !== -1) {
        if (ia === -1) return 1;
        if (ib === -1) return -1;
        return ia - ib;
      }
      return (a.name || a.Name || '').localeCompare(b.name || b.Name || '');
    });
  }, [ertStatus, filterZone]);

  // ---- ERT Members
  const ertMembers = useMemo(() => {
    const members = (ertStatus['ERT Team Members'] || []).map(m => ({
      role: 'ERT Team Members',
      name: m.Name || m.name,
      baseLocation: m['Base Location'] || m.Floor || m.zone || '',
      liveLocation: m.zone || m.liveLocation || '',
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    const filtered = filterZone
      ? members.filter(m => isPresent(m) &&
        (matchesFilterZone(m.liveLocation, filterZone) || matchesFilterZone(m.baseLocation, filterZone)))
      : members;

    filtered.sort((a, b) => {
      const pa = isPresent(a) ? 1 : 0, pb = isPresent(b) ? 1 : 0;
      if (pa !== pb) return pb - pa;
      return (a.name || '').localeCompare(b.name || '');
    });

    return showAllMembers ? filtered : filtered.slice(0, 6);
  }, [ertStatus, filterZone, showAllMembers]);

  // ---- First Aid Team
  const firstAidMembers = useMemo(() => {
    const members = (ertStatus['First Aid Team'] || []).map(m => ({
      role: 'First Aid Team',
      name: m.Name || m.name,
      baseLocation: m['Base Location'] || m.Floor || m.zone || '',
      liveLocation: m.zone || m.liveLocation || '',
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    return filterZone
      ? members.filter(m => isPresent(m) &&
        (matchesFilterZone(m.liveLocation, filterZone) || matchesFilterZone(m.baseLocation, filterZone)))
      : members;
  }, [ertStatus, filterZone]);

  const floorIcons = {
    'Podium Floor': <FaHome className="text-danger" />,
    '2nd Floor': <FaBuilding className="text-info" />,
    'Tower B': <FaLayerGroup className="text-success" />
  };

  // ------------------ UI ------------------
  return (
    <div className="ert-dashboard">
      <Container fluid className="py-4">
        {/* Stats Cards */}
        <Row className="mb-4">
          <Col xs={12} md={3} className="mb-3">
            <Card className="stats-card total-members">
              <Card.Body className="p-3">
                <div className="d-flex align-items-center">
                  <div className="stats-icon me-3">
                    <FaUsers size={24} />
                  </div>
                  <div>
                    <h6 className="stats-label">Total Members</h6>
                    <h3 className="stats-value mb-0">
                      {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
                    </h3>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>

          {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
            const count = floorCounts[floor] || 0;
            const isSelected = filterZone === floor;
            return (
              <Col key={floor} xs={12} md={3} className="mb-3">
                <Card
                  className={`stats-card location-card ${isSelected ? 'active' : ''}`}
                  onClick={() => setFilterZone(prev => prev === floor ? null : floor)}
                >
                  <Card.Body className="p-3">
                    <div className="d-flex align-items-center">
                      <div className="stats-icon me-3">{floorIcons[floor]}</div>
                      <div>
                        <h6 className="stats-label">{floor}</h6>
                        <h3 className="stats-value mb-0">{count}</h3>
                      </div>
                    </div>
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
        </Row>

        {/* Three-column layout */}
        <Row className="align-items-stretch">
          {/* First column */}
          <Col xs={12} lg={4} className="mb-3 h-100 d-flex flex-column">
            <div className="flex-grow-1 d-flex flex-column">
              {firstColumnRoles.map(role =>
                renderRoleCard(role, ertStatus[role] || [], filterZone)
              )}
            </div>
          </Col>

          {/* Leaders */}
          <Col xs={12} lg={4} className="mb-5 h-105 d-flex flex-column ">
            <div className="flex-grow-1 d-flex flex-column">
              {renderRoleCard('ERT Team Leader', ertLeaders, filterZone)}
            </div>
          </Col>

          {/* Members */}
          <Col xs={12} lg={4} className="mb-0 h-115 d-flex flex-column">
            <div className="flex-grow-1 d-flex flex-column">
              {renderRoleCard('ERT Team Members', ertMembers, filterZone)}


              <div className="text-center mt-3">
                <Button
                  variant="outline-primary"
                  className="d-flex align-items-center mx-auto"
                  onClick={() => setShowAllMembers(prev => !prev)}
                >
                  {showAllMembers ? (
                    <>
                      <FaEyeSlash className="me-2" /> Show Less
                    </>
                  ) : (
                    <>
                      <FaEye className="me-2" /> Show More
                    </>
                  )}
                </Button>
              </div>

              {/* First Aid Team */}
              {/* {renderRoleCard('First Aid Team', firstAidMembers, filterZone)} */}
            </div>
          </Col>
        </Row>
      </Container>
      <style jsx>{`
        .ert-dashboard {
          background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
          min-height: 100vh;
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
        }

        .dashboard-header {
          background: linear-gradient(90deg, rgba(30, 41, 59, 0.95) 0%, rgba(15, 23, 42, 0.98) 100%);
          backdrop-filter: blur(10px);
          border-bottom: 1px solid rgba(255, 255, 255, 0.08);
          padding: 1.5rem 0;
          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        }

        .header-content {
          text-align: center;
        }

        .header-content h1 {
          font-weight: 700;
          margin-bottom: 0.5rem;
          color: #f8fafc;
          font-size: 2.2rem;
          letter-spacing: -0.5px;
        }

        .header-content p {
          color: #94a3b8;
          font-size: 1.1rem;
          margin-bottom: 0;
        }

        .stats-card {
          background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(26, 35, 51, 0.9) 100%);
          border: 1px solid rgba(255, 255, 255, 0.08);
          border-radius: 16px;
          transition: all 0.3s ease;
          cursor: pointer;
          height: 100%;
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
          overflow: hidden;
          position: relative;
        }

        .stats-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
          background: linear-gradient(90deg, #3B82F6, #8B5CF6);
          opacity: 0;
          transition: opacity 0.3s ease;
        }

        .stats-card:hover::before {
          opacity: 1;
        }

        .stats-card:hover, .location-card.active {
          transform: translateY(-5px);
          box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
          border-color: rgba(99, 102, 241, 0.4);
        }

        .location-card.active {
          background: linear-gradient(135deg, rgba(30, 41, 59, 0.95) 0%, rgba(29, 40, 58, 0.95) 100%);
          border-color: rgba(99, 102, 241, 0.6);
        }

        .location-card.active::before {
          opacity: 1;
        }

        .stats-icon {
          width: 60px;
          height: 60px;
          border-radius: 14px;
          display: flex;
          align-items: center;
          justify-content: center;
          background: rgba(96, 165, 250, 0.12);
          box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .total-members .stats-icon {
          background: rgba(139, 92, 246, 0.12);
        }

        .stats-label {
          color: #cbd5e1;
          font-size: 0.9rem;
          margin-bottom: 0.4rem;
          font-weight: 500;
          letter-spacing: 0.5px;
        }

        .stats-value {
          color: #f8fafc;
          font-weight: 700;
          font-size: 2rem;
          letter-spacing: -0.5px;
        }

        .filter-bar {
          background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(26, 35, 51, 0.9) 100%);
          border: 1px solid rgba(255, 255, 255, 0.08);
          border-radius: 16px;
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .filter-label {
          color: #e2e8f0;
          font-weight: 500;
        }

        .filter-status {
          color: #94a3b8;
          font-size: 0.9rem;
        }

        .dashboard-card {
          background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(26, 35, 51, 0.9) 100%);
          border: 1px solid rgba(255, 255, 255, 0.08);
          border-radius: 16px;
          box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
          overflow: hidden;
           height: 100%;
          display: flex;
          flex-direction: column;
        }

        .dashboard-card .card-body {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
}

        .dashboard-card::before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          right: 0;
          height: 4px;
          background: linear-gradient(90deg, #3B82F6, #8B5CF6);
        }

        .dashboard-card-header {
          background: rgba(30, 41, 59, 0.98);
          border-bottom: 1px solid rgba(255, 255, 255, 0.08);
          font-weight: 600;

          color: #e2e8f0;
          backdrop-filter: blur(10px);
        }

        .role-icon {
          font-size: 1.2rem;
        }

        .role-title {
          font-size: 1.1rem;
          font-weight: 600;
        }

        .member-item {
          border-bottom: 1px solid rgba(148, 163, 184, 0.1);
          transition: all 0.3s ease;
          padding: 0.2rem 1.5rem;
          margin: 0 -1.5rem;
        }

        .member-item:hover {
          background: rgba(255, 255, 255, 0.03);
        }

        .member-item:last-child {
          border-bottom: none;
        }


      .member-photo-container {
        position: relative;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        overflow: hidden;
        flex-shrink: 0;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      }

      /* Available (green border) */
      .member-photo-container.present-border {
        border: 2px solid #10b981; /* Tailwind's emerald-500 */
      }

      /* Away (white border) */
      .member-photo-container.away-border {
        border: 2px solid #ffffff;
      }

        .member-photo {
          width: 100%;
          height: 100%;
          object-fit: cover;
          object-position: center top;
        }




        .member-name {
          color: #f1f5f9;
          font-weight: 600;
          font-size: 1.05rem;
        }

        .status-badge {
          font-size: 0.75rem;
          font-weight: 600;
          padding: 0.35em 0.65em;
        }

        .member-contact-info {
          padding-left: 12px;
          border-left: 2px solid rgba(96, 165, 250, 0.3);
          margin-left: 30px;
          margin-top: 0.75rem;
        }

        .contact-item {
          display: flex;
          align-items: center;
          margin-bottom: 0.5rem;
        }

        .contact-item:last-child {
          margin-bottom: 0;
        }

        .contact-icon {
          width: 16px;
          margin-right: 0.75rem;
          flex-shrink: 0;
        }

        .contact-link, .contact-text {
          font-size: 0.9rem;
          color: #cbd5e1;
          text-decoration: none;
          transition: color 0.2s;
          word-break: break-word;
        }

        .contact-link:hover {
          color: #60a5fa;
        }

        .text-teal {
          color: #0d9488;
        }

        .text-orange {
          color: #f97316;
        }

        .text-purple {
          color: #a855f7;
        }

        @media (max-width: 992px) {
          .dashboard-card {
            margin-bottom: 1.5rem;
          }

          .header-content h1 {
            font-size: 1.8rem;
          }
        }
      `}</style>
    </div>
  );
}
Read above pune Ert page desing code
++ Only Desing UI++
And Create Same UI For Costa Rica Ok
Carefullym 

++ This is Costa Rica code: chane only desing UI not code logic:
i want same UI 
IN consta rica only has only ERT Members 
____________________________________________________________________




// src/components/LacaERTOverview.jsx
import React, { useState, useEffect, useMemo } from "react";
import { Card, Row, Col, Badge } from "react-bootstrap";
import {
  FaEnvelopeOpenText,
  FaMapMarkerAlt,
  FaUsers,
  FaMobileAlt,
  FaLayerGroup,
} from "react-icons/fa";
import membersData from "../data/lacaErtMembers.json";
import LoadingSpinner from "./LoadingSpinner";
import { lookupFloor } from "../utils/floorLookup";
import '../App.css';
import Impimg from "../assets/images/busy.png";

export default function LacaERTOverview() {
  const [members, setMembers] = useState([]);
  const [filterType, setFilterType] = useState("total"); // "total" | "available"
  const [loading, setLoading] = useState(true); // ⬅️ add state

 



useEffect(() => {
  let isMounted = true;

  async function fetchData(showLoader = false) {
    try {
      if (showLoader) setLoading(true); // only show spinner if first load
      const res = await fetch("http://localhost:3001/api/occupancy/live-summary");
      const liveData = await res.json();
      const liveDetails = Array.isArray(liveData.details) ? liveData.details : [];

      const merged = membersData["Team Members"].map((m) => {
        const live = liveDetails.find((d) => d.EmployeeID === m.emp_id) || {};
        const inLocation =
          live.PartitionName2 && live.Door
            ? lookupFloor(live.PartitionName2, live.Door, "InDirection")
            : "";
        const outLocation =
          live.PartitionName2 && live.Door
            ? lookupFloor(live.PartitionName2, live.Door, "OutDirection")
            : "";

        return {
          ...m,
          present: !!live.EmployeeID,
          direction: live.Direction || "",
          inLocation,
          outLocation,
          door: live.Door || "",
          phone: m.phone || "",
        };
      });

      const sorted = merged.sort((a, b) =>
        a.present === b.present ? 0 : a.present ? -1 : 1
      );

      if (isMounted) setMembers(sorted);
    } catch (err) {
      console.error("Error fetching live data:", err);
    } finally {
      if (isMounted && showLoader) setLoading(false);
    }
  }

  // First load → show spinner
  fetchData(true);

  // Interval loads → no spinner
  const interval = setInterval(() => fetchData(false), 10000);

  return () => {
    isMounted = false;
    clearInterval(interval);
  };
}, []);


  const totalCount = useMemo(() => members.length, [members]);
  const availableCount = useMemo(
    () => members.filter((m) => m.present).length,
    [members]
  );

  // Filter members to display based on selection
  const displayedMembers =
    filterType === "available"
      ? members.filter((m) => m.present)
      : members;



  if (loading) {
    return <LoadingSpinner />;
  }


  return (
    <>

      {/* === TOP SUMMARY CARDS (Black theme, yellow border) === */}
      <Row className="g-3 mb-4">

        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 hover-card"
            style={{
              // backgroundColor: "#061f38",
              backgroundColor: "#061f38",
              cursor: "pointer"

            }}
            onClick={() => setFilterType("total")}

          >
            <Card.Body className="py-3">
              <FaLayerGroup
                size={28}
                style={{ color: "#7F8C8D" }}
                className="mb-2"
              />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff", textDecoration: filterType === "total" ? "underline" : "none", textDecoration: "none" }}>
                Total Members
              </h5>
              <h2 className="m-0" style={{ color: "#fff", fontWeight: "600" }}>
                {totalCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>

        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 hover-card"
            style={{
              backgroundColor: "#061f38",
              cursor: "pointer"


            }}
            onClick={() => setFilterType("available")}
          >
            <Card.Body className="py-3">
              <FaUsers
                size={28}
                style={{ color: "#1ABC9C" }}
                className="mb-2"
              />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff" }}>
                Available Members
              </h5>
              <h2
                className="m-0"
                style={{ color: "#1ABC9C", fontWeight: "600", textDecoration: filterType === "available" ? "underline" : "none", textDecoration: "none" }}
              >
                {availableCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* === MEMBERS CARD (Black theme, yellow border, 3-column layout) === */}
      <Card
        className="shadow-sm"
        style={{ backgroundColor: "#1a1a1a", border: "2px solid #F1C40F" }}
      >
        <Card.Header
          style={{
            borderBottom: "1px solid #F1C40F",
            fontWeight: "600",
            display: "flex",
            fontSize: "20px",
            justifyContent: "center",
            alignItems: "center",
            textAlign: "center",
            gap: "10px",
            color: "#fff",
          }}
        >
          <FaUsers style={{ color: "#F1C40F", alignItems: "center", textAlign: "center" }} />
          {/* Costa Rica ERT Team Members */}
          {filterType === "available"
            ? "Available Costa Rica ERT Members"
            : "Costa Rica ERT Members"}
        </Card.Header>

        <Card.Body style={{ padding: "1.5rem" }}>

          {displayedMembers.length > 0 ? (
            // ⬇️ add the three-col-divider class here
            <Row className="g-3 three-col-divider">

              {displayedMembers.map((m, i) => {
                const isAway =
                  m.present === false ||
                  (m.direction === "OutDirection" &&
                    m.outLocation.trim().toLowerCase() === "out of office");

                const location = m.present
                  ? m.inLocation || "Unknown Zone"
                  : "Away";

                return (
                  <Col xs={12} md={6} lg={4} key={i}>
                    <div
                      className="mb-3 pb-2"
                      style={{
                        borderBottom: "0.5px solid rgb(86, 86, 85)",
                        color: "#fff",
                      }}
                    >
                      {/* === NAME + STATUS === */}
                      <div className="d-flex justify-content-between align-items-center">
                        <h5 style={{ fontWeight: "600", marginBottom: "0.5rem" }}>
                          {m.name}{" "}
                          <span style={{ fontSize: "0.8rem", color: "#bbb" }}>
                            ({m.emp_id})
                          </span>
                        </h5>

                        <Badge
                          bg={!isAway ? "success" : "danger"}
                          pill
                          style={{ marginBottom: "0.8rem" }}
                        >
                          {!isAway ? "Available" : "Away"}
                        </Badge>
                      </div>

                      {/* === Email === */}
                      <div
                        className="d-flex align-items-center mt-2 mb-1"
                        style={{ fontSize: "0.85rem" }}
                      >
                        <FaEnvelopeOpenText
                          className="me-2"
                          style={{ color: "#3498DB", minWidth: "16px" }}
                        />
                        <a
                          href={`mailto:${m.email}`}
                          style={{ color: "#2980B9", textDecoration: "none" }}
                        >
                          {m.email}
                        </a>
                      </div>

                      {/* === Phone === */}
                      {m.phone && (
                        <div
                          className="d-flex align-items-center mb-1"
                          style={{ fontSize: "0.85rem" }}
                        >
                          <FaMobileAlt
                            className="me-2"
                            style={{ color: "#27AE60", minWidth: "16px" }}
                          />
                          <span style={{ color: "#27AE60" }}>{m.phone}</span>
                        </div>
                      )}

                      {/* === Location === */}
                      <div
                        className="d-flex align-items-center"
                        style={{ fontSize: "0.85rem" }}
                      >
                        <FaMapMarkerAlt
                          className="me-2"
                          style={{ color: "#E74C3C", minWidth: "16px" }}
                        />
                        <span style={{ color: "#E74C3C" }}>{location}</span>
                      </div>
                    </div>
                  </Col>



                );
              })}
            </Row>
          ) : (
            <div className="text-muted text-center py-2" style={{ color: "#fff" }}>No members</div>
          )}
        </Card.Body>
      </Card>


    </>
  );
}

Carefully
