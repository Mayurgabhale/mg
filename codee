

// // src/components/PersonnelDonutChart.jsx

// import React from 'react';
// import {
//   PieChart,
//   Pie,
//   Cell,
//   Tooltip,
//   ResponsiveContainer,
//   Legend,
//   Label
// } from 'recharts';
// import { Card } from 'react-bootstrap';

// // 7 colors (WU theme + accents)
// const COLORS = [
//   '#FFD100', // WU Yellow
//   '#009E60', // WU Green
//   '#88B04B', // Olive
//   '#FF6F61', // Coral
//   '#58595B', // WU Gray
//   '#FFB800', // Accent Yellow
//   '#6B5B95'  // Indigo
// ];

// const DarkTooltip = ({ active, payload }) => {
//   if (!active || !payload?.length) return null;
//   const { name, value } = payload[0];
//   return (
//     <div style={{
//       backgroundColor: '#1a1a1a',
//       color: '#FFD100',
//       border: '1px solid var(--wu-yellow)',
//       padding: '0.5rem',
//       borderRadius: 4,
//       fontSize: '0.9rem'
//     }}>
//       <div><strong>{name}</strong></div>
//       <div>Count: {value}</div>
//     </div>
//   );
// };

// export default function PersonnelDonutChart({ data = [] }) {
//   const total = data.reduce((sum, e) => sum + e.count, 0);
//   if (!data.length || total === 0) {
//     return <Card body className="bg-dark text-white">No personnel data</Card>;
//   }

//   const sorted = [...data].sort((a, b) => b.count - a.count);

//   return (
//     <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
//       <Card.Header
//         className="bg-dark text-warning text-center fw-bold"
//         style={{ fontSize: '1.2rem', borderBottom: '2px solid var(--wu-yellow)' }}
//       >
//         Personnel Type Headcount
//       </Card.Header>
//       <Card.Body
//         style={{
//           height: '50vh',
//           padding: '1rem',
//           backgroundColor: '#1a1a1a'
//         }}
//       >
//         <ResponsiveContainer>
//           <PieChart>
//             <Pie
//               data={sorted}
//               dataKey="count"
//               nameKey="personnelType"
//               cx="50%"
//               cy="50%"
//               innerRadius="45%"
//               outerRadius="80%"
//               paddingAngle={2}
//               labelLine={false}
//               label={({ percent, name }) => (
//                 <tspan style={{ fill: '#fff', fontSize: '0.9rem' }}>
//                   {`${name}: ${(percent * 100).toFixed(0)}%`}
//                 </tspan>
//               )}
//               stroke="#fff"
//               strokeWidth={2}
//             >
//               {sorted.map((entry, idx) => (
//                 <Cell
//                   key={entry.personnelType}
//                   fill={COLORS[idx % COLORS.length]}
//                   stroke="#fff"
//                   strokeWidth={1}
//                 />
//               ))}
//               <Label
//                 value={total}
//                 position="center"
//                 style={{ fill: '#fff', fontSize: '2.5rem', fontWeight: 'bold' }}
//               />
//             </Pie>
//             <Tooltip content={<DarkTooltip />} />
//             <Legend
//               verticalAlign="bottom"
//               align="center"
//               wrapperStyle={{ paddingTop: 10, color: '#FFD100', fontSize: '1.1rem' }}
//               iconType="circle"
//             />
//           </PieChart>
//         </ResponsiveContainer>
//       </Card.Body>
//     </Card>
//   );
// }



// //////////  08-09- /////////// mayur 












REad alos above code,
in below code only in pie chart is center and and and in pie chart center disply all totoal count 703.
i want to disply, anll persn type 
employee, contracter, temp, visitrer etc ok 
read above code then you undersntd what are you missing



// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';

// 7 colors (WU theme + accents)
const COLORS = [
  '#FFD100', // WU Yellow
  '#009E60', // WU Green
  '#88B04B', // Olive
  '#FF6F61', // Coral
  '#58595B', // WU Gray
  '#FFB800', // Accent Yellow
  '#6B5B95'  // Indigo
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value } = payload[0];
  return (
    <div style={{
      backgroundColor: '#1a1a1a',
      color: '#FFD100',
      border: '1px solid var(--wu-yellow)',
      padding: '0.5rem',
      borderRadius: 4,
      fontSize: '0.9rem'
    }}>
      <div><strong>{name}</strong></div>
      <div>Count: {value}</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  // --- data logic unchanged ---
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  // helper: darken a hex color
  const darken = (hex, amount = 0.18) => {
    const c = hex.replace('#', '');
    const num = parseInt(c, 16);
    let r = (num >> 16) & 0xff;
    let g = (num >> 8) & 0xff;
    let b = num & 0xff;
    r = Math.max(0, Math.floor(r * (1 - amount)));
    g = Math.max(0, Math.floor(g * (1 - amount)));
    b = Math.max(0, Math.floor(b * (1 - amount)));
    return `rgb(${r}, ${g}, ${b})`;
  };

  const centerLabelStyle = { fill: '#fff', fontSize: '2.5rem', fontWeight: 'bold' };

  return (
    <Card className="mb-4 shadow-sm border" style={{ borderColor: 'var(--wu-yellow)' }}>
      <Card.Header
        className="bg-dark text-warning text-center fw-bold"
        style={{ fontSize: '1.2rem', borderBottom: '2px solid var(--wu-yellow)' }}
      >
        Personnel Type Headcount
      </Card.Header>

      <Card.Body
        style={{
          height: '50vh',
          padding: '1rem',
          backgroundColor: '#0b1114'
        }}
      >
        <ResponsiveContainer>
          <PieChart>
            {/* SVG defs: per-slice gradients + gloss */}
            <defs>
              {sorted.map((_, idx) => {
                const c = COLORS[idx % COLORS.length];
                const darker = darken(c, 0.18);
                return (
                  <linearGradient id={`slice-grad-${idx}`} key={`slice-grad-${idx}`} x1="0" y1="0" x2="0" y2="1">
                    <stop offset="0%" stopColor={c} stopOpacity={1} />
                    <stop offset="70%" stopColor={c} stopOpacity={0.96} />
                    <stop offset="100%" stopColor={darker} stopOpacity={1} />
                  </linearGradient>
                );
              })}

              {/* glossy radial overlay */}
              <radialGradient id="donut-gloss" cx="40%" cy="36%">
                <stop offset="0%" stopColor="#fff" stopOpacity="0.16" />
                <stop offset="45%" stopColor="#fff" stopOpacity="0.06" />
                <stop offset="100%" stopColor="#000" stopOpacity="0" />
              </radialGradient>
            </defs>

            {/* depth/extrusion layer (darker fills, shifted down) */}
            <g transform="translate(0, 8)">
              <Pie
                data={sorted}
                dataKey="count"
                nameKey="personnelType"
                cx="50%"
                cy="50%"
                innerRadius="44%"
                outerRadius="80%"
                paddingAngle={2}
                startAngle={90}
                endAngle={-270}
                isAnimationActive={false}
              >
                {sorted.map((entry, idx) => (
                  <Cell
                    key={`depth-${entry.personnelType}`}
                    fill={darken(COLORS[idx % COLORS.length], 0.30)}
                    stroke="rgba(0,0,0,0)"
                  />
                ))}
              </Pie>
            </g>

            {/* main donut (with white separators and gradients) - slight perspective via transform */}
            <g transform="translate(0, -4) scale(1, 0.98)">
              <Pie
                data={sorted}
                dataKey="count"
                nameKey="personnelType"
                cx="50%"
                cy="50%"
                innerRadius="44%"
                outerRadius="80%"
                paddingAngle={2}
                startAngle={90}
                endAngle={-270}
                stroke="#ffffff"
                strokeWidth={3}            // thicker separators for infographic look
                strokeLinejoin="round"
                isAnimationActive={true}
                animationDuration={700}
                labelLine={false}
                label={({ percent, name }) => (
                  <tspan style={{ fill: '#fff', fontSize: '0.9rem' }}>
                    {`${name}: ${(percent * 100).toFixed(0)}%`}
                  </tspan>
                )}
              >
                {sorted.map((entry, idx) => (
                  <Cell
                    key={`slice-${entry.personnelType}`}
                    fill={`url(#slice-grad-${idx})`}
                    stroke="#fff"
                    strokeWidth={3}
                  />
                ))}
              </Pie>

              {/* glossy overlay on top */}
              <Pie
                data={[{ name: 'gloss', value: 1 }]}
                dataKey="value"
                startAngle={90}
                endAngle={-270}
                cx="50%"
                cy="50%"
                innerRadius="0%"
                outerRadius="80%"
                isAnimationActive={false}
              >
                <Cell fill="url(#donut-gloss)" />
              </Pie>
            </g>

            {/* center total unchanged */}
            <Pie
              data={[{ name: 'center', value: total }]}
              dataKey="value"
              cx="50%"
              cy="50%"
              outerRadius="35%"
              innerRadius="0%"
              isAnimationActive={false}
            >
              <Label value={total} position="center" style={centerLabelStyle} />
            </Pie>

            {/* tooltip & legend unchanged */}
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{ paddingTop: 10, color: '#FFD100', fontSize: '1.1rem' }}
              iconType="circle"
            />
          </PieChart>
        </ResponsiveContainer>
      </Card.Body>
    </Card>
  );
}
