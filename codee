// --- paste into controllers/denverLiveOccupancyController.js ---

/**
 * GET /api/occupancy-at-time-denver?time=HH:mm or HH:mm:ss
 * Returns the occupancy snapshot for the current Denver day at the supplied time.
 * - Only allows the current day (America/Denver).
 * - Uses existing fetchNewEvents(startOfDay) and buildOccupancyForToday(filteredEvents, filteredEvents).
 */
exports.getDenverOccupancyAtTime = async (req, res) => {
  try {
    // ensure DB pool available (same style as SSE endpoint)
    try {
      await denver.poolPromise;
    } catch (err) {
      console.error('❌ Failed to initialize Denver pool in occupancy-at-time endpoint:', err);
      return res.status(500).json({ error: 'database unavailable' });
    }

    const timeParam = (req.query.time || '').trim();
    if (!timeParam) {
      return res.status(400).json({ error: 'missing required query parameter "time" (format HH:mm or HH:mm:ss)' });
    }

    // Try parse with seconds then without
    let parsed = DateTime.fromFormat(timeParam, 'HH:mm:ss', { zone: 'America/Denver' });
    if (!parsed.isValid) {
      parsed = DateTime.fromFormat(timeParam, 'HH:mm', { zone: 'America/Denver' });
    }
    if (!parsed.isValid) {
      return res.status(400).json({ error: 'time must be in format HH:mm or HH:mm:ss' });
    }

    // Build target DateTime for *today* in Denver
    const todayStart = DateTime.now().setZone('America/Denver').startOf('day');
    const target = todayStart
      .plus({ hours: parsed.hour, minutes: parsed.minute, seconds: parsed.second || 0 });

    const nowDenver = DateTime.now().setZone('America/Denver');
    if (!target.hasSame(nowDenver, 'day')) {
      return res.status(400).json({ error: 'only the current Denver day is supported' });
    }

    // Fetch all events from start of today (so we can consider everything up to the requested time).
    const since = todayStart.toJSDate();
    let events;
    try {
      events = await fetchNewEvents(since); // returns array of rows with LocaleMessageTime, Dateonly, Swipe_Time etc.
    } catch (err) {
      console.error('❌ Error fetching events for occupancy-at-time:', err);
      return res.status(500).json({ error: 'failed to fetch events' });
    }

    if (!Array.isArray(events)) events = [];

    // Filter events to those <= target
    const targetJs = target.toJSDate();
    const upToTarget = events.filter(evt => {
      // evt.LocaleMessageTime should be a Date object from mssql query
      if (!evt.LocaleMessageTime) return false;
      return evt.LocaleMessageTime <= targetJs;
    });

    // Reuse buildOccupancyForToday to compute the snapshot.
    // pass the same filtered list as both allEvents & freshEvents (we only need occupancy & breakdowns)
    let payload;
    try {
      payload = buildOccupancyForToday(upToTarget, upToTarget);
      // override asOf to be the requested target time (so UI can show it)
      payload.asOf = target.toISO();
    } catch (err) {
      console.error('❌ Error building occupancy snapshot for time:', err);
      return res.status(500).json({ error: 'failed to compute snapshot' });
    }

    // Return JSON payload (same shape as SSE payload, so frontend can easily swap)
    return res.json(payload);

  } catch (err) {
    console.error('❌ Unexpected error in getDenverOccupancyAtTime():', err);
    return res.status(500).json({ error: 'internal server error' });
  }
};




.......
...



// --- in routes/occupancyDenverRoutes.js ---

const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy } = require('../controllers/denverLiveOccupancyController');
const { getDenverInOutInconsistency } = require('../controllers/denverInOutInconsistencyController');
const { getDenverOccupancyAtTime } = require('../controllers/denverLiveOccupancyController'); // ← NEW

// Denver live occupancy
router.get('/live-occupancy-denver', getDenverLiveOccupancy);

// Denver in/out inconsistency trends
router.get('/inout-inconsistency-denver', getDenverInOutInconsistency);

// NEW: Occupancy snapshot for a specific time today
router.get('/occupancy-at-time-denver', getDenverOccupancyAtTime);

module.exports = router;



.....
....
...


// C:\Users\W0024618\Desktop\swipeData\client-denver\src\App.js

import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav, Form, Button, InputGroup } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';
import DenverInOutInconsistencyPage from './pages/DenverInOutInconsistency'; // ← NEW

import './App.css';

export default function App() {
  // live data states
  const [floorData, setFloorData] = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday] = useState(0);
  const [personnelSummary, setPersonnelSummary] = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday] = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary] = useState([]); // ← NEW

  // new: in/out inconsistency data
  const [inOutData, setInOutData] = useState(null);
  const [loadingInOut, setLoadingInOut] = useState(true);
  const [inOutError, setInOutError] = useState(null);

  // --- Snapshot/time selection states ---
  // snapshotMode = whether dashboard is showing a user-selected snapshot (instead of live)
  const [snapshotMode, setSnapshotMode] = useState(false);
  const [snapshotTime, setSnapshotTime] = useState(''); // "HH:MM" or "HH:MM:SS" from the input
  const [snapshotLoading, setSnapshotLoading] = useState(false);
  const [snapshotError, setSnapshotError] = useState(null);
  const [snapshotData, setSnapshotData] = useState(null); // will hold the payload returned by the new API

  // live SSE (unchanged)
  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []); // ← NEW
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, []);

  // Fetch once: in/out inconsistency JSON (unchanged)
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status} - ${res.statusText}`);
        return res.json();
      })
      .then(data => {
        setInOutData(data.floorInconsistency || []); // ✅ Store only the array we want
        setLoadingInOut(false);
      })
      .catch(err => {
        console.error('Failed to load in/out inconsistency:', err);
        setInOutError(err.message);
        setLoadingInOut(false);
      });
  }, []);

  // --- Snapshot handlers ---
  const handleSnapshotTimeChange = (e) => {
    setSnapshotTime(e.target.value);
    setSnapshotError(null);
  };

  const applySnapshot = async () => {
    if (!snapshotTime) {
      setSnapshotError('Select a time first.');
      return;
    }

    // HTML time input typically returns "HH:MM". Append ":00" for seconds.
    const timeForApi = snapshotTime.length === 5 ? `${snapshotTime}:00` : snapshotTime;

    setSnapshotLoading(true);
    setSnapshotError(null);

    try {
      const resp = await fetch(`http://localhost:5000/api/occupancy-at-time-denver?time=${encodeURIComponent(timeForApi)}`);
      if (!resp.ok) {
        const txt = await resp.text();
        throw new Error(`${resp.status} ${resp.statusText} - ${txt}`);
      }
      const json = await resp.json();
      // store snapshot payload (same shape as SSE payload)
      setSnapshotData(json);
      setSnapshotMode(true);
    } catch (err) {
      console.error('Failed to fetch snapshot:', err);
      setSnapshotError(err.message || 'Failed to fetch snapshot');
      setSnapshotData(null);
      setSnapshotMode(false);
    } finally {
      setSnapshotLoading(false);
    }
  };

  const clearSnapshot = () => {
    setSnapshotMode(false);
    setSnapshotData(null);
    setSnapshotTime('');
    setSnapshotError(null);
    setSnapshotLoading(false);
  };

  // --- Decide which data to pass into child components: snapshotData (if active) or live data ---
  const activeFloorData = snapshotMode && snapshotData ? (snapshotData.floorBreakdown || []) : floorData;
  const activePersonnelBreakdown = snapshotMode && snapshotData ? (snapshotData.personnelBreakdown || []) : personnelBreakdown;
  const activeTotalVisitedToday = snapshotMode && snapshotData ? (snapshotData.totalVisitedToday || 0) : totalVisitedToday;
  const activePersonnelSummary = snapshotMode && snapshotData ? (snapshotData.personnelSummary || { employees: 0, contractors: 0 }) : personnelSummary;
  const activeVisitedToday = snapshotMode && snapshotData ? (snapshotData.visitedToday || { employees: 0, contractors: 0, total: 0 }) : visitedToday;
  const activeFloorInOutSummary = snapshotMode && snapshotData ? (snapshotData.floorInOutSummary || []) : floorInOutSummary;

  // Helper text to be shown in navbar / header when snapshot is active
  const snapshotLabel = snapshotMode && snapshotData ? `Snapshot: ${snapshotData.asOf || snapshotTime}` : null;

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>

          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>
            <Nav.Link href="http://10.199.22.57:3002/partition/US.CO.OBS/history" className="nav-item-infographic">
              History
            </Nav.Link>
            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>
            <Nav.Link as={Link} to="/inout-inconsistency-denver" className="nav-item-infographic">
              In/Out Inconsistency
            </Nav.Link>

            {/* Snapshot time picker UI */}
            <Form className="d-flex align-items-center ms-3" onSubmit={e => e.preventDefault()}>
              <InputGroup>
                <Form.Control
                  type="time"
                  step="1"              // allow seconds in browsers that support it
                  value={snapshotTime}
                  onChange={handleSnapshotTimeChange}
                  title="Select time (today only, Denver time)"
                />
                <Button variant="outline-light" onClick={applySnapshot} disabled={snapshotLoading}>
                  {snapshotLoading ? 'Loading…' : 'Apply'}
                </Button>
                <Button variant="outline-secondary" onClick={clearSnapshot} className="ms-1">
                  Clear
                </Button>
              </InputGroup>
            </Form>

            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          {/* If snapshot active, show small label */}
          {snapshotLabel && (
            <div style={{ color: '#FFC72C', marginBottom: 8 }}>
              {snapshotLabel} (Denver)
              {snapshotError && <span style={{ color: 'salmon', marginLeft: 10 }}>{snapshotError}</span>}
            </div>
          )}

          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={activePersonnelSummary}
                  totalVisitedToday={activeTotalVisitedToday}
                  visitedToday={activeVisitedToday}
                  floorData={activeFloorData}
                  personnelBreakdown={activePersonnelBreakdown}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={activeFloorData}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/inout-inconsistency-denver"
              element={
                <DenverInOutInconsistencyPage
                  data={inOutData}
                  loading={loadingInOut}
                  error={inOutError}
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}