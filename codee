// NEW: company click/filter state (like EMEA)
  const [selectedCompany, setSelectedCompany] = useState(null);







.......

// Simple canonicalizer (keeps most names but groups blanks / visitors / contractors)
  const getCanonicalCompany = (r) => {
    const normalize = (s) => {
      if (!s) return '';
      return String(s).toLowerCase().trim().replace(/\s+/g, ' ');
    };
    const raw = r.CompanyName && String(r.CompanyName).trim();
    const pt = (r.PersonnelType && String(r.PersonnelType).toLowerCase()) || '';

    if (raw) {
      const n = normalize(raw);
      if (n === 'unknown' || n === '') return 'Unknown';
      // quick grouping examples (add more if you need)
      if (n.includes('western union') || n.startsWith('wu')) return 'WU Srvcs Private Ltd';
      if (n.includes('g4s')) return 'G4S Secure Solutions';
      if (n.includes('addendum')) return 'Addendum Solutions';
      return raw; // preserve original capitalization if no special mapping
    }

    if (pt.includes('contractor')) return 'Contractor';
    if (pt.includes('visitor')) return 'Visitor';
    if (pt.includes('temp')) return 'Temp Badge';
    return 'Unknown';
  };





..........

// --- LACA companyRows: aggregated by CompanyName for pickedDate (EMEA-style) ---
  const companyRows = useMemo(() => {
    if (!data || !pickedDate) return [];

    const ds = format(pickedDate, 'yyyy-MM-dd');
    const codeToCountry = {
      AR: 'Argentina',
      BR: 'Brazil',
      CR: 'Costa Rica',
      MX: 'Mexico',
      PA: 'Panama',
      PE: 'Peru'
    };

    // filter details for this date and only for partitions we care about
    const filtered = data.details.filter(r =>
      (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds ||
       r.SwipeDate && r.SwipeDate.slice(0, 10) === ds) &&
      (!filterCode || (r.PartitionName2 && r.PartitionName2.startsWith(filterCode + '.')))
    );

    const map = new Map();

    filtered.forEach(r => {
      const [code, cityRaw] = String(r.PartitionName2 || '').split('.');
      const city = (cityRaw || r.PartitionName2 || 'Unknown').replace('Partition','').trim();
      const country = codeToCountry[code] || code || 'Unknown';

      const company = getCanonicalCompany(r);

      const key = `${country}||${city}||${company}`;
      const existing = map.get(key);
      if (existing) {
        existing.total += 1;
      } else {
        map.set(key, { country, city, company, total: 1 });
      }
    });

    return Array.from(map.values()).sort((a, b) => {
      if (a.country !== b.country) return a.country.localeCompare(b.country);
      if (a.city !== b.city) return a.city.localeCompare(b.city);
      return a.company.localeCompare(b.company);
    });
  }, [data, pickedDate, filterCode]);






......


const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    const filtered = data.details.filter(r => {
      const inDay = (r.SwipeDate && r.SwipeDate.startsWith(ds))
        || (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds);

      const inPartition = !filterCode
        || (r.PartitionName2 && r.PartitionName2.startsWith(filterCode + '.'));
      return inDay && inPartition;
    });

    filtered.sort((a, b) =>
      (a.LocaleMessageTime || '').localeCompare(b.LocaleMessageTime || '')
    );

    // dedupe by PersonGUID, keep first
    const seen = new Set();
    let rows = filtered.filter(r => {
      if (seen.has(r.PersonGUID)) return false;
      seen.add(r.PersonGUID);
      return true;
    });

    // attach computed company
    rows = rows.map(r => ({ ...r, CompanyNameComputed: getCanonicalCompany(r) }));

    // If a company is selected, filter to match country||city||company
    if (selectedCompany) {
      const [selCountry, selCity, selCompanyRaw] = selectedCompany.split('||');
      const selCompanyNorm = String(selCompanyRaw || '').replace(/\s+/g, ' ').trim().toLowerCase();

      rows = rows.filter(r => {
        const rnCompany = String(r.CompanyNameComputed || 'Unknown').replace(/\s+/g, ' ').trim().toLowerCase();
        const [code, cityRaw] = String(r.PartitionName2 || '').split('.');
        const rowCity = (cityRaw || r.PartitionName2 || '').replace('Partition','').trim();
        const codeToCountry = {
          AR: 'Argentina',
          BR: 'Brazil',
          CR: 'Costa Rica',
          MX: 'Mexico',
          PA: 'Panama',
          PE: 'Peru'
        };
        const rowCountry = codeToCountry[code] || code || 'Unknown';
        return rnCompany === selCompanyNorm && rowCity === selCity && rowCountry === selCountry;
      });
    }

    return rows;
  }, [data, pickedDate, showDetails, filterCode, selectedCompany]);





