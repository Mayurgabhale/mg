
{suggestions.map(emp => (
  <li key={emp.id} onClick={() => onSelectSuggestion(emp)}>
    {emp.EmpName} {emp.EmployeeID && `(${emp.EmployeeID})`}
  </li>
))}

....


react-dom-client.development.js:7563 Encountered two children with the same key, `2097201235`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.
(anonymous)	@	react-dom-client.development.js:7563
runWithFiberInDEV	@	react-dom-client.development.js:1518
warnOnInvalidKey	@	react-dom-client.development.js:7562
reconcileChildrenArray	@	react-dom-client.development.js:7628
reconcileChildFibersImpl	@	react-dom-client.development.js:7949
(anonymous)	@	react-dom-client.development.js:8057
reconcileChildren	@	react-dom-client.development.js:8619
beginWork	@	react-dom-client.development.js:10732
runWithFiberInDEV	@	react-dom-client.development.js:1518
performUnitOfWork	@	react-dom-client.development.js:15130
workLoopSync	@	react-dom-client.development.js:14956
renderRootSync	@	react-dom-client.development.js:14936
performWorkOnRoot	@	react-dom-client.development.js:14417
performWorkOnRootViaSchedulerTask	@	react-dom-client.development.js:16216
performWorkUntilDeadline	@	scheduler.development.js:45
<li>		
exports.jsxDEV	@	react-jsx-dev-runtime.development.js:336
(anonymous)	@	SearchBar.jsx:38
SearchBar	@	SearchBar.jsx:38
react-stack-bottom-frame	@	react-dom-client.development.js:23863
renderWithHooksAgain	@	react-dom-client.development.js:5629
renderWithHooks	@	react-dom-client.development.js:5541
updateFunctionComponent	@	react-dom-client.development.js:8897
beginWork	@	react-dom-client.development.js:10522
runWithFiberInDEV	@	react-dom-client.development.js:1518
performUnitOfWork	@	react-dom-client.development.js:15130
workLoopSync	@	react-dom-client.development.js:14956
renderRootSync	@	react-dom-client.development.js:14936
performWorkOnRoot	@	react-dom-client.development.js:14417
performWorkOnRootViaSchedulerTask	@	react-dom-client.development.js:16216
performWorkUntilDeadline	@	scheduler.development.js:45





import React, { useRef, useEffect } from 'react';

export default function SearchBar({ value, onChange, onSearch, suggestions, onSelectSuggestion }) {
  const wrapperRef = useRef();

  // Close suggestions dropdown on outside click
  useEffect(() => {
    function handleClickOutside(event) {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        onSelectSuggestion(null); // Clear suggestions
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [onSelectSuggestion]);

  return (
    <div className="search-bar-container" ref={wrapperRef}>
      <form
        onSubmit={e => {
          e.preventDefault();
          onSearch();
        }}
      >
        <input
          type="text"
          placeholder="Search by Name or EmpID"
          value={value}
          onChange={e => onChange(e.target.value)}
          autoComplete="off"
        />
        <button type="submit">Search</button>
      </form>

      {suggestions?.length > 0 && (
        <ul className="suggestions-dropdown">
          {suggestions.map(emp => (
            <li key={emp.id} onClick={() => onSelectSuggestion(emp)}>
              {emp.EmpName} {emp.EmployeeID && `(${emp.EmployeeID})`}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}












// src/App.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import SearchBar from './components/SearchBar';
import EmployeeCard from './components/EmployeeCard';
import './App.css';
import wulogo from './assets/img/WU-logo.png';

function App() {
  const [searchTerm, setSearchTerm] = useState('');
  const [allEmployees, setAllEmployees] = useState([]);
  const [selected, setSelected] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [history, setHistory] = useState([]);
  const [stats, setStats] = useState(null);

  useEffect(() => {
    setLoading(true);
    axios.get('http://localhost:5001/api/employees')
      .then(res => setAllEmployees(res.data))
      .catch(() => setError('Failed to load employees'))
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    axios.get('http://localhost:5001/api/stats')
      .then(res => setStats(res.data))
      .catch(err => console.error('❌ Stats load failed', err));
  }, []);

  useEffect(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) {
      setSuggestions([]);
      return;
    }
    const matches = allEmployees.filter(emp =>
      (emp.EmployeeID || '').toLowerCase().includes(term) ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );
    setSuggestions(matches.slice(0, 40));
  }, [searchTerm, allEmployees]);

  const handleSearch = () => {
    setError('');
    const term = searchTerm.trim().toLowerCase();
    if (!term) return setError('Please enter name or ID');

    const found = allEmployees.find(emp =>
      (emp.EmployeeID || '').toLowerCase() === term ||
      (emp.EmpName || '').toLowerCase().includes(term)
    );

    setSuggestions([]);

    if (!found) {
      setSelected(null);
      setError('No matching employee');
    } else {
      selectEmployee(found);
    }
  };

  const selectEmployee = emp => {
    setSelected(emp);
    setSearchTerm(emp.EmpName);
    setHistory(prev => {
      if (prev.find(e => e.id === emp.id)) return prev;
      return [emp, ...prev];
    });
  };

  const pickSuggestion = emp => {
    if (!emp) {
      setSuggestions([]);
      return;
    }
    selectEmployee(emp);
    setSuggestions([]);
  };

  const pickHistory = emp => {
    selectEmployee(emp);
  };

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <div className="header-logo-text">
            <img src={wulogo} alt="WU Logo" className="logo" />
            <div className="header-text">
              <h1>Associate Verification Tool</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="main-container">
        <div className="left-panel">
          <div className="search-bar">
            <SearchBar
              value={searchTerm}
              onChange={setSearchTerm}
              onSearch={handleSearch}
              suggestions={suggestions}
              onSelectSuggestion={pickSuggestion}
            />
          </div>
          {loading && <p>Loading…</p>}
          {error && <p className="error">{error}</p>}
          {selected && <EmployeeCard emp={selected} />}
        </div>

        <div className="right-panel">
          <div className="lists-container">
            <div className="history-list">
              <h3>Related Results</h3>
              <ul>
                {suggestions.map(emp => (
                  <li key={emp.id} onClick={() => pickSuggestion(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>

            <div className="history-list">
              <h3>Search History</h3>
              <ul>
                {history.map(emp => (
                  <li key={emp.id} onClick={() => pickHistory(emp)}>
                    {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>

      <footer
        style={{
          backgroundColor: '#000',
          color: '#FFC72C',
          padding: '1.5rem 0',
          textAlign: 'center',
          marginTop: '0rem',
          borderTop: '2px solid #FFC72C',
          fontSize: '0.95rem',
          lineHeight: '1.6'
        }}
      >
        <div>
          <strong>Global Security Operations Center</strong>
          <br />
          Associate Verification Tool — Western Union
        </div>
        <div style={{ marginTop: '0.75rem' }}>
          Contact us:&nbsp;
          <a
            href="mailto:GSOC-GlobalSecurityOperationCenter.SharedMailbox@westernunion.com"
            style={{ color: '#FFC72C', textDecoration: 'underline' }}
          >
            GSOC Mail
          </a>
          &nbsp;|&nbsp;
          Landline:&nbsp;
          <span style={{ color: '#FFC72C' }}>+91-020-67632394</span>
        </div>
      </footer>
    </div>
  );
}

export default App;

