// GET /api/monthly-summary?month=YYYY-MM
exports.getMonthlySummary = async (req, res) => {
  try {
    const { month } = req.query;
    if (!month || !/^\d{4}-\d{2}$/.test(month)) {
      return res.status(400).json({ error: 'invalid "month" format; expected YYYY-MM' });
    }

    const [year, monthNum] = month.split('-').map(Number);

    // Start/end in IST (Asia/Kolkata)
    const start = DateTime.fromObject({ year, month: monthNum, day: 1 }, { zone: 'Asia/Kolkata' });
    const end = start.endOf('month');
    const todayStr = DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

    // All dates of that month
    const allDates = [];
    let cursor = start;
    while (cursor <= end) {
      allDates.push(cursor.toFormat('yyyy-LL-dd'));
      cursor = cursor.plus({ days: 1 });
    }

    const isCurrentMonth =
      start.toFormat('yyyy-LL') === DateTime.now().setZone('Asia/Kolkata').toFormat('yyyy-LL');

    const consideredDates = isCurrentMonth
      ? allDates.filter(d => d <= todayStr)
      : allDates.slice();

    // Query DB for swipe events
    const startUtc = start.setZone('utc').toJSDate();
    const endUtc = end.setZone('utc').toJSDate();
    const pool = await getPool();
    const reqDb = pool.request();
    reqDb.input('start', sql.DateTime2, startUtc);
    reqDb.input('end', sql.DateTime2, endUtc);

    const { recordset } = await reqDb.query(`
      SELECT
        t1.MessageUTC,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t3.Name AS PersonnelType
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND t1.MessageUTC BETWEEN @start AND @end
      ORDER BY t1.MessageUTC ASC;
    `);

    // Normalize events to IST
    const events = recordset.map(e => {
      const local = DateTime.fromJSDate(e.MessageUTC, { zone: 'utc' }).setZone('Asia/Kolkata');
      return {
        employeeId: (e.EmployeeID || '').toString().trim(),
        name: e.ObjectName1,
        personnelType: e.PersonnelType,
        date: local.toFormat('yyyy-LL-dd'),
      };
    });

    // Group swipes per employee â†’ per date
    const presenceByPerson = new Map();
    for (const ev of events) {
      if (!ev.employeeId) continue; // skip if no employeeId
      if (!presenceByPerson.has(ev.employeeId)) {
        presenceByPerson.set(ev.employeeId, {
          employeeId: ev.employeeId,
          name: ev.name,
          personnelType: ev.personnelType,
          days: new Set()
        });
      }
      presenceByPerson.get(ev.employeeId).days.add(ev.date);
    }

    // Build attendance sheet
    const attendanceSheet = Array.from(presenceByPerson.values()).map(p => {
      const row = {
        employeeId: p.employeeId,
        name: p.name,
        personnelType: p.personnelType
      };

      let presentCount = 0;
      for (const d of allDates) {
        const isFuture = isCurrentMonth && d > todayStr;
        if (isFuture) {
          row[d] = null;
          continue;
        }

        if (p.days.has(d)) {
          row[d] = 'P';
          presentCount++;
        } else {
          row[d] = 'A';
        }
      }

      const totalDays = consideredDates.length;
      const daysAbsent = totalDays - presentCount;
      row.daysPresent = presentCount;
      row.daysAbsent = daysAbsent;
      row.attendancePercent = totalDays > 0
        ? ((presentCount / totalDays) * 100).toFixed(1) + '%'
        : '0.0%';

      return row;
    });

    return res.json({
      month,
      today: todayStr,
      workingDaysConsidered: consideredDates.length,
      attendanceSheet
    });
  } catch (err) {
    console.error('getMonthlySummary error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};
