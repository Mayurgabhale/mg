curl "http://localhost:5000/api/occupancy-at?datetime=2025-09-12T00:10:00+05:30" | jq





// Fetch events between two JS Date instants (inclusive)
async function fetchEventsBetween(from, to) {
  const pool = await getPool();
  const req  = pool.request();
  req.input('from', sql.DateTime2, from);
  req.input('to',   sql.DateTime2, to);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE,-1 *t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) BETWEEN @from AND @to
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}




...

exports.getOccupancyAtTime = async (req, res) => {
  try {
    // parse incoming date/time
    const { datetime, date, time } = req.query;

    let dt; // Luxon DateTime in Asia/Kolkata
    if (datetime) {
      // try parse as ISO first; if no zone provided, assume Asia/Kolkata
      dt = DateTime.fromISO(datetime, { zone: 'Asia/Kolkata' });
      if (!dt.isValid) {
        // try RFC or generic parse as fallback
        dt = DateTime.fromRFC2822(datetime, { zone: 'Asia/Kolkata' });
      }
    } else {
      // build from date + time (with sensible defaults)
      const theDate = date || getTodayString(); // already returns yyyy-LL-dd in Asia/Kolkata
      const theTime = time || '00:00';
      // try multiple time formats
      const tryFormats = [
        'yyyy-LL-dd h:mm a',
        'yyyy-LL-dd hh:mm a',
        'yyyy-LL-dd H:mm',
        'yyyy-LL-dd HH:mm',
        'yyyy-LL-dd h:mm',
        'yyyy-LL-dd hh:mm'
      ];
      for (const fmt of tryFormats) {
        const cand = DateTime.fromFormat(`${theDate} ${theTime}`, fmt, { zone: 'Asia/Kolkata' });
        if (cand.isValid) { dt = cand; break; }
      }
      // as last resort, try ISO combine
      if (!dt) {
        const isoStr = `${theDate}T${theTime}`;
        dt = DateTime.fromISO(isoStr, { zone: 'Asia/Kolkata' });
      }
    }

    if (!dt || !dt.isValid) {
      return res.status(400).json({
        error: 'Invalid/Unparseable datetime. Use datetime=ISO or date=yyyy-LL-dd & time="10:00 PM" or "22:00".'
      });
    }

    // Convert to JS Date (UTC instant) to pass into SQL parameter
    const untilJSDate = dt.toJSDate();

    // Fetch all events up to that instant (inclusive)
    const eventsAll = await fetchEventsUntil(untilJSDate);

    // requested local date (Asia/Kolkata)
    const requestedDateStr = dt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');

    // ── Occupancy at the instant (people present at the requested instant) ──
    const events = eventsAll.filter(evt => String(evt.Dateonly) === requestedDateStr);

    // build occupancy (who is present at the requested instant)
    const occupancy = await buildOccupancy(events);

    // set asOf to the requested (local) timestamp
    occupancy.asOf = dt.setZone('Asia/Kolkata').toISO();

    // ── VISITED ON DATE: compute over the FULL local date (00:00 → 23:59:59.999 IST) ──
    const dayStart = DateTime.fromISO(requestedDateStr, { zone: 'Asia/Kolkata' }).startOf('day').toJSDate();
    const dayEnd   = DateTime.fromISO(requestedDateStr, { zone: 'Asia/Kolkata' }).endOf('day').toJSDate();

    // fetch full-day events and compute visited (dedupe by PersonGUID)
    const eventsFullDay = await fetchEventsBetween(dayStart, dayEnd);
    const visited = buildVisitedForDate(eventsFullDay, requestedDateStr);

    occupancy.totalVisitedOnDate = visited.total;
    occupancy.visitedOnDate = {
      employees: visited.employees,
      contractors: visited.contractors,
      total: visited.total,
      date: requestedDateStr
    };

    return res.json(occupancy);

  } catch (err) {
    console.error('Error in getOccupancyAtTime:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};






....

...


async function fetchSnapshot(datetimeISO) {
  setTimeTravelLoading(true);
  try {
    const url = `http://localhost:5000/api/occupancy-at?datetime=${encodeURIComponent(datetimeISO)}`;
    console.debug('[TimeTravel] fetching', url);
    const resp = await fetch(url, { headers: { Accept: 'application/json' } });
    if (!resp.ok) {
      window.alert(`Snapshot request failed (${resp.status})`);
      return;
    }
    const p = await resp.json();

    setLiveData({
      summary: Array.isArray(p.summary) ? p.summary : [],
      details: p.details || {},
      floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
      zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
      personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
      // Use snapshot fields when present (fall back to live-names)
      totalVisitedToday: typeof p.totalVisitedOnDate === 'number'
        ? p.totalVisitedOnDate
        : (typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0),
      personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
      visitedToday: p.visitedOnDate
        ? {
            employees: p.visitedOnDate.employees || 0,
            contractors: p.visitedOnDate.contractors || 0,
            total: p.visitedOnDate.total || 0
          }
        : (p.visitedToday || { employees: 0, contractors: 0, total: 0 }),
      ertStatus: p.ertStatus || {}
    });

    setTimeTravelMode(true);
    setTimeTravelTimestamp(p?.asOf || datetimeISO);
  } catch (err) {
    console.error('Failed to fetch snapshot', err);
    window.alert('Failed to fetch snapshot');
  } finally {
    setTimeTravelLoading(false);
  }
}