dont ue talwind css, only use clsass name and id, 
for this page for desing, ok, 
dont use talwind css, for desing, 
because we geeting issue thats way 


import React, { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  Line,
  PieChart,
  Pie,
  Cell,
} from "recharts";
import {
  FiDownload as Download,
  FiSearch as Search,
  FiCalendar as Calendar,
  FiRefreshCw as Refresh,
  FiUsers as Users,
  FiUser as User,
  FiPieChart as PieChartIcon,
  FiTrendingUp as TrendingUp,
  FiFilter,
  FiCheckSquare,
  FiMenu,
  FiChevronLeft,
  FiChevronRight,
  FiPlus,
} from "react-icons/fi";

/**
 * Premium Black + Gold Dashboard
 *
 * Requirements:
 *  - TailwindCSS (with backdrop blur enabled)
 *  - framer-motion
 *  - recharts
 *  - react-icons
 *
 * Usage:
 *  <PuneMonthlyPremiumDashboard initialMonth="2025-09" />
 */

const GOLD = "#FFD166"; // warmer gold for gradients
const GOLD_DEEP = "#D4AF37";
const BG_GRADIENT = "bg-gradient-to-br from-black via-neutral-900 to-neutral-950";
const CARD_GLASS =
  "bg-white/4 backdrop-blur-md border border-white/6 shadow-lg"; // glassmorphism card base

export default function PuneMonthlyPremiumDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth =
    initialMonth ||
    `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  // state
  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);
  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  // fetch data
  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => {
      alive = false;
    };
  }, [month]);

  // derived data
  const days = useMemo(
    () =>
      data?.attendanceSheet?.length
        ? Object.keys(data.attendanceSheet[0]).filter((k) =>
            /\d{4}-\d{2}-\d{2}/.test(k)
          )
        : data?.days || [],
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || [])
      set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter((r) => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter)
        return false;
      if (q) {
        const term = q.toLowerCase();
        return (
          (r.name || "").toLowerCase().includes(term) ||
          (r.employeeId || "").toLowerCase().includes(term)
        );
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = [GOLD, "#F59E0B", "#F97316", "#10B981", "#60A5FA", "#A78BFA"];

  // downloads
  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance;
    const headers = ["employeeId", "name", "personnelType", "daysPresent", "attendancePercent"];
    const csv = [headers.join(",")]
      .concat(
        rows.map((r) =>
          headers
            .map((h) => `"${(r[h] ?? "").toString().replace(/"/g, '""')}"`)
            .join(",")
        )
      )
      .join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `attendance-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  // helpers
  function humanDay(d) {
    return d.slice(8);
  }
  function pctColor(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-neutral-700 text-neutral-200";
    if (n >= 90) return "bg-emerald-500 text-black";
    if (n >= 75) return "bg-amber-400 text-black";
    return "bg-rose-600 text-white";
  }

  // small animation props
  const cardPop = { whileHover: { y: -6, scale: 1.01 }, transition: { type: "spring", stiffness: 300 } };

  return (
   <div className="pune-dashboard">
    <div className={`${BG_GRADIENT} min-h-screen text-neutral-100`}>
      <div className="max-w-[1400px] mx-auto px-4 py-6">
        <div className="flex gap-6">
          {/* SIDEBAR */}
          <aside className={`transition-all ${sidebarOpen ? "w-72" : "w-16"} flex-shrink-0`}>
            <div className={`${CARD_GLASS} rounded-2xl p-4 border-neutral-700`}>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-11 h-11 rounded-lg flex items-center justify-center"
                    style={{
                      background: `linear-gradient(135deg, rgba(255,209,102,0.08), rgba(212,175,55,0.03))`,
                      boxShadow: `0 6px 18px rgba(212,175,55,0.05)`,
                    }}>
                    <Users className="text-yellow-300" size={20} />
                  </div>
                  {sidebarOpen && (
                    <div>
                      <div className="text-sm font-semibold" style={{ color: GOLD_DEEP }}>
                        Pune Dashboard
                      </div>
                      <div className="text-xs text-neutral-400">Monthly Attendance</div>
                    </div>
                  )}
                </div>

                <button
                  onClick={() => setSidebarOpen(s => !s)}
                  aria-label="Toggle sidebar"
                  className="p-2 rounded-md hover:bg-white/3"
                >
                  {sidebarOpen ? <FiChevronLeft /> : <FiChevronRight />}
                </button>
              </div>

              {sidebarOpen && (
                <>
                  <nav className="mt-6 space-y-2">
                    <button className="w-full text-left px-3 py-2 rounded-md hover:bg-white/3 flex items-center gap-3 transition">
                      <TrendingUp /> <span className="text-sm">Overview</span>
                    </button>
                    <button className="w-full text-left px-3 py-2 rounded-md hover:bg-white/3 flex items-center gap-3 transition">
                      <PieChartIcon /> <span className="text-sm">People</span>
                    </button>
                    <button className="w-full text-left px-3 py-2 rounded-md hover:bg-white/3 flex items-center gap-3 transition">
                      <Users /> <span className="text-sm">Directory</span>
                    </button>
                  </nav>

                  <div className="mt-6 pt-3 border-t border-white/6 text-xs text-neutral-400">
                    Data range: <span className="text-neutral-100 font-medium">{month}</span>
                  </div>
                </>
              )}
            </div>
          </aside>

          {/* MAIN */}
          <div className="flex-1">
            {/* HEADER */}
            <motion.header initial={{ opacity: 0, y: -8 }} animate={{ opacity: 1, y: 0 }} className={`${CARD_GLASS} rounded-2xl p-4 mb-6 flex items-center justify-between border-neutral-700`}>
              <div className="flex items-center gap-4">
                <div>
                  <h1 className="text-xl md:text-2xl font-bold" style={{ color: GOLD_DEEP }}>
                    Pune — Monthly Attendance
                  </h1>
                  <p className="text-sm text-neutral-300">Premium overview • glass UI • gold accents</p>
                </div>

                {/* month picker compact */}
                <div className="hidden md:flex items-center gap-3 ml-6">
                  <div className="flex items-center gap-2 bg-white/3 rounded-full px-3 py-2">
                    <Calendar className="text-neutral-200" />
                    <input
                      aria-label="Select month"
                      type="month"
                      value={month}
                      onChange={(e) => setMonth(e.target.value)}
                      className="bg-transparent outline-none text-sm"
                    />
                  </div>
                  <button
                    onClick={() => { setLoading(true); setTimeout(() => setLoading(false), 600); }}
                    className="inline-flex items-center gap-2 px-3 py-2 rounded-full bg-white/6 hover:brightness-105 transition"
                    title="Refresh"
                  >
                    <Refresh /> Refresh
                  </button>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <button onClick={downloadCSV} className="inline-flex items-center gap-2 px-3 py-2 rounded-full bg-gradient-to-r from-yellow-400 to-yellow-300 text-black font-semibold shadow-sm hover:scale-105 transition transform">
                  <Download /> CSV
                </button>
                <button onClick={downloadJSON} className="inline-flex items-center gap-2 px-3 py-2 rounded-full border border-white/8 bg-white/3 hover:bg-white/5 transition">
                  <Download /> JSON
                </button>
              </div>
            </motion.header>

            {/* KPI ROW */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <motion.div {...cardPop} className={`${CARD_GLASS} rounded-2xl p-5 border-l-4 border-yellow-400`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-xs text-neutral-300">Avg Daily Headcount</div>
                    <div className="text-2xl font-bold mt-1">{data?.avgDailyHeadcount ?? "—"}</div>
                    <div className="text-xs text-neutral-400 mt-2">Monthly average of unique headcount</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ background: "rgba(255,209,102,0.06)" }}>
                    <Users className="text-yellow-300" />
                  </div>
                </div>
                <div className="mt-3 h-1 w-3/4 rounded-full" style={{ background: "linear-gradient(90deg,#FFD166,#D4AF37)" }} />
              </motion.div>

              <motion.div {...cardPop} className={`${CARD_GLASS} rounded-2xl p-5 border-l-4 border-emerald-400`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-xs text-neutral-300">Distinct People</div>
                    <div className="text-2xl font-bold mt-1">{data?.summary?.persons ?? (data?.attendanceSheet?.length ?? 0)}</div>
                    <div className="text-xs text-neutral-400 mt-2">Who recorded at least one swipe</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ background: "rgba(16,185,129,0.06)" }}>
                    <User className="text-emerald-300" />
                  </div>
                </div>
                <div className="mt-3 h-1 w-1/2 rounded-full bg-white/6" />
              </motion.div>

              <motion.div {...cardPop} className={`${CARD_GLASS} rounded-2xl p-5 border-l-4 border-amber-400`}>
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-xs text-neutral-300">Days in Month</div>
                    <div className="text-2xl font-bold mt-1">{data?.summary?.daysInMonth ?? (data?.days?.length ?? days.length)}</div>
                    <div className="text-xs text-neutral-400 mt-2">{month}</div>
                  </div>
                  <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ background: "rgba(245,158,11,0.06)" }}>
                    <Calendar className="text-amber-300" />
                  </div>
                </div>
                <div className="mt-3 h-1 w-1/3 rounded-full bg-white/6" />
              </motion.div>
            </div>

            {/* CHARTS */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6">
              <motion.div {...cardPop} className={`${CARD_GLASS} rounded-2xl p-4 col-span-1 lg:col-span-2`}>
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <TrendingUp className="text-yellow-300" />
                    <h3 className="font-semibold">Peak Occupancy</h3>
                  </div>
                  <div className="text-sm text-neutral-400">Daily peaks</div>
                </div>
                <div style={{ height: 320 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={data?.peakOccupancy || []} margin={{ top: 6, right: 12, left: 0, bottom: 6 }}>
                      <CartesianGrid strokeDasharray="3 3" stroke="rgba(255,255,255,0.03)" />
                      <XAxis dataKey="date" tickFormatter={d => d.slice(8)} stroke="rgba(255,255,255,0.5)" />
                      <YAxis stroke="rgba(255,255,255,0.5)" />
                      <Tooltip formatter={(v) => [v, "Peak"]} contentStyle={{ borderRadius: 8, background: '#0b1220', color: '#fff', border: '1px solid rgba(255,255,255,0.04)' }} />
                      <Bar dataKey="peak" fill={GOLD} radius={[8,8,0,0]} />
                      <Line type="monotone" dataKey="peak" stroke="#60A5FA" strokeWidth={2} dot={false} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </motion.div>

              <motion.div {...cardPop} className={`${CARD_GLASS} rounded-2xl p-4`}>
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-2">
                    <PieChartIcon className="text-yellow-300" />
                    <h3 className="font-semibold">People by Type</h3>
                  </div>
                  <div className="text-sm text-neutral-400">Distribution</div>
                </div>

                <div style={{ height: 220 }}>
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie data={personnelDistribution} dataKey="value" nameKey="name" outerRadius={70} innerRadius={36} paddingAngle={4}>
                        {personnelDistribution.map((entry, idx) => (
                          <Cell key={`c-${idx}`} fill={COLORS[idx % COLORS.length]} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                </div>

                <div className="mt-3 grid grid-cols-1 gap-2 text-sm">
                  {personnelDistribution.map((p, i) => (
                    <div key={p.name} className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <div className="w-3 h-3 rounded-full" style={{ background: COLORS[i % COLORS.length] }} />
                        <div className="text-neutral-200">{p.name}</div>
                      </div>
                      <div className="text-sm font-semibold">{p.value}</div>
                    </div>
                  ))}
                </div>
              </motion.div>
            </div>

            {/* CONTROLS + TABLE */}
            <div className={`${CARD_GLASS} rounded-2xl p-4 mb-6`}>
              <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4 mb-4">
                <div className="flex items-center gap-3 w-full lg:w-auto">
                  <div className="relative flex-1">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Search className="text-neutral-400" />
                    </div>
                    <input
                      value={q}
                      onChange={(e) => setQ(e.target.value)}
                      placeholder="Search name or ID..."
                      className="w-full pl-10 pr-4 py-2 rounded-full bg-white/3 border border-white/6 focus:ring-2 focus:ring-yellow-300 outline-none"
                    />
                  </div>

                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <FiFilter className="text-neutral-400" />
                    </div>
                    <select value={personnelFilter} onChange={(e) => setPersonnelFilter(e.target.value)} className="pl-10 pr-4 py-2 rounded-full bg-white/3 border border-white/6">
                      {personnelTypes.map((pt) => <option key={pt} value={pt}>{pt}</option>)}
                    </select>
                  </div>

                  <label className="flex items-center gap-2 text-sm select-none">
                    <FiCheckSquare />
                    <input type="checkbox" checked={showTopOnly} onChange={(e) => setShowTopOnly(e.target.checked)} className="accent-yellow-400" />
                    Show top 50
                  </label>
                </div>

                <div className="text-sm text-neutral-400">Showing <strong className="text-neutral-100">{filteredAttendance.length}</strong> records • Updated: <span>{new Date().toLocaleTimeString()}</span></div>
              </div>

              {/* table wrapper with sticky header */}
              <div className="overflow-auto rounded-xl border border-white/6">
                <table className="min-w-full">
                  <thead className="bg-gradient-to-r from-black/40 to-transparent sticky top-0 backdrop-blur-sm">
                    <tr className="text-xs text-neutral-400 uppercase tracking-wider">
                      <th className="px-3 py-2 text-left">#</th>
                      <th className="px-3 py-2 text-left">Employee</th>
                      <th className="px-3 py-2 text-left">Type</th>
                      {days.map((d) => <th key={d} className="px-1 py-2 text-center">{humanDay(d)}</th>)}
                      <th className="px-3 py-2 text-right">Present</th>
                      <th className="px-3 py-2 text-right">%</th>
                    </tr>
                  </thead>

                  <tbody>
                    {(showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance).map((r, idx) => (
                      <tr key={(r.employeeId || idx) + "-" + idx} className="border-t border-white/6 hover:bg-white/4 transition">
                        <td className="px-3 py-2 text-sm text-neutral-200">{idx + 1}</td>
                        <td className="px-3 py-2">
                          <div className="flex items-center gap-3">
                            <div className="w-9 h-9 rounded-full flex items-center justify-center bg-white/4 text-neutral-100 font-semibold">
                              {(r.name || "?").split(" ").map(s => s[0]).slice(0,2).join("")}
                            </div>
                            <div>
                              <div className="text-sm font-medium text-neutral-100">{r.name}</div>
                              <div className="text-xs text-neutral-400">{r.employeeId}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-3 py-2 text-sm text-neutral-300">{r.personnelType}</td>

                        {days.map(d => {
                          const v = r[d];
                          const isP = String(v).toUpperCase() === "P" || v === true;
                          return (
                            <td key={d} className="px-1 py-2 text-center">
                              <div className={`inline-flex items-center justify-center w-6 h-6 rounded-full text-xs font-semibold ${isP ? 'bg-emerald-400 text-black' : 'bg-white/6 text-neutral-300'}`}>
                                {isP ? 'P' : 'A'}
                              </div>
                            </td>
                          );
                        })}

                        <td className="px-3 py-2 text-sm text-neutral-100 text-right">{r.daysPresent ?? '—'}</td>
                        <td className="px-3 py-2 text-right">
                          <span className={`inline-block px-2 py-1 rounded-full text-xs font-semibold ${pctColor(r.attendancePercent)}`}>
                            {r.attendancePercent ? `${r.attendancePercent}%` : '—'}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <footer className="text-xs text-neutral-400">Notes: Present = any InDirection swipe (Asia/Kolkata). Data fetched from <code className="bg-white/4 px-1 py-0.5 rounded">/api/monthly-summary?month=YYYY-MM</code>.</footer>
          </div>
        </div>
      </div>

      {/* Floating Action Button */}
      <div className="fixed right-6 bottom-6">
        <motion.button whileHover={{ scale: 1.06 }} whileTap={{ scale: 0.96 }}
          className="w-14 h-14 rounded-full flex items-center justify-center shadow-2xl"
          style={{
            background: `radial-gradient(circle at 30% 20%, ${GOLD} 0%, #d9a726 30%, #bf8f1d 100%)`,
            color: "#111",
            boxShadow: "0 10px 30px rgba(212,175,55,0.25)",
          }}
          title="Quick action"
          onClick={() => window.scrollTo({ top: 0, behavior: "smooth" })}
        >
          <FiPlus />
        </motion.button>
      </div>
    </div>
</div>
  );
}
