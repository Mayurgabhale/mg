// src/components/PersonnelDonutChart.jsx

import React from 'react';
import {
  PieChart,
  Pie,
  Cell,
  Tooltip,
  ResponsiveContainer,
  Legend,
  Label
} from 'recharts';
import { Card } from 'react-bootstrap';
import './PersonnelDonutChart.css'; // We'll add some custom CSS for enhanced styling

// Enhanced colors with gradients for a more 3D-like appearance (WU theme + accents)
const COLORS = [
  { start: '#FFD100', end: '#FFC107' }, // WU Yellow gradient
  { start: '#009E60', end: '#007A4D' }, // WU Green gradient
  { start: '#88B04B', end: '#6B8E23' }, // Olive gradient
  { start: '#FF6F61', end: '#FF5252' }, // Coral gradient
  { start: '#58595B', end: '#424242' }, // WU Gray gradient
  { start: '#FFB800', end: '#FF9800' }, // Accent Yellow gradient
  { start: '#6B5B95', end: '#4A4078' }  // Indigo gradient
];

const DarkTooltip = ({ active, payload }) => {
  if (!active || !payload?.length) return null;
  const { name, value, percent } = payload[0];
  return (
    <div className="custom-tooltip">
      <div className="tooltip-title">{name}</div>
      <div className="tooltip-value">Count: {value}</div>
      <div className="tooltip-percent">({(percent * 100).toFixed(1)}%)</div>
    </div>
  );
};

export default function PersonnelDonutChart({ data = [] }) {
  const total = data.reduce((sum, e) => sum + e.count, 0);
  if (!data.length || total === 0) {
    return <Card body className="bg-dark text-white">No personnel data</Card>;
  }

  const sorted = [...data].sort((a, b) => b.count - a.count);

  return (
    <Card className="mb-4 personnel-card shadow-lg border-0">
      <Card.Header className="bg-gradient-dark text-warning text-center fw-bold">
        <h5>Personnel Type Headcount</h5>
        <div className="header-underline"></div>
      </Card.Header>
      <Card.Body className="p-3 bg-dark">
        <ResponsiveContainer width="100%" height="400px">
          <PieChart className="enhanced-pie">
            <Pie
              data={sorted}
              dataKey="count"
              nameKey="personnelType"
              cx="50%"
              cy="50%"
              innerRadius={60}
              outerRadius={100}
              paddingAngle={3}
              minAngle={10}
              label={({ name, percent }) => (
                <text
                  x={0}
                  y={0}
                  textAnchor="middle"
                  dominantBaseline="middle"
                  className="pie-label"
                >
                  {name.split(' ').map((word, i) => (
                    <tspan key={i} x="0" dy={i === 0 ? 0 : 12}>
                      {word}
                    </tspan>
                  ))}
                  <tspan x="0" dy={12} className="percent-text">
                    {(percent * 100).toFixed(0)}%
                  </tspan>
                </text>
              )}
              stroke="#fff"
              strokeWidth={3}
              strokeLinecap="round"
            >
              {sorted.map((entry, idx) => (
                <Cell
                  key={entry.personnelType}
                  fill={`url(#grad-${idx})`}
                  stroke="#fff"
                  strokeWidth={2}
                />
              ))}
              <Label
                value={total.toLocaleString()}
                position="center"
                className="center-label"
              />
            </Pie>
            <Tooltip content={<DarkTooltip />} />
            <Legend
              verticalAlign="bottom"
              align="center"
              wrapperStyle={{
                paddingTop: '20px',
                color: '#FFD100',
                fontSize: '1rem',
                fontWeight: '500'
              }}
              iconType="circle"
              iconSize={12}
            />
          </PieChart>
        </ResponsiveContainer>
        {/* SVG Definitions for Gradients */}
        <svg style={{ position: 'absolute', width: 0, height: 0 }}>
          {COLORS.map((color, idx) => (
            <defs key={idx}>
              <linearGradient id={`grad-${idx}`} x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor={color.start} />
                <stop offset="100%" stopColor={color.end} />
              </linearGradient>
            </defs>
          ))}
        </svg>
      </Card.Body>
    </Card>
  );
}





....



/* PersonnelDonutChart.css */

.personnel-card {
  background: linear-gradient(145deg, #1a1a1a, #0d0d0d);
  border-radius: 15px;
  overflow: hidden;
  backdrop-filter: blur(10px);
}

.bg-gradient-dark {
  background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
  border-bottom: 3px solid #FFD100;
}

.header-underline {
  width: 50px;
  height: 3px;
  background: linear-gradient(90deg, #FFD100, #FF9800);
  margin: 0 auto;
  border-radius: 2px;
}

.enhanced-pie {
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.3));
}

.pie-label {
  fill: #fff;
  font-size: 10px;
  font-weight: 600;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
}

.percent-text {
  fill: #FFD100;
  font-size: 12px;
  font-weight: bold;
}

.center-label {
  fill: #FFD100 !important;
  font-size: 2.8rem !important;
  font-weight: 800 !important;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.9);
  dominant-baseline: middle !important;
  text-anchor: middle !important;
}

.custom-tooltip {
  background: linear-gradient(145deg, #1a1a1a, #2d2d2d);
  color: #FFD100;
  border: 1px solid #FFD100;
  border-radius: 8px;
  padding: 12px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
  font-size: 0.95rem;
  min-width: 120px;
}

.tooltip-title {
  font-weight: bold;
  margin-bottom: 4px;
  color: #fff;
}

.tooltip-value,
.tooltip-percent {
  color: #ccc;
  font-size: 0.9rem;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .pie-label {
    font-size: 8px;
  }
  
  .center-label {
    font-size: 2rem !important;
  }
}