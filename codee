import React, { useState, useMemo } from 'react'; import { Card, Row, Col, Badge, Button, Container } from 'react-bootstrap'; import { FaHome, FaBuilding, FaLayerGroup, FaEnvelopeOpenText, FaMobileAlt, FaMapMarkerAlt, FaUserTie, FaUserShield, FaUserNurse, FaUsers, FaFilter, FaEye, FaEyeSlash, FaUserCog, FaIdCard, FaPhone, FaEnvelope, FaLocationArrow } from 'react-icons/fa';

const firstColumnRoles = [ 'Site Head', 'BCM Team / Site Operations', 'HR', 'Incident Controller' ];

const roleIcons = { 'Site Head': <FaUserTie className="text-info" />, 'BCM Team / Site Operations': <FaUserShield className="text-teal" />, 'HR': <FaUserTie className="text-purple" />, 'Incident Controller': <FaUserShield className="text-warning" />, 'ERT Team Leader': <FaUserShield className="text-danger" />, 'ERT Team Members': <FaUsers className="text-primary" />, 'First Aid Team': <FaUserNurse className="text-orange" /> };

const baseLocationByRole = { 'Site Head': 'Podium Floor – Red Zone', 'HR': 'Podium Floor – Red Zone', 'Incident Controller': 'Podium Floor – Red Zone', 'First Aid Team': 'Podium Floor – Green Zone', 'ERT Team Leader': 'Podium Floor – Green Zone', 'BCM Team / Site Operations': 'Podium Floor – Red Zone' };

// ---- Photo helpers ---- const DEFAULT_PHOTO = '/photos/default.png';

const toSlug = (name = '') => name .toLowerCase() .trim() .replace(/[^a-z0-9]+/g, '') .replace(/^+|_+$/g, '');

const getPhotoSrc = (member) => { if (!member) return DEFAULT_PHOTO; if (member.photo) return member.photo;

const name = member.name || member.Name; if (name) return /photos/${toSlug(name)}.png;

return DEFAULT_PHOTO; };

// Utility: filter members for a role based on the current filterZone function filterMembersByZone(membersRaw = [], role, filterZone) { if (!filterZone) return membersRaw || []; return (membersRaw || []).filter(m => m.present && ( (m.zone && m.zone.includes(filterZone)) || (baseLocationByRole[role] && baseLocationByRole[role].includes(filterZone)) ) ); }

function renderRoleCard(role, membersRaw, filterZone) { const members = filterMembersByZone(membersRaw, role, filterZone);

return ( <Card className="dashboard-card mb-3" key={role}> <Card.Header className="dashboard-card-header d-flex align-items-center"> <span className="role-icon me-2">{roleIcons[role] || <FaUserCog className="text-muted" />}</span> <span className="role-title">{role}</span> <Badge bg="outline-light" className="ms-2">{members.length}</Badge> </Card.Header> <Card.Body className="p-3"> {members.length > 0 ? members.map((m, i) => { const location = m.present ? (m.zone || 'Unknown Zone') : baseLocationByRole[role]; return ( <div key={i} className="member-item pb-3 mb-3"> <div className="d-flex justify-content-between align-items-start mb-2"> <div className="d-flex align-items-center"> <div className="member-photo-container"> <img src={getPhotoSrc(m)} alt={m.name || 'Member'} className="member-photo" onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = DEFAULT_PHOTO; }} /> <div className={status-indicator ${m.present ? 'present' : 'away'}}></div> </div> <div className="ms-3"> <h6 className="mb-0 member-name">{m.name}</h6> <small className="text-muted">{m.designation || m.role}</small> </div> </div> <Badge bg={m.present ? 'success' : 'secondary'} className="status-badge"> {m.present ? 'Available' : 'Away'} </Badge> </div>

<div className="member-contact-info">
            <div className="contact-item">
              <FaEnvelope className="contact-icon text-primary" />
              <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
            </div>
            <div className="contact-item">
              <FaPhone className="contact-icon text-success" />
              <span className="contact-text">{m.phone}</span>
            </div>
            <div className="contact-item">
              <FaLocationArrow className="contact-icon text-danger" />
              <span className="contact-text">{location}</span>
            </div>
          </div>
        </div>
      );
    }) : (
      <div className="text-center py-3 text-muted">
        <FaIdCard size={24} className="mb-2" />
        <p className="mb-0">No members available</p>
      </div>
    )}
  </Card.Body>
</Card>

); }

export default function ERTOverview({ ertStatus }) { const [filterZone, setFilterZone] = useState(null); const [showAllMembers, setShowAllMembers] = useState(false);

const allMembers = useMemo(() => { const list = []; Object.entries(ertStatus).forEach(([role, members]) => { members.forEach(m => list.push({ role, ...m })); }); return list; }, [ertStatus]);

const floorCounts = useMemo(() => { const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 }; allMembers.forEach(m => { if (!m.present) return; const z = m.zone?.toLowerCase() || ''; if (z.includes('2nd')) counts['2nd Floor']++; else if (z.includes('tower b')) counts['Tower B']++; else counts['Podium Floor']++; }); return counts; }, [allMembers]);

const ertLeaders = useMemo(() => { const raw = (ertStatus['ERT Team Leader'] || []).map(m => ({ role: 'ERT Team Leader', ...m })); const filtered = filterZone ? raw.filter(m => m.present && ( (m.zone && m.zone.includes(filterZone)) || (baseLocationByRole['ERT Team Leader'] && baseLocationByRole['ERT Team Leader'].includes(filterZone)) ) ) : raw;

const order = ['Vishal Chaudhari', 'Vinit Kumar', 'Sonu Pandey', 'Sagar Jamdade', 'Rangare, Bhupendra Babu', 'Satish Bhoyane'];
return filtered.sort((a, b) => {
  const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
  if (pa !== pb) return pb - pa;
  const ia = order.indexOf(a.name), ib = order.indexOf(b.name);
  if (ia !== -1 || ib !== -1) {
    if (ia === -1) return 1;
    if (ib === -1) return -1;
    return ia - ib;
  }
  return a.name.localeCompare(b.name);
});

}, [ertStatus, filterZone]);

const ertMembers = useMemo(() => { const members = (ertStatus['ERT Team Members'] || []).map(m => ({ role: 'ERT Team Members', name: m.Name || m.name, baseLocation: m['Base Location'] || m.Floor || m.zone, liveLocation: m.zone, email: m.Email || m.email, phone: m.Phone || m.phone, present: m.present }));

const filtered = filterZone
  ? members.filter(m =>
    m.present && (
      (m.liveLocation && m.liveLocation.includes(filterZone)) ||
      (m.baseLocation && m.baseLocation.includes(filterZone))
    )
  )
  : members;

filtered.sort((a, b) => {
  const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
  if (pa !== pb) return pb - pa;
  return a.name.localeCompare(b.name);
});
return showAllMembers ? filtered : filtered.slice(0, 7);

}, [ertStatus, filterZone, showAllMembers]);

const floorIcons = { 'Podium Floor': <FaHome className="text-danger" />, '2nd Floor': <FaBuilding className="text-info" />, 'Tower B': <FaLayerGroup className="text-success" /> };

// Determine which first-column roles should be shown when a filter is active const rolesToShow = useMemo(() => { if (!filterZone) return firstColumnRoles; return firstColumnRoles.filter(role => filterMembersByZone(ertStatus[role] || [], role, filterZone).length > 0); }, [filterZone, ertStatus]);

return ( <div className="ert-dashboard">

<Container fluid className="py-4">
    {/* Stats Cards */}
    <Row className="mb-4">
      <Col xs={12} md={3} className="mb-3">
        <Card className="stats-card total-members">
          <Card.Body className="p-3">
            <div className="d-flex align-items-center">
              <div className="stats-icon me-3">
                <FaUsers size={24} />
              </div>
              <div>
                <h6 className="stats-label">Total Members</h6>
                <h3 className="stats-value mb-0">
                  {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
                </h3>
              </div>
            </div>
          </Card.Body>
        </Card>
      </Col>

      {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
        const count = floorCounts[floor] || 0;
        const isSelected = filterZone === floor;
        return (
          <Col key={floor} xs={12} md={3} className="mb-3">
            <Card 
              className={`stats-card location-card ${isSelected ? 'active' : ''}`}
              onClick={() => setFilterZone(prev => prev === floor ? null : floor)}
            >
              <Card.Body className="p-3">
                <div className="d-flex align-items-center">
                  <div className="stats-icon me-3">
                    {floorIcons[floor]}
                  </div>
                  <div>
                    <h6 className="stats-label">{floor}</h6>
                    <h3 className="stats-value mb-0">{count}</h3>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>
        );
      })}
    </Row>

    {/* Three-column layout */}
    <Row className="align-items-stretch">
      {/* LEFT COLUMN: Fixed roles (only show roles with members when a filter is active) */}
      <Col xs={12} lg={4} className="mb-4">
        {rolesToShow.map(role => renderRoleCard(role, ertStatus[role] || [], filterZone))}
      </Col>

      {/* MIDDLE COLUMN: ERT Team Leaders - show only if no filter OR there are leaders after filtering */}
      {(!filterZone || (ertLeaders && ertLeaders.length > 0)) && (
        <Col xs={12} lg={4} className="mb-4">
          <Card className="dashboard-card h-100">
            <Card.Header className="dashboard-card-header d-flex align-items-center">
              <span className="role-icon me-2">{roleIcons['ERT Team Leader']}</span>
              <span className="role-title">ERT Team Leader</span>
              <Badge bg="outline-light" className="ms-2">{ertLeaders.length}</Badge>
            </Card.Header>
            <Card.Body className="p-3">
              {ertLeaders.map((m, i) => {
                const location = m.present ? m.zone || 'Unknown Zone' : baseLocationByRole['ERT Team Leader'];
                return (
                  <div key={i} className="member-item pb-3 mb-3">
                    <div className="d-flex justify-content-between align-items-start mb-2">
                      <div className="d-flex align-items-center">
                        <div className="member-photo-container">
                          <img
                            src={getPhotoSrc(m)}
                            alt={m.name || 'Member'}
                            className="member-photo"
                            onError={(e) => {
                              e.currentTarget.onerror = null;
                              e.currentTarget.src = DEFAULT_PHOTO;
                            }}
                          />
                          <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                        </div>
                        <div className="ms-3">
                          <h6 className="mb-0 member-name">{m.name}</h6>
                          <small className="text-muted">Team Leader</small>
                        </div>
                      </div>
                      <Badge bg={m.present ? 'success' : 'secondary'} className="status-badge">
                        {m.present ? 'Available' : 'Away'}
                      </Badge>
                    </div>

                    <div className="member-contact-info">
                      <div className="contact-item">
                        <FaEnvelope className="contact-icon text-primary" />
                        <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                      </div>
                      <div className="contact-item">
                        <FaPhone className="contact-icon text-success" />
                        <span className="contact-text">{m.phone}</span>
                      </div>
                      <div className="contact-item">
                        <FaLocationArrow className="contact-icon text-danger" />
                        <span className="contact-text">{location}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
              {!ertLeaders.length && 
                <div className="text-center py-4 text-muted">
                  <FaUserShield size={28} className="mb-2" />
                  <p className="mb-0">No Team Leaders Available</p>
                </div>
              }
            </Card.Body>
          </Card>
        </Col>
      )}

      {/* RIGHT COLUMN: ERT Team Members - show only if no filter OR there are members after filtering */}
      {(!filterZone || (ertMembers && ertMembers.length > 0)) && (
        <Col xs={12} lg={4} className="mb-4">
          <Card className="dashboard-card h-100">
            <Card.Header className="dashboard-card-header d-flex align-items-center">
              <span className="role-icon me-2">{roleIcons['ERT Team Members']}</span>
              <span className="role-title">ERT Team Members</span>
              <Badge bg="outline-light" className="ms-2">{ertMembers.length}</Badge>
            </Card.Header>
            
            <Card.Body className="p-3">
              {ertMembers.map((m, i) => {
                const location = m.present ? m.liveLocation || 'Unknown Zone' : m.baseLocation;
                return (
                  <div key={i} className="member-item pb-3 mb-3">
                    <div className="d-flex justify-content-between align-items-start mb-2">
                      <div className="d-flex align-items-center">
                        <div className="member-photo-container">
                          <img
                            src={getPhotoSrc(m)}
                            alt={m.name || 'Member'}
                            className="member-photo"
                            onError={(e) => {
                              e.currentTarget.onerror = null;
                              e.currentTarget.src = DEFAULT_PHOTO;
                            }}
                          />
                          <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                        </div>
                        <div className="ms-3">
                          <h6 className="mb-0 member-name">{m.name}</h6>
                          <small className="text-muted">Team Member</small>
                        </div>
                      </div>
                      <Badge bg={m.present ? 'success' : 'secondary'} className="status-badge">
                        {m.present ? 'Available' : 'Away'}
                      </Badge>
                    </div>

                    <div className="member-contact-info">
                      <div className="contact-item">
                        <FaEnvelope className="contact-icon text-primary" />
                        <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                      </div>
                      <div className="contact-item">
                        <FaPhone className="contact-icon text-success" />
                        <span className="contact-text">{m.phone}</span>
                      </div>
                      <div className="contact-item">
                        <FaLocationArrow className="contact-icon text-danger" />
                        <span className="contact-text">{location}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
              
              {!ertMembers.length && 
                <div className="text-center py-4 text-muted">
                  <FaUsers size={28} className="mb-2" />
                  <p className="mb-0">No Team Members Available</p>
                </div>
              }
              
              <div className="text-center mt-3">
                <Button
                  variant="outline-primary"
                  className="d-flex align-items-center mx-auto"
                  onClick={() => setShowAllMembers(prev => !prev)}
                >
                  {showAllMembers ? (
                    <>
                      <FaEyeSlash className="me-2" />
                      Show Less
                    </>
                  ) : (
                    <>
                      <FaEye className="me-2" />
                      Show More
                    </>
                  )}
                </Button>
              </div>
            </Card.Body>
          </Card>
        </Col>
      )}
    </Row>
  </Container>

  {/* styles omitted for brevity in this preview - keep your existing styles here */}
</div>

); }

