// src/components/ERTOverview.jsx
import React, { useState, useEffect, useMemo } from "react";
import { Card, Badge, Row, Col } from "react-bootstrap";
import {
  FaEnvelopeOpenText,
  FaMapMarkerAlt,
  FaUsers,
  FaMobileAlt,
  FaLayerGroup,
} from "react-icons/fa";
import membersData from "../data/lacaErtMembers.json";
import Header from "../components/Header";
import { lookupFloor } from "../utils/floorLookup";

export default function LacaERTOverview() {
  const [members, setMembers] = useState([]);

  useEffect(() => {
    async function fetchData() {
      try {
        const res = await fetch("http://localhost:3001/api/occupancy/live-summary");
        const liveData = await res.json();

        const liveDetails = Array.isArray(liveData.details) ? liveData.details : [];

        const merged = membersData["Team Members"].map((m) => {
          const live =
            liveDetails.find((d) => d.EmployeeID === m.emp_id) || {};

          const inLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "InDirection")
              : "";
          const outLocation =
            live.PartitionName2 && live.Door
              ? lookupFloor(live.PartitionName2, live.Door, "OutDirection")
              : "";

          return {
            ...m,
            present: !!live.EmployeeID,
            inLocation,
            outLocation,
            door: live.Door || "",
            phone: m.phone || "", // ✅ add phone if available later
          };
        });

        const sorted = merged.sort((a, b) =>
          a.present === b.present ? 0 : a.present ? -1 : 1
        );

        setMembers(sorted);
      } catch (err) {
        console.error("Error fetching live data:", err);
      }
    }

    fetchData();
    const interval = setInterval(fetchData, 15000);
    return () => clearInterval(interval);
  }, []);

  // ✅ counts for header cards
  const totalCount = useMemo(() => members.length, [members]);
  const availableCount = useMemo(
    () => members.filter((m) => m.present).length,
    [members]
  );

  return (
    <>
      <Header />

      {/* === TOP SUMMARY CARDS === */}
      <Row className="g-3 mb-4">
        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 border-0"
            style={{ backgroundColor: "#061f38" }}
          >
            <Card.Body className="py-3">
              <FaLayerGroup size={28} style={{ color: "#7F8C8D" }} className="mb-2" />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff" }}>
                Total Members
              </h5>
              <h2 className="m-0" style={{ color: "#fff", fontWeight: "600" }}>
                {totalCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>

        <Col xs={12} md={6}>
          <Card
            className="text-center shadow-sm h-100 border-0"
            style={{ backgroundColor: "#061f38" }}
          >
            <Card.Body className="py-3">
              <FaUsers size={28} style={{ color: "#1ABC9C" }} className="mb-2" />
              <h5 className="mb-1" style={{ fontWeight: "500", color: "#fff" }}>
                Available Members
              </h5>
              <h2 className="m-0" style={{ color: "#1ABC9C", fontWeight: "600" }}>
                {availableCount}
              </h2>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* === MAIN CARD === */}
      <Card
        style={{
          backgroundColor: "#1C1C1C",
          color: "#F0F0F0",
          border: "1px solid #333",
          borderRadius: "12px",
        }}
      >
        <Card.Header
          style={{
            borderBottom: "1px solid #333",
            fontWeight: "600",
            display: "flex",
            alignItems: "center",
            gap: "10px",
            backgroundColor: "#111",
            color: "#fff",
            fontSize: "1.2rem",
          }}
        >
          <FaUsers style={{ color: "#1ABC9C" }} />
          Costa Rica ERT Team Members
        </Card.Header>

        <Card.Body style={{ padding: "1.5rem" }}>
          <Row xs={1} md={3} className="g-4">
            {members.map((m, i) => {
              const isAway =
                !m.present ||
                (m.outLocation &&
                  m.outLocation.trim().toLowerCase() === "out of office");

              return (
                <Col key={i}>
                  <div
                    style={{
                      backgroundColor: "#2C2C2C",
                      borderRadius: "10px",
                      padding: "1rem",
                      border: "1px solid #444",
                      height: "100%",
                    }}
                  >
                    {/* Name */}
                    <h5 style={{ fontWeight: "600", marginBottom: "0.3rem" }}>
                      {m.name}
                    </h5>
                    {/* Employee ID on new line */}
                    <div style={{ fontSize: "0.85rem", color: "#bbb", marginBottom: "0.5rem" }}>
                      ID: {m.emp_id}
                    </div>

                    {/* Status */}
                    <div className="d-flex justify-content-between align-items-center mb-2">
                      <span></span>
                      <Badge bg={!isAway ? "success" : "danger"} pill>
                        {!isAway ? "Available" : "Away"}
                      </Badge>
                    </div>

                    {/* Email */}
                    <div className="d-flex align-items-center mb-2" style={{ fontSize: "0.85rem" }}>
                      <FaEnvelopeOpenText
                        className="me-2"
                        style={{ color: "#3498DB", minWidth: "16px" }}
                      />
                      <a
                        href={`mailto:${m.email}`}
                        style={{ color: "#5DADE2", textDecoration: "none" }}
                      >
                        {m.email}
                      </a>
                    </div>

                    {/* Mobile Number */}
                    {m.phone && (
                      <div className="d-flex align-items-center mb-2" style={{ fontSize: "0.85rem" }}>
                        <FaMobileAlt
                          className="me-2"
                          style={{ color: "#27AE60", minWidth: "16px" }}
                        />
                        <span style={{ color: "#27AE60" }}>{m.phone}</span>
                      </div>
                    )}

                    {/* Location Info */}
                    {m.present && (m.inLocation || m.outLocation) && (
                      <div className="mb-2" style={{ fontSize: "0.85rem" }}>
                        <div className="d-flex align-items-center">
                          <FaMapMarkerAlt
                            className="me-2"
                            style={{ color: "#E74C3C", minWidth: "16px" }}
                          />
                          <span style={{ color: "#E74C3C" }}>
                            {m.inLocation || "Unknown"}
                          </span>
                        </div>
                        {m.outLocation && m.outLocation !== m.inLocation && (
                          <div
                            style={{
                              marginLeft: "1.5rem",
                              fontSize: "0.8rem",
                              color: "#aaa",
                            }}
                          >
                            Exit To: {m.outLocation}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </Col>
              );
            })}
          </Row>
        </Card.Body>
      </Card>
    </>
  );
}