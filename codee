// NEW: personnel header filter state (EMEA)
const [selectedPersonnel, setSelectedPersonnel] = useState(null); // 'Employee' | 'Contractor' | null
const [selectedSummaryPartition, setSelectedSummaryPartition] = useState(null); // e.g. 'Austria||Vienna'




......

{/* Summary header (clickable Employees / Contractors) */}
<TableRow sx={{ bgcolor: '#FFC107' }}>
  {['Country','City','Employees','Contractors','Total'].map(h => {
    if (h === 'Employees' || h === 'Contractors') {
      const personnelType = h === 'Employees' ? 'Employee' : 'Contractor';
      const isActive = selectedPersonnel === personnelType && !selectedSummaryPartition;
      return (
        <TableCell
          key={h}
          align="right"
          onClick={() => {
            if (isActive) {
              setSelectedPersonnel(null);
            } else {
              setSelectedPersonnel(personnelType);
              setSelectedSummaryPartition(null);
              setSelectedCompany(null);
              setShowDetails(true);
            }
          }}
          sx={{
            color: isActive ? '#fff' : '#000',
            fontWeight: 'bold',
            fontSize: 14,
            border: '2px solid #000',
            cursor: 'pointer',
            textAlign: 'right',
            bgcolor: isActive ? '#474747' : '#FFC107',
            '&:hover': { backgroundColor: isActive ? '#5a5a5a' : '#f2f2f2' }
          }}
        >
          {h}
        </TableCell>
      );
    }
    return (
      <TableCell
        key={h}
        align={['Country','City'].includes(h) ? 'left' : 'right'}
        sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}
      >
        {h}
      </TableCell>
    );
  })}
</TableRow>

{/* Summary rows (make Employee/Contractor cells clickable to filter that partition + personnel) */}
{partitionRows.map((r, i) => {
  const partitionKey = `${r.country}||${r.city}`;
  return (
    <TableRow key={i}>
      <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
      <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>

      {/* Employee count cell (click -> filter partition to Employees) */}
      <TableCell
        align="right"
        sx={{
          border: '2px solid #000',
          cursor: 'pointer',
          '&:hover': { backgroundColor: '#f2f2f2' },
          bgcolor: selectedPersonnel === 'Employee' && selectedSummaryPartition === partitionKey ? '#474747' : undefined,
          color: selectedPersonnel === 'Employee' && selectedSummaryPartition === partitionKey ? '#fff' : '#000'
        }}
        onClick={() => {
          if (selectedPersonnel === 'Employee' && selectedSummaryPartition === partitionKey) {
            setSelectedPersonnel(null);
            setSelectedSummaryPartition(null);
          } else {
            setSelectedPersonnel('Employee');
            setSelectedSummaryPartition(partitionKey);
            setSelectedCompany(null);
            setShowDetails(true);
          }
        }}
      >
        {r.employee}
      </TableCell>

      {/* Contractor count cell (click -> filter partition to Contractors) */}
      <TableCell
        align="right"
        sx={{
          border: '2px solid #000',
          cursor: 'pointer',
          '&:hover': { backgroundColor: '#f2f2f2' },
          bgcolor: selectedPersonnel === 'Contractor' && selectedSummaryPartition === partitionKey ? '#474747' : undefined,
          color: selectedPersonnel === 'Contractor' && selectedSummaryPartition === partitionKey ? '#fff' : '#000'
        }}
        onClick={() => {
          if (selectedPersonnel === 'Contractor' && selectedSummaryPartition === partitionKey) {
            setSelectedPersonnel(null);
            setSelectedSummaryPartition(null);
          } else {
            setSelectedPersonnel('Contractor');
            setSelectedSummaryPartition(partitionKey);
            setSelectedCompany(null);
            setShowDetails(true);
          }
        }}
      >
        {r.contractor}
      </TableCell>

      <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
        {r.total}
      </TableCell>
    </TableRow>
  );
})}




......


const companyRows = useMemo(() => {
  if (!data || !pickedDate) return [];

  const ds = format(pickedDate, 'yyyy-MM-dd');

  // filter details for this date and our partitions
  const filtered = data.details.filter(r =>
    r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds &&
    filteredPartitionKeys.includes(r.PartitionName2)
  );

  // Apply personnel header filter and optional summary-partition filter before aggregating
  const afterPersonnel = filtered.filter(r => {
    // selectedSummaryPartition (partition-specific) filter
    if (selectedSummaryPartition) {
      const [selCountry, selCity] = selectedSummaryPartition.split('||');
      const rowCity = partitionToDisplay[r.PartitionName2]?.city || r.PartitionName2 || '';
      const rowCountry = partitionToDisplay[r.PartitionName2]?.country || 'Unknown';
      if (rowCity !== selCity || rowCountry !== selCountry) return false;
    }

    // personnel filter
    if (selectedPersonnel) {
      const pt = String(r.PersonnelType || '').toLowerCase();
      if (selectedPersonnel === 'Employee') {
        if (!(pt.includes('employee') || pt.includes('staff') || pt === 'employee')) return false;
      } else if (selectedPersonnel === 'Contractor') {
        if (!(pt.includes('contractor') || pt.includes('vendor') || pt.includes('subcontract') || pt.includes('cont'))) return false;
      }
    }
    return true;
  });

  const map = new Map();
  afterPersonnel.forEach(r => {
    const city = partitionToDisplay[r.PartitionName2]?.city || (r.PartitionName2 || 'Unknown');
    const country = partitionToDisplay[r.PartitionName2]?.country || 'Unknown';
    const company = getCanonicalCompany(r);
    const key = `${country}||${city}||${company}`;
    const existing = map.get(key);
    if (existing) existing.total += 1;
    else map.set(key, { country, city, company, total: 1 });
  });

  return Array.from(map.values()).sort((a, b) => {
    if (a.country !== b.country) return a.country.localeCompare(b.country);
    if (a.city !== b.city) return a.city.localeCompare(b.city);
    return a.company.localeCompare(b.company);
  });
}, [data, pickedDate, filteredPartitionKeys, selectedPersonnel, selectedSummaryPartition]);