<Grid container spacing={2} sx={{ backgroundColor: "#f9fafb" }}>
  <Grid item xs={12}>
    <Card
      elevation={2}
      sx={{
        backgroundColor: "#ffffff",
        borderRadius: 2,
        border: "1px solid #e0e0e0",
      }}
    >
      <CardContent>
        <Grid
          container
          spacing={2}
          alignItems="center"
          sx={{ backgroundColor: "#ffffff" }}
        >
          {/* Region */}
          <Grid item xs={12} md={2}>
            <FormControl fullWidth size="small">
              <InputLabel id="region-select-label">Region</InputLabel>
              <Select
                labelId="region-select-label"
                value={region}
                onChange={(e) => setRegion(e.target.value)}
              >
                {REGIONS.map((r) => (
                  <MenuItem key={r.value} value={r.value}>
                    {r.label}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {/* City */}
          <Grid item xs={12} md={3}>
            <FormControl fullWidth size="small">
              <InputLabel id="city-select-label">City / Partition</InputLabel>
              <Select
                labelId="city-select-label"
                value={city}
                onChange={(e) => setCity(e.target.value)}
                renderValue={(v) => v || "All"}
              >
                <MenuItem value="">
                  <em>All</em>
                </MenuItem>
                {citiesForRegion?.length > 0 ? (
                  citiesForRegion.map((c, idx) => (
                    <MenuItem key={idx} value={c}>
                      {c}
                    </MenuItem>
                  ))
                ) : (
                  <MenuItem disabled value="">
                    No predefined cities
                  </MenuItem>
                )}
              </Select>
            </FormControl>
            <TextField
              fullWidth
              size="small"
              placeholder="Or type to override / fuzzy-match"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              sx={{ mt: 1 }}
            />
          </Grid>

          {/* Range / Single Day Toggle */}
          <Grid
            item
            xs={12}
            md={5}
            sx={{ display: "flex", gap: 1, justifyContent: "flex-end" }}
          >
            <Button
              startIcon={<DateRangeIcon />}
              variant={useRange ? "contained" : "outlined"}
              onClick={() => setUseRange(true)}
              color="primary"
            >
              Range
            </Button>
            <Button
              startIcon={<DateRangeIcon />}
              variant={!useRange ? "contained" : "outlined"}
              onClick={() => setUseRange(false)}
              color="primary"
            >
              Single Day
            </Button>
          </Grid>

          {/* Dates */}
          {useRange ? (
            <>
              <Grid item xs={12} md={3}>
                <TextField
                  label="Start Date"
                  type="date"
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  size="small"
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <TextField
                  label="End Date"
                  type="date"
                  fullWidth
                  InputLabelProps={{ shrink: true }}
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  size="small"
                />
              </Grid>
            </>
          ) : (
            <Grid item xs={12} md={3}>
              <TextField
                label="Date"
                type="date"
                fullWidth
                InputLabelProps={{ shrink: true }}
                value={singleDate}
                onChange={(e) => setSingleDate(e.target.value)}
                size="small"
              />
            </Grid>
          )}

          {/* Buttons */}
          <Grid
            item
            xs={12}
            md={6}
            sx={{ display: "flex", gap: 1, alignItems: "center" }}
          >
            <Button
              variant="contained"
              startIcon={<SearchIcon />}
              onClick={fetchDurations}
              disabled={loading}
            >
              {loading ? "Loading..." : "Run"}
            </Button>
            <Button
              variant="outlined"
              startIcon={<ClearIcon />}
              onClick={() => {
                setStartDate("");
                setEndDate("");
                setSingleDate("");
                setCity("");
                setData(null);
                setError("");
                setSearchEmployeeId("");
                setSearchEmployeeName("");
                setSearchCardNumber("");
              }}
            >
              Clear
            </Button>
            <Tooltip title="Export Summary CSV">
              <span>
                <IconButton
                  onClick={exportSummaryCsv}
                  disabled={!regionObj || (regionObj.employees || []).length === 0}
                >
                  <DownloadIcon />
                </IconButton>
              </span>
            </Tooltip>
          </Grid>

          {/* Search Filters */}
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Search Employee ID"
              value={searchEmployeeId}
              onChange={(e) => setSearchEmployeeId(e.target.value)}
              size="small"
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Search Employee Name"
              value={searchEmployeeName}
              onChange={(e) => setSearchEmployeeName(e.target.value)}
              size="small"
            />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField
              fullWidth
              label="Search Card Number"
              value={searchCardNumber}
              onChange={(e) => setSearchCardNumber(e.target.value)}
              size="small"
            />
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  </Grid>

  {/* Results Table */}
  <Grid item xs={12}>
    <Paper
      elevation={2}
      sx={{
        padding: 2,
        borderRadius: 2,
        backgroundColor: "#ffffff",
        boxShadow: "0px 2px 6px rgba(0,0,0,0.08)",
      }}
    >
      <Typography variant="subtitle1" sx={{ fontWeight: 600, mb: 1 }}>
        {data
          ? `Showing ${region.toUpperCase()} — ${data.start_date} → ${data.end_date}`
          : "No results yet"}
      </Typography>

      {loading && (
        <Box sx={{ display: "flex", justifyContent: "center", py: 4 }}>
          <CircularProgress />
        </Box>
      )}

      {error && (
        <Typography color="error" sx={{ mt: 2 }}>
          {error}
        </Typography>
      )}

      {!loading && !error && <Box sx={{ mt: 2 }}>{renderTable()}</Box>}
    </Paper>
  </Grid>
</Grid>