import React, { useState } from 'react';
import { Card, Table, Modal } from 'react-bootstrap';

// Accent palette
const ROW_COLORS = [
  '#FFC72C', '#C9A9A6', '#FFE680',
  '#FFF5EE', '#FFD11A', '#96DED1', '#FFEB99'
];

// Security Employee IDs (hardcoded, no JSON needed)
const SECURITY_IDS = [
  "W0023386", "W0025490", "W0025492", "W0025493",
  "W0025639", "W0026455", "W0028120", "305776"
].map(id => id.toUpperCase());

const normalizeId = v => String(v || '').trim().toUpperCase();

export default function FloorInOutTable({ data = [], floorBreakdown = [], floorInOutSummary = [] }) {
  const securitySet = new Set(SECURITY_IDS);

  // State for modal
  const [showModal, setShowModal] = useState(false);
  const [selectedFloor, setSelectedFloor] = useState(null);
  const [selectedPeople, setSelectedPeople] = useState([]);

  // Map floor → security occupants
  const securityByFloor = {};

  (floorBreakdown || []).forEach(fb => {
    const people = [];
    (fb.occupants || []).forEach(o => {
      const empId = normalizeId(o.EmployeeID);
      if (securitySet.has(empId)) {
        people.push(o);
      }
    });
    if (people.length > 0) {
      securityByFloor[fb.floor] = (securityByFloor[fb.floor] || []).concat(people);
    }
  });

  (floorInOutSummary || []).forEach(f => {
    (f.inOnlyPersons || []).forEach(pid => {
      const empId = normalizeId(pid);
      if (securitySet.has(empId)) {
        // Just store as placeholder if not found in occupants
        securityByFloor[f.floor] = (securityByFloor[f.floor] || []).concat([
          { EmployeeID: empId, ObjectName1: "(Unknown)", Swipe_Time: "—" }
        ]);
      }
    });
  });

  // Compute inconsistency and attach security count
  const sorted = data
    .map(({ floor, inSwipes, outSwipes }) => ({
      floor,
      inSwipes,
      outSwipes,
      inconsistency: inSwipes - outSwipes,
      securityCount: (securityByFloor[floor] || []).length
    }))
    .sort((a, b) => b.inconsistency - a.inconsistency);

  const top = sorted[0];

  const handleRowClick = (floor) => {
    const people = securityByFloor[floor] || [];
    if (people.length > 0) {
      setSelectedFloor(floor);
      setSelectedPeople(people);
      setShowModal(true);
    }
  };

  return (
    <>
      <Card className="mb-4 shadow-sm" style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}>
        <Card.Header className="text-center fw-bold" style={{ background: '#000', color: '#FFC72C' }}>
          Floor In vs Out Swipe Summary
        </Card.Header>

        <Card.Body style={{ height: 450, padding: '1rem', overflowY: 'auto' }}>
          {top && (
            <div className="mb-3" style={{ color: '#fff', fontSize: '1rem' }}>
              Highest inconsistency:&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.inconsistency}</span>
              &nbsp;on&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.floor}</span>
            </div>
          )}

          <Table striped bordered hover size="sm" variant="dark" className="mb-0">
            <thead>
              <tr>
                <th>Floor</th>
                <th>In Swipes</th>
                <th>Out Swipes</th>
                <th>In − Out</th>
                <th>Security</th>
                <th>Rejection</th>
              </tr>
            </thead>
            <tbody>
              {sorted.map((row, idx) => (
                <tr
                  key={row.floor}
                  style={{ backgroundColor: row.securityCount > 0 ? '#333300' : undefined, cursor: row.securityCount > 0 ? 'pointer' : 'default' }}
                  onClick={() => handleRowClick(row.floor)}
                >
                  <td style={{ color: '#fff' }}>{row.floor}</td>
                  <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>{row.inSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>{row.outSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 2) % ROW_COLORS.length], fontWeight: 'bold' }}>
                    {row.inconsistency}
                  </td>
                  <td style={{ color: row.securityCount > 0 ? '#FFC72C' : '#aaa', fontWeight: row.securityCount > 0 ? 'bold' : 'normal' }}>
                    {row.securityCount}
                  </td>
                  <td></td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Card.Body>
      </Card>

      {/* Modal for details */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>Security Occupants - {selectedFloor}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Table striped bordered hover size="sm">
            <thead>
              <tr>
                <th>EmployeeID</th>
                <th>Name</th>
                <th>Swipe Time</th>
                <th>Door</th>
                <th>Type</th>
              </tr>
            </thead>
            <tbody>
              {selectedPeople.map((p, idx) => (
                <tr key={idx}>
                  <td>{p.EmployeeID}</td>
                  <td>{p.ObjectName1 || "(Unknown)"}</td>
                  <td>{p.Swipe_Time || "—"}</td>
                  <td>{p.Door || "—"}</td>
                  <td>{p.PersonnelType || "—"}</td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Modal.Body>
      </Modal>
    </>
  );
}
