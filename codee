// helper: unify the key format used by companyRows and detailRows
const makeCompanyKey = (country, city, company) => `${country}||${city}||${company}`;

...

{companyRows.length > 0 ? companyRows.map((r, i) => {
  const rowKey = makeCompanyKey(r.country, r.city, r.company);
  return (
    <TableRow
      key={`${r.company}-${i}`}
      onClick={() => {
        if (selectedCompany === rowKey) {
          setSelectedCompany(null);   // second click — clear filter
          setShowDetails(true);
        } else {
          setSelectedCompany(rowKey); // first click — filter
          setShowDetails(true);
        }
      }}
      sx={{
        cursor: 'pointer',
        '&:hover': { backgroundColor: '#474747' },
        ...(selectedCompany === rowKey ? { backgroundColor: '#474747' } : {})
      }}
      tabIndex={0}
      role="button"
      onKeyDown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          if (selectedCompany === rowKey) {
            setSelectedCompany(null);
            setShowDetails(true);
          } else {
            setSelectedCompany(rowKey);
            setShowDetails(true);
          }
        }
      }}
    >
      <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
      <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
      <TableCell sx={{ border: '2px solid #000' }}>{r.company}</TableCell>
      <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
        {r.total}
      </TableCell>
    </TableRow>
  );
}) : (
  /* ...no records row... */
)}






.....



const detailRows = useMemo(() => {
  if (!data || !pickedDate || !showDetails) return [];
  const ds = format(pickedDate, 'yyyy-MM-dd');

  return data.details
    .filter(r => {
      // match date
      if (!r.LocaleMessageTime || r.LocaleMessageTime.slice(0, 10) !== ds) return false;

      // partition (city) filter
      if (backendFilterKey) {
        const ok = r.PartitionNameFriendly === backendFilterKey ||
                   apacForwardKey[r.PartitionNameFriendly] === backendFilterKey;
        if (!ok) return false;
      }

      // if no company selected, include everything
      if (!selectedCompany) return true;

      // compute country & city the same way companyRows does
      const city = formatPartition(r.PartitionNameFriendly || '');
      const disp = Object.values(apacPartitionDisplay).find(d => d.city === city);
      const country = disp?.country || 'Unknown';

      // canonical company name for this row
      const canonical = getCanonicalCompany(r);

      // build key and compare
      const rowKey = makeCompanyKey(country, city, canonical);
      return rowKey === selectedCompany;
    })
    .sort((a, b) => a.LocaleMessageTime.localeCompare(b.LocaleMessageTime));
}, [data, pickedDate, showDetails, backendFilterKey, selectedCompany]);




