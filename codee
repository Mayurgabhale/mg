// Add this function (directly above or below your other fetch helpers)
async function fetchEventsForDate(atDate) {
  // atDate is a JS Date representing the requested instant (UTC ISO string from the client)
  const pool = await getPool();
  const req  = pool.request();

  // Requested IST calendar day (string)
  const istDayStr = DateTime.fromJSDate(atDate, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  // IST start-of-day -> convert to UTC for SQL window start
  const istStart = DateTime.fromISO(istDayStr, { zone: 'Asia/Kolkata' }).startOf('day').toUTC().toJSDate();

  // Upper bound: use the requested instant (inclusive)
  // Use the exact JS Date provided (which is UTC instant)
  const endUTC = DateTime.fromJSDate(atDate, { zone: 'utc' }).toUTC().toJSDate();

  req.input('startUtc', sql.DateTime2, istStart);
  req.input('endUtc',   sql.DateTime2, endUTC);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE
          WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
          ELSE CAST(t2.Int1 AS NVARCHAR)
        END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        ) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
      LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
        ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType     = 'CardAdmitted'
        AND t1.PartitionName2 = 'APAC.Default'
        -- IMPORTANT: convert the journal time to the "LocaleMessageTime" instant and compare in UTC
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) >= @startUtc
        AND DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @endUtc
    )
    SELECT
      LocaleMessageTime,
      -- date/ time fields are returned but we'll normalize in JS to be safe
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID,
      PersonGUID,
      ObjectName1,
      PersonnelType,
      CardNumber,
      AdmitCode,
      Direction,
      Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  // Normalize recordset so LocaleMessageTime becomes a JS Date and Dateonly/Swipe_Time are recomputed in IST
  const normalized = recordset.map(r => {
    if (!r || !r.LocaleMessageTime) return null;
    // mssql driver usually returns JS Date for datetime columns
    const rowDt = (r.LocaleMessageTime instanceof Date)
      ? DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' })
      : DateTime.fromISO(String(r.LocaleMessageTime), { zone: 'utc' });

    if (!rowDt || !rowDt.isValid) return null;

    r.LocaleMessageTime = rowDt.toJSDate();
    // recompute Dateonly and Swipe_Time explicitly in IST to ensure consistency
    r.Dateonly = rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
    r.Swipe_Time = rowDt.setZone('Asia/Kolkata').toFormat('HH:mm:ss');
    return r;
  }).filter(Boolean);

  // As a final sanity: keep only rows that are on the requested IST day and <= requested instant
  const requestedIstDay = DateTime.fromJSDate(atDate, { zone: 'utc' }).setZone('Asia/Kolkata').toFormat('yyyy-LL-dd');
  const atInstantUtc = DateTime.fromJSDate(atDate, { zone: 'utc' });
  return normalized.filter(r => {
    const rowDt = DateTime.fromJSDate(r.LocaleMessageTime, { zone: 'utc' });
    return rowDt.setZone('Asia/Kolkata').toFormat('yyyy-LL-dd') === requestedIstDay
      && rowDt <= atInstantUtc;
  });
}

// Replace your getSnapshotAt with this (calls fetchEventsForDate)
exports.getSnapshotAt = async (req, res) => {
  try {
    const atRaw = req.query.at;
    if (!atRaw) return res.status(400).json({ error: 'missing "at" query parameter (ISO timestamp required)' });

    const atDate = new Date(atRaw);
    if (Number.isNaN(atDate.getTime())) {
      return res.status(400).json({ error: 'invalid "at" timestamp' });
    }

    // Fetch only rows that belong to the IST calendar day and are <= requested instant
    const events = await fetchEventsForDate(atDate);

    // Build occupancy from filtered events
    const occupancy = await buildOccupancy(events);
    const visitedStats = buildVisitedForDate(events, atDate);

    occupancy.totalVisitedToday = visitedStats.total;
    occupancy.visitedToday = visitedStats;
    occupancy.asOf = atDate.toISOString();

    return res.json(occupancy);
  } catch (err) {
    console.error('getSnapshotAt error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};