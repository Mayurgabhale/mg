const handleDetailsClick = () => {
  // Always navigate to the details page of the current partition
  const partitionForDetails = currentPartition || 'US.CO.OBS';
  navigate(`/partition/${encodeURIComponent(partitionForDetails)}/details`);
};

...






not work 
...

not work we got this route http://localhost:3000/partition/US.FL.Miami this is wrong 
but we want this route http://localhost:3000/partition/US.FL.Miami/details





  // const handleDetailsClick = () => {
  //   if (isPartitionPage) {
  //     navigate(`/partition/${encodeURIComponent(currentPartition)}/details`);
  //   } else {
  //     navigate('/partition/US.CO.OBS/details');
  //   }
  // };


  const handleDetailsClick = () => {
  // Always navigate to the details page of the current partition
  const partitionForDetails = currentPartition || 'US.CO.OBS';
  navigate(`/partition/${encodeURIComponent(partitionForDetails)}/details`);
};



......
// with pune partition redairect page code here 

// src/components/Header.jsx — APAC Edition
import React, { useEffect, useState } from 'react';
import {
  AppBar, Toolbar, Box, Typography,
  Select, MenuItem, IconButton
} from '@mui/material';
import { useNavigate, useLocation } from 'react-router-dom';

import HomeIcon from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import ListAltIcon from '@mui/icons-material/ListAlt';

// import wuLogo from '../assets/wu-logo.png';
import wuLogo from '../assets/images/wu-logo.png';
import IndiaFlag     from '../assets/flags/india.png';
import MalaysiaFlag  from '../assets/flags/malaysia.png';
import PhilippinesFlag from '../assets/flags/philippines.png';
import TaguigFlag    from '../assets/flags/Taguig.png';
import JapanFlag     from '../assets/flags/japan.png';
import DefaultFlag   from '../assets/flags/default.png';

import { partitionList } from '../services/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';



const displayNameMap = {
  'IN.Pune':         'Pune',
  'MY.Kuala Lumpur': 'Kuala Lumpur',
  'PH.Quezon':       'Quezon City',
  'PH.Taguig':       'Taguig',
  'JP.Tokyo':        'Tokyo',
};


// Flag lookup by partition code
const flagMap = {
  'Pune':         IndiaFlag,
  'MY.Kuala Lumpur': MalaysiaFlag,
  'Quezon City':       PhilippinesFlag,
  'Taguig City':       PhilippinesFlag,
  'JP.Tokyo':        JapanFlag,
};
export default function Header() {

 
  const navigate = useNavigate();
  const location = useLocation();
  const { data } = useLiveOccupancy(1000);
  const [lastUpdate, setLastUpdate] = useState('');

  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  const parts = location.pathname.split('/').filter(Boolean);
  const isPartitionPath = parts[0] === 'partition' && Boolean(parts[1]);
  const currentPartition = isPartitionPath ? decodeURIComponent(parts[1]) : '';
  const suffixSegments = isPartitionPath
    ? parts.slice(2)
    : parts[0] === 'history'
      ? ['history']
      : [];

  const selectedFlag = flagMap[currentPartition];

  const makePartitionPath = (suffix) => {
    const base = `/partition/${encodeURIComponent(currentPartition)}`;
    return suffix ? `${base}/${suffix}` : base;
  };

  const handlePartitionChange = (newPartition) => {
    if (!newPartition) return navigate('/');
    
    // Special handling for Pune partition - only redirect when going to base partition route
    if (newPartition === 'Pune' && suffixSegments.length === 0) {
      window.location.href = 'http://10.199.22.57:3011/';
      return;
    }
    
    const base = `/partition/${encodeURIComponent(newPartition)}`;
    const full = suffixSegments.length
      ? `${base}/${suffixSegments.join('/')}`
      : base;
    navigate(full);
  };


  // //////////////

  return (
    <AppBar position="static" color="primary" sx={{ mb: 2 }}>
      <Toolbar sx={{ justifyContent: 'space-between' }}>
        {/* Left: Logo + Navigation */}
        <Box display="flex" alignItems="center">
          <Box component="img" src={wuLogo} alt="WU" sx={{ height: 36, mr: 2 }} />
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            APAC Occupancy
            {currentPartition && ` • ${displayNameMap[currentPartition] || currentPartition}`}
          </Typography>

          {/* Home */}
     {/* <IconButton color="inherit" onClick={() => navigate(currentPartition ? `/partition/${encodeURIComponent(currentPartition)}` : '/')}>
            <HomeIcon />
          </IconButton> */}
     <IconButton color="inherit" onClick={() => navigate('/')}>
            <HomeIcon />
          </IconButton>

          {/* History */}
          <IconButton color="inherit" onClick={() => navigate(currentPartition ? makePartitionPath('history') : '/history')}>
            <HistoryIcon />
          </IconButton>

          {/* Details */}
          <IconButton
            color="inherit"
            onClick={() =>
              navigate(currentPartition
                ? makePartitionPath('details')
                : '/partition/Pune/details'
              )
            }
          >
            <ListAltIcon />
          </IconButton>
        </Box>

        {/* Right: Dropdown Selector + Flag */}
        <Box display="flex" alignItems="center">
          <Select
            size="small"
            value={currentPartition}
            displayEmpty
            onChange={(e) => handlePartitionChange(e.target.value)}
            sx={{ bgcolor: 'background.paper', mr: 2, minWidth: 150 }}
            renderValue={(selected) =>
              selected ? (
                <Box display="flex" alignItems="center">
                  <Box component="img" src={flagMap[selected]} alt={selected} sx={{ width: 24, height: 16, mr: 1 }} />
                  {displayNameMap[selected] || selected}
                </Box>
              ) : "— Select Site —"
            }
          >
            <MenuItem value="">— Select Site —</MenuItem>
            {partitionList.map((p) => (
              <MenuItem key={p} value={p}>
                {displayNameMap[p] || p}
              </MenuItem>
            ))}
          </Select>
        </Box>
      </Toolbar>
    </AppBar>
  );
}


know the issue in partion details
in this 

it is work  navigate('/partition/US.CO.OBS/details');

but after slect box i slect Miami
we got this route http://localhost:3000/partition/US.FL.Miami this is wrong

for exmplae we select Miami we want to got like this route http://localhost:3000/partition/US.FL.Miami/details 


for this <IconButton onClick={handleDetailsClick} color="inherit">
              <InfoIcon />
            </IconButton>

  const handleDetailsClick = () => {
    if (isPartitionPage) {
      navigate(`/partition/${encodeURIComponent(currentPartition)}/details`);
    } else {
      navigate('/partition/US.CO.OBS/details');
    }
  };

just chanee only this dont change other anhthings ok 


check apac logic this is wokr correctly 


read carefuuly below file each line 



// src/components/Header.jsx

// ── ALL IMPORTS AT THE VERY TOP ───────────────────────────────────────────────
import React, { useEffect, useState } from 'react';

// MUI core + pickers
import {
  AppBar,
  Toolbar,
  Box,
  Typography,
  Select,
  MenuItem,
  IconButton,
  Popover,
  TextField,
  Button
} from '@mui/material';
import { LocalizationProvider } from '@mui/x-date-pickers';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { DatePicker, TimePicker } from '@mui/x-date-pickers';

// Day.js + plugins
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import timezone from 'dayjs/plugin/timezone';

// React Router
import { useNavigate, useLocation, Link } from 'react-router-dom';

// Icons
import HomeIcon from '@mui/icons-material/Home';
import HistoryIcon from '@mui/icons-material/History';
import InfoIcon from '@mui/icons-material/Info';
import AccessTimeIcon from '@mui/icons-material/AccessTime';
import LiveTvIcon from '@mui/icons-material/LiveTv';

// Assets & hooks
import WuLogo from '../assets/wu-logo.png';
import DenverFlag from '../assets/flags/denver.png';
import MiamiFlag from '../assets/flags/miami.png';
import NewYorkFlag from '../assets/flags/new-york.png';
import AustinFlag from '../assets/flags/austin.png';
import DefaultFlag from '../assets/flags/default.png';

import { partitionList } from '../services/occupancy.service';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';

// ── Initialize Day.js UTC/timezone ────────────────────────────────────────────
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.tz.setDefault('UTC');

// ── Display name map ─────────────────────────────────────────────────────────
const displayNameMap = {
  'US.CO.OBS': 'Denver',
  'US.FL.Miami': 'Miami',
  'US.NYC': 'New York',
  'USA/Canada Default': 'Austin Texas'
};

// ── Header Component ──────────────────────────────────────────────────────────
export default function Header({
  title,
  mode,
  onTimeSelect,
  onLiveClick
}) {
  const navigate = useNavigate();
  const location = useLocation();
  const { data } = useLiveOccupancy(1000);

  const [lastUpdate, setLastUpdate] = useState('');
  const [anchorEl, setAnchorEl] = useState(null);
  const [draftDate, setDraftDate] = useState(dayjs().utc());

  // Update the “last update” timestamp on each live fetch
  useEffect(() => {
    if (data) setLastUpdate(new Date().toLocaleTimeString());
  }, [data]);

  // ── Routing logic ──────────────────────────────────────────────────────────
  const segments = location.pathname.split('/').filter(Boolean);
  const isPartitionPage = segments[0] === 'partition' && Boolean(segments[1]);
  const currentPartition = isPartitionPage ? decodeURIComponent(segments[1]) : '';
  const suffixSegments = isPartitionPage ? segments.slice(2) : [];

  const flagMap = {
    'US.CO.OBS': DenverFlag,
    'US.FL.Miami': MiamiFlag,
    'US.NYC': NewYorkFlag,
    'USA/Canada Default': AustinFlag
  };
  const selectedFlag = flagMap[currentPartition] || DefaultFlag;



  // Detect if we’re currently on any “history” page
  const isHistoryPage = location.pathname.includes('/history');

  const handlePartitionChange = newPartition => {
    if (!newPartition) return navigate('/');
    // Always point at the new partition
    let path = `/partition/${encodeURIComponent(newPartition)}`;
    // If we were on “history”, keep the history view
    if (isHistoryPage) path += '/history';
    navigate(path);
  };




  // const handleDetailsClick = () => {
  //   if (isPartitionPage) {
  //     navigate(`/partition/${encodeURIComponent(currentPartition)}/details`);
  //   } else {
  //     navigate('/partition/US.CO.OBS/details');
  //   }
  // };


  const handleDetailsClick = () => {
  // If we have a partition, navigate to its details page
  const partitionForDetails = isPartitionPage
    ? currentPartition
    : 'US.CO.OBS';

  navigate(`/partition/${encodeURIComponent(partitionForDetails)}/details`);
};

  // ── Date/Time popover handlers ─────────────────────────────────────────────
  const openPopover = e => {
    setDraftDate(dayjs().utc());
    setAnchorEl(e.currentTarget);
  };
  const closePopover = () => setAnchorEl(null);
  const handleGo = () => {
    onTimeSelect(draftDate.toISOString());
    closePopover();
  };

  return (
    <>
      <AppBar position="static" color="primary" sx={{ mb: 2 }}>
        <Toolbar sx={{ justifyContent: 'space-between', alignItems: 'center' }}>

          {/* ── Left: logo, title, nav & time/live icons ── */}
          <Box display="flex" alignItems="center" sx={{ flexGrow: 1 }}>
            <Box component="img" src={WuLogo} alt="WU Logo" sx={{ height: 36, mr: 2 }} />

            <Typography variant="h6" sx={{ fontWeight: 600, mr: 3 }}>
              {title}
              {currentPartition ? ` • ${displayNameMap[currentPartition]}` : ''}
            </Typography>

            <IconButton
              component={Link}
              to={isPartitionPage ? `/partition/${encodeURIComponent(currentPartition)}` : '/'}
              color="inherit"
            >
              <HomeIcon />
            </IconButton>


            <IconButton
              component={Link}
              to={
                currentPartition
                  ? `/partition/${encodeURIComponent(currentPartition)}/history`
                  : '/history'
              }
              color="inherit"
            >
              <HistoryIcon />
            </IconButton>

            <IconButton onClick={handleDetailsClick} color="inherit">
              <InfoIcon />
            </IconButton>

            <IconButton
              color={mode === 'time' ? 'secondary' : 'inherit'}
              onClick={openPopover}
              title="Jump to specific time"
            >
              <AccessTimeIcon />
            </IconButton>

            <IconButton
              color={mode === 'live' ? 'secondary' : 'inherit'}
              onClick={onLiveClick}
              title="Return to live"
            >
              <LiveTvIcon />
            </IconButton>
          </Box>

          {/* ── Right: region selector, flag, last-update/historic label ── */}
          <Box display="flex" alignItems="center" gap={1}>
            <Select
              size="small"
              value={currentPartition}
              displayEmpty
              onChange={e => handlePartitionChange(e.target.value)}
              sx={{ bgcolor: 'background.paper', mr: 1, minWidth: 160 }}
            >
              <MenuItem value="">— Select Region —</MenuItem>
              {partitionList.map(p => (
                <MenuItem key={p} value={p}>
                  {displayNameMap[p] || p}
                </MenuItem>
              ))}
            </Select>

            <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 32, mr: 2 }} />

            <Typography variant="body2" sx={{ color: '#FFF' }}>
              {mode === 'live'
                ? `Last update: ${lastUpdate}`
                : 'Viewing historic'}
            </Typography>
          </Box>
        </Toolbar>
      </AppBar>

      <Popover
        open={Boolean(anchorEl)}
        anchorEl={anchorEl}
        onClose={closePopover}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Box p={2} display="flex" flexDirection="column" gap={2}>
          <LocalizationProvider dateAdapter={AdapterDayjs}>
            <DatePicker
              label="Select Date (UTC)"
              value={draftDate}
              onChange={newVal => setDraftDate(newVal)}
              renderInput={props => <TextField {...props} />}
            />
            <TimePicker
              label="Select Time (UTC)"
              value={draftDate}
              onChange={newVal => setDraftDate(newVal)}
              renderInput={props => <TextField {...props} />}
            />
          </LocalizationProvider>
          <Box display="flex" justifyContent="flex-end" gap={1}>
            <Button onClick={closePopover}>Cancel</Button>
            <Button variant="contained" onClick={handleGo}>Go</Button>
          </Box>
        </Box>
      </Popover>
    </>
  );
}

