// src/pages/Dashboard.jsx

import React, { useEffect, useState } from 'react';
import { Container, Box, Typography, Skeleton } from '@mui/material';
import { useNavigate } from 'react-router-dom';

import CostaRicaFlag from '../assets/flags/costa-rica.png';
import ArgentinaFlag from '../assets/flags/argentina.png';
import MexicoFlag from '../assets/flags/mexico.png';
import PeruFlag from '../assets/flags/peru.png';
import BrazilFlag from '../assets/flags/brazil.png';
import PanamaFlag from '../assets/flags/panama.png';

import Header from '../components/Header';
import SummaryCard from '../components/SummaryCard';
import { useLiveOccupancy } from '../hooks/useLiveOccupancy';
import { partitionList } from '../services/occupancy.service';
import seatCapacities from '../data/seatCapacities';
import buildingCapacities from '../data/buildingCapacities';
import CompositeChartCard from '../components/CompositeChartCard';
import LineChartCard from '../components/LineChartCard';
import PieChartCard from '../components/PieChartCard';
import Footer from '../components/Footer';
import LoadingSpinner from '../components/LoadingSpinner';

const displayNameMap = {
  'CR.Costa Rica Partition': 'Costa Rica',
  'AR.Cordoba': 'Argentina',
  'MX.Mexico City': 'Mexico',
  'PE.Lima': 'Peru',
  'BR.Sao Paulo': 'Brazil',
  'PA.Panama City': 'Panama'
};

const palette15 = [
  '#FFC107', '#E57373', '#4CAF50', '#FFEB3B', '#FFD666',
  '#D84315', '#3F51B5', '#9C27B0', '#00BCD4', '#8BC34A',
  '#FF9800', '#673AB7', '#009688', '#CDDC39', '#795548'
];

export default function Dashboard() {
  const navigate = useNavigate();

  // ðŸ”‘ Live hook, but optional
  const { data: liveData, loading, error } = useLiveOccupancy(1000);

  // ðŸ”‘ State to hold current dataset (either live or snapshot)
  const [data, setData] = useState(null);
  const [mode, setMode] = useState('live'); // "live" | "snapshot"

  // ðŸ”‘ Keep updating from live hook unless snapshot is active
  useEffect(() => {
    if (mode === 'live' && liveData) {
      setData(liveData);
    }
  }, [liveData, mode]);

  // ðŸ”‘ Called by Header when Apply snapshot
  const handleSnapshot = snapshotJson => {
    setData(snapshotJson);
    setMode('snapshot');
  };

  // ðŸ”‘ Called by Header when back to live
  const handleLive = () => {
    setMode('live');
    setData(liveData);
  };

  if (error) {
    return (
      <Box width="100%" py={4}>
        <Typography color="error" align="center">
          Error loading occupancy data
        </Typography>
      </Box>
    );
  }

  if (!data && loading) {
    return (
      <Box
        sx={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100vw',
          height: '100vh',
          bgcolor: 'rgba(0, 0, 0, 0.85)',
          zIndex: 9999,
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
        }}>
        <LoadingSpinner />
      </Box>
    );
  }

  const regions = data?.realtime || {};
  const flagMap = {
    'CR.Costa Rica Partition': CostaRicaFlag,
    'AR.Cordoba': ArgentinaFlag,
    'MX.Mexico City': MexicoFlag,
    'PE.Lima': PeruFlag,
    'BR.Sao Paulo': BrazilFlag,
    'PA.Panama City': PanamaFlag,
  };

  const partitions = partitionList.map(name => {
    const key = Object.keys(regions).find(k => k.includes(name));
    const p = key ? regions[key] : {};
    return {
      name,
      total: p.total || 0,
      Employee: p.Employee || 0,
      Contractor: p.Contractor || 0,
      floors: p.floors || {},
      flag: flagMap[name],
    };
  }).sort((a, b) => b.total - a.total);

  const todayTot = data?.today?.total ?? 0;
  const todayEmp = data?.today?.Employee ?? 0;
  const todayCont = data?.today?.Contractor ?? 0;
  const realtimeTot = partitions.reduce((sum, p) => sum + p.total, 0);
  const realtimeEmp = partitions.reduce((sum, p) => sum + p.Employee, 0);
  const realtimeCont = partitions.reduce((sum, p) => sum + p.Contractor, 0);

  const crPartition = partitions.find(p => p.name === 'CR.Costa Rica Partition');
  const arPartition = partitions.find(p => p.name === 'AR.Cordoba');
  const smallOnes = partitions.filter(p =>
    ['MX.Mexico City', 'BR.Sao Paulo', 'PE.Lima', 'PA.Panama City'].includes(p.name)
  );

  return (
    <>
      {/* ðŸ”‘ Pass handlers to Header */}
      <Header onSnapshot={handleSnapshot} onLive={handleLive} />
      <Container
        maxWidth={false}
        disableGutters
        sx={{
          py: 0,
          px: 2,
          background: 'linear-gradient(135deg, #0f0f0f 0%, #1c1c1c 100%)',
          color: '#f5f5f5',
        }}>
        
        {/* Top summary cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={1}>
          {/* ... your existing summary cards code ... */}
        </Box>

        {/* Partition cards */}
        <Box display="flex" flexWrap="wrap" gap={1} mb={3}>
          {partitions.map((p, index) => (
            <Box key={p.name} sx={{ flex: '1 1 calc(16.66% - 8px)' }}>
              <SummaryCard
                title={
                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', color: '#FFC107', fontSize: '1.3rem' }}>
                    {p.name.replace(/^.*\./, '')}
                  </Typography>
                }
                total={p.total}
                stats={[
                  { label: 'Employees', value: p.Employee, color: '#40E0D0' },
                  { label: 'Contractors', value: p.Contractor, color: 'green' }
                ]}
                sx={{
                  width: '100%',
                  border: `2px solid ${palette15[index % palette15.length]}`
                }}
                icon={<Box component="img" src={p.flag} sx={{ width: 48, height: 32 }} />}
              />
            </Box>
          ))}
        </Box>

        {/* Charts ... (same as before, using crPartition, arPartition, smallOnes) */}
      </Container>
      <Footer />
    </>
  );
}