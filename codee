// GET /api/monthly-attendance-pune?year=YYYY&month=MM
// Returns JSON (not CSV)
exports.getPuneMonthlyAttendance = async (req, res) => {
  try {
    const nowKolkata = DateTime.now().setZone('Asia/Kolkata');
    const year = req.query.year ? Number(req.query.year) : Number(nowKolkata.toFormat('yyyy'));
    const month = req.query.month ? Number(req.query.month) : Number(nowKolkata.toFormat('LL'));

    if (!Number.isInteger(year) || year < 1900 || !Number.isInteger(month) || month < 1 || month > 12) {
      return res.status(400).json({ error: 'invalid year/month. expected ?year=YYYY&month=MM' });
    }

    const startLocal = DateTime.fromObject(
      { year, month, day: 1, hour: 0, minute: 0, second: 0, millisecond: 0 },
      { zone: 'Asia/Kolkata' }
    );
    const nextMonthLocal = startLocal.plus({ months: 1 });

    const fromUtc = startLocal.setZone('utc').toJSDate(); // inclusive
    const toUtc   = nextMonthLocal.setZone('utc').toJSDate(); // exclusive

    const pool = await getPool();
    const reqDb = pool.request();
    reqDb.input('from', sql.DateTime2, fromUtc);
    reqDb.input('to', sql.DateTime2, toUtc);

    const { recordset } = await reqDb.query(`
      WITH CombinedQuery AS (
        SELECT
          t1.MessageUTC,
          t1.ObjectName1,
          CASE
            WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
            ELSE CAST(t2.Int1 AS NVARCHAR)
          END AS EmployeeID,
          t1.ObjectIdentity1 AS PersonGUID,
          t3.Name AS PersonnelType,
          COALESCE(
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
            TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
            sc.value
          ) AS CardNumber,
          t5a.value AS AdmitCode,
          t5d.value AS Direction,
          t1.ObjectName2 AS Door
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] t1
        LEFT JOIN [ACVSCore].[Access].[Personnel]     t2 ON t1.ObjectIdentity1 = t2.GUID
        LEFT JOIN [ACVSCore].[Access].[PersonnelType] t3 ON t2.PersonnelTypeId = t3.ObjectID
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5a
          ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] t5d
          ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] t_xml
          ON t1.XmlGUID = t_xml.GUID
        LEFT JOIN (
          SELECT GUID, value
          FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred]
          WHERE Name IN ('Card','CHUID')
        ) sc ON t1.XmlGUID = sc.GUID
        WHERE
          t1.MessageType     = 'CardAdmitted'
          AND t1.PartitionName2 = 'APAC.Default'
          AND t1.MessageUTC >= @from
          AND t1.MessageUTC < @to
      )
      SELECT *
      FROM CombinedQuery
      ORDER BY MessageUTC ASC;
    `);

    // Convert each event to Pune-local date string (yyyy-LL-dd)
    const events = recordset.map(e => {
      const local = DateTime.fromJSDate(e.MessageUTC, { zone: 'utc' }).setZone('Asia/Kolkata');
      return {
        ...e,
        LocaleMessageTime: local.toISO(),
        Dateonly: local.toFormat('yyyy-LL-dd'),
        Swipe_Time: local.toFormat('HH:mm:ss')
      };
    });

    // days array for the month (yyyy-LL-dd)
    const days = [];
    for (let d = startLocal; d < nextMonthLocal; d = d.plus({ days: 1 })) {
      days.push(d.toFormat('yyyy-LL-dd'));
    }

    // helper key (same dedup idea)
    const makeKey = (e) => (e.PersonGUID || e.EmployeeID || e.CardNumber || e.ObjectName1 || 'unknown');

    // aggregate present days per person (any InDirection on that date => present)
    const persons = new Map();
    for (const e of events) {
      const key = makeKey(e);
      if (!persons.has(key)) {
        persons.set(key, {
          EmployeeID: e.EmployeeID || '',
          PersonGUID: e.PersonGUID || '',
          Name: e.ObjectName1 || '',
          PersonnelType: e.PersonnelType || '',
          presentDays: new Set()
        });
      }
      if (e.Direction === 'InDirection') {
        persons.get(key).presentDays.add(e.Dateonly);
      }
    }

    // Build response attendance array
    const attendance = [];
    for (const [key, p] of persons) {
      const dayFlags = {};
      let presentCount = 0;
      for (let i = 0; i < days.length; i++) {
        const d = days[i];
        const isPresent = p.presentDays.has(d);
        dayFlags[d] = isPresent;
        if (isPresent) presentCount++;
      }
      const totalDays = days.length;
      const absentCount = totalDays - presentCount;
      const attendancePct = totalDays > 0 ? Math.round((presentCount / totalDays) * 10000) / 100 : 0;

      attendance.push({
        EmployeeID: p.EmployeeID,
        PersonGUID: p.PersonGUID,
        Name: p.Name,
        PersonnelType: p.PersonnelType,
        days: dayFlags,            // map YYYY-MM-DD -> true/false
        presentCount,
        absentCount,
        attendancePct
      });
    }

    const result = {
      year,
      month,
      days,
      summary: {
        persons: attendance.length,
        daysInMonth: days.length
      },
      attendance
    };

    return res.json(result);

  } catch (err) {
    console.error('getPuneMonthlyAttendance error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};
