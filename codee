When i select time  {/* Snapshot time + date picker UI */}
            <Form className="d-flex align-items-center ms-3" onSubmit={e => e.preventDefault()}>
              <InputGroup>
                <Form.Control
                  type="date"
                  value={snapshotDate}
                  onChange={handleSnapshotDateChange}
                  title="Select date (Denver)"
                  style={{ maxWidth: 150 }}
                />
                <Form.Control
                  type="time"
                  step="1"              // allow seconds in browsers that support it
                  value={snapshotTime}
                  onChange={handleSnapshotTimeChange}
                  title="Select time (Denver)"
                  style={{ maxWidth: 120 }}
                />
                <Button variant="outline-light" onClick={applySnapshot} disabled={snapshotLoading}>
                  {snapshotLoading ? 'Loading…' : 'Apply'}
                </Button>
                <Button variant="outline-secondary" onClick={clearSnapshot} className="ms-1">
                  Clear
                </Button>
              </InputGroup>
            </Form>

all dashboard is update and table
+++++++  But in this table Rejection column not update check what is the issue ony this issue other work proparly: oteh dont change:::
Floor In vs Out Swipe Summary (Rejections — Today)
Highest inconsistency: 11 on Floor 11
Floor	In Swipes	Out Swipes	In − Out	Security	Rejection
Floor 11	16	5	11	0	0
Floor 09	12	3	9	0	0
Floor 12	8	2	6	0	0
Floor 14	6	1	5	0	0
Floor 13	6	2	4	0	0
Floor 01	2	1	1	1	0
Floor 06	3	3	0	0	0
Floor 15	1	2	-1	0	0


import React, { useEffect, useState } from 'react';
import { Container, Navbar, Nav, Form, Button, InputGroup } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';

import DashboardHome from './pages/DashboardHome';
import FloorDetailsPage from './pages/FloorDetailsPage';
import DenverInOutInconsistencyPage from './pages/DenverInOutInconsistency'; // ← NEW

import './App.css';

export default function App() {
  // live data states
  const [floorData, setFloorData] = useState([]);
  const [personnelBreakdown, setPersonnelBreakdown] = useState([]);
  const [totalVisitedToday, setTotalVisitedToday] = useState(0);
  const [personnelSummary, setPersonnelSummary] = useState({ employees: 0, contractors: 0 });
  const [visitedToday, setVisitedToday] = useState({ employees: 0, contractors: 0, total: 0 });
  const [floorInOutSummary, setFloorInOutSummary] = useState([]); // ← NEW

  // --- NEW: visited occupants handling ---
  // Holds the live list updated by SSE
  const [liveVisitedOccupants, setLiveVisitedOccupants] = useState([]);
  // Holds the currently displayed occupants (either live or snapshot)
  const [visitedOccupants, setVisitedOccupants] = useState([]);

  // new: in/out inconsistency data
  const [inOutData, setInOutData] = useState(null);
  const [loadingInOut, setLoadingInOut] = useState(true);
  const [inOutError, setInOutError] = useState(null);

  // --- Snapshot/time selection states ---
  const [snapshotMode, setSnapshotMode] = useState(false);
  const [snapshotTime, setSnapshotTime] = useState(''); // "HH:MM" or "HH:MM:SS"
  const [snapshotDate, setSnapshotDate] = useState(() => {
    // default to today's date in America/Denver in YYYY-MM-DD (en-CA format)
    try {
      return new Date().toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
    } catch (e) {
      // fallback to local date if running in environment without timeZone support
      const d = new Date();
      const yyyy = d.getFullYear();
      const mm = String(d.getMonth() + 1).padStart(2, '0');
      const dd = String(d.getDate()).padStart(2, '0');
      return `${yyyy}-${mm}-${dd}`;
    }
  });
  const [snapshotLoading, setSnapshotLoading] = useState(false);
  const [snapshotError, setSnapshotError] = useState(null);
  const [snapshotData, setSnapshotData] = useState(null); // will hold the payload returned by the new API

  // live SSE (unchanged except we now manage visitedOccupants/liveVisitedOccupants)
  useEffect(() => {
    const es = new EventSource('http://localhost:5000/api/live-occupancy-denver');
    es.onmessage = e => {
      try {
        const p = JSON.parse(e.data);
        setFloorData(p.floorBreakdown || []);
        setPersonnelBreakdown(p.personnelBreakdown || []);
        setTotalVisitedToday(p.totalVisitedToday || 0);
        setPersonnelSummary(p.personnelSummary || { employees: 0, contractors: 0 });
        setVisitedToday(p.visitedToday || { employees: 0, contractors: 0, total: 0 });
        setFloorInOutSummary(p.floorInOutSummary || []);

        // ---- NEW: keep liveVisitedOccupants up-to-date ----
        const liveList = p.visitedOccupants || [];
        setLiveVisitedOccupants(liveList);

        // only overwrite displayed visitedOccupants if NOT in snapshotMode
        setVisitedOccupants(prev => (snapshotMode ? prev : liveList));
      } catch (err) {
        console.error('SSE parse error:', err);
      }
    };
    es.onerror = err => {
      console.error('SSE error:', err);
      es.close();
    };
    return () => es.close();
  }, [snapshotMode]); // depend on snapshotMode so SSE handler knows current mode

  // Fetch once: in/out inconsistency JSON (unchanged)
  useEffect(() => {
    fetch('http://localhost:5000/api/inout-inconsistency-denver')
      .then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status} - ${res.statusText}`);
        return res.json();
      })
      .then(data => {
        setInOutData(data.floorInconsistency || []); // ✅ Store only the array we want
        setLoadingInOut(false);
      })
      .catch(err => {
        console.error('Failed to load in/out inconsistency:', err);
        setInOutError(err.message);
        setLoadingInOut(false);
      });
  }, []);

  // --- Snapshot handlers ---
  const handleSnapshotTimeChange = (e) => {
    setSnapshotTime(e.target.value);
    setSnapshotError(null);
  };

  const handleSnapshotDateChange = (e) => {
    setSnapshotDate(e.target.value);
    setSnapshotError(null);
  };

// helper: return current Denver datetime as an ISO-like string "YYYY-MM-DDTHH:MM:SS"
function getDenverNowIsoString() {
  const fmt = new Intl.DateTimeFormat('en-CA', {
    timeZone: 'America/Denver',
    year: 'numeric', month: '2-digit', day: '2-digit',
    hour: '2-digit', minute: '2-digit', second: '2-digit',
    hour12: false
  });
  const parts = fmt.formatToParts(new Date());
  const m = {};
  parts.forEach(p => { if (p.type !== 'literal') m[p.type] = p.value; });
  // format parts into ISO-like string (always zero-padded by Intl)
  return `${m.year}-${m.month}-${m.day}T${m.hour}:${m.minute}:${m.second}`;
}




// ////////////////////////
  



// replace your applySnapshot with this updated version





const applySnapshot = async () => {
  if (!snapshotTime) {
    setSnapshotError('Select a time first.');
    return;
  }
  if (!snapshotDate) {
    setSnapshotError('Select a date first.');
    return;
  }

  // Ensure time has seconds (append :00 if only HH:MM)
  const timeForApi = snapshotTime.length === 5 ? `${snapshotTime}:00` : snapshotTime;

  // Build Denver-local ISO-like strings (no timezone suffix) and compare lexicographically
  const snapshotIso = `${snapshotDate}T${timeForApi}`;             // e.g. "2025-09-17T07:00:00"
  const nowDenverIso = getDenverNowIsoString();                    // current Denver like "2025-09-17T04:30:12"

  // If snapshot time is strictly in the future relative to Denver now -> block
  if (snapshotIso > nowDenverIso) {
    const msg = 'Please select a relevant time — snapshot cannot be in the future (Denver local time).';
    setSnapshotError(msg);
    // small popup to alert user immediately
    window.alert(msg);
    return;
  }

  setSnapshotLoading(true);
  setSnapshotError(null);

  try {
    const url = `http://localhost:5000/api/occupancy-at-time-denver?date=${encodeURIComponent(snapshotDate)}&time=${encodeURIComponent(timeForApi)}`;
    const resp = await fetch(url);
    if (!resp.ok) {
      const txt = await resp.text();
      throw new Error(`${resp.status} ${resp.statusText} - ${txt}`);
    }
    const json = await resp.json();

    // Store snapshot payload
    setSnapshotData(json);

    // set visitedOccupants from snapshot (if present)
    setVisitedOccupants(json.visitedOccupants || []);

    // activate snapshot mode
    setSnapshotMode(true);
  } catch (err) {
    console.error('Failed to fetch snapshot:', err);
    setSnapshotError(err.message || 'Failed to fetch snapshot');
    setSnapshotData(null);
    setSnapshotMode(false);
  } finally {
    setSnapshotLoading(false);
  }
};


const clearSnapshot = () => {
    setSnapshotMode(false);
    setSnapshotData(null);
    setSnapshotTime('');
    setSnapshotError(null);
    setSnapshotLoading(false);

    // ---- NEW: restore visitedOccupants to live list ----
    setVisitedOccupants(liveVisitedOccupants);
  };

  // --- Decide which data to pass into child components: snapshotData (if active) or live data ---
  const activeFloorData = snapshotMode && snapshotData ? (snapshotData.floorBreakdown || []) : floorData;
  const activePersonnelBreakdown = snapshotMode && snapshotData ? (snapshotData.personnelBreakdown || []) : personnelBreakdown;
  const activeTotalVisitedToday = snapshotMode && snapshotData ? (snapshotData.totalVisitedToday || 0) : totalVisitedToday;
  const activePersonnelSummary = snapshotMode && snapshotData ? (snapshotData.personnelSummary || { employees: 0, contractors: 0 }) : personnelSummary;
  const activeVisitedToday = snapshotMode && snapshotData ? (snapshotData.visitedToday || { employees: 0, contractors: 0, total: 0 }) : visitedToday;
  const activeFloorInOutSummary = snapshotMode && snapshotData ? (snapshotData.floorInOutSummary || []) : floorInOutSummary;

  // ---- NEW: decide active visited occupants to pass down ----
  const activeVisitedOccupants = snapshotMode && snapshotData ? (snapshotData.visitedOccupants || []) : visitedOccupants;

  // Helper text to be shown in navbar / header when snapshot is active
  let snapshotLabel = null;
  if (snapshotMode && snapshotData) {
    const asOfLocal = snapshotData.asOfLocal || snapshotData.asOf || snapshotData.asOfUTC;
    try {
      // If asOfLocal exists, show it formatted for Denver
      const d = asOfLocal ? new Date(asOfLocal) : null;
      const formatted = d ? d.toLocaleString('en-US', { timeZone: 'America/Denver' }) : `${snapshotDate} ${snapshotTime}`;
      snapshotLabel = <div style={{
            background: '#363d37',
            color: '#FFF',
            padding: '8px 16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderLeft: '4px solid rgb(11, 248, 3)',
            marginBottom: 8
          }}> Snapshot: {formatted} (Denver) </div>;
    } catch (e) {
      snapshotLabel = `Snapshot: ${snapshotDate} ${snapshotTime}`;
    }
  }

  return (
    <BrowserRouter>
      <div className="dark-theme">
        <Navbar bg="dark" variant="dark" expand="lg" className="px-4 navbar-infographic">
          <Navbar.Brand as={Link} to="/" className="wu-brand">
            Live Occupancy — Western Union Denver
          </Navbar.Brand>

          <Nav className="ms-auto align-items-center">
            <Nav.Link as={Link} to="/" className="nav-item-infographic">
              Dashboard
            </Nav.Link>
            <Nav.Link href="http://10.199.22.57:3002/partition/US.CO.OBS/history" className="nav-item-infographic">
              History
            </Nav.Link>
            <Nav.Link as={Link} to="/floor-details" className="nav-item-infographic">
              Floor Details
            </Nav.Link>

            {/* Snapshot time + date picker UI */}
            <Form className="d-flex align-items-center ms-3" onSubmit={e => e.preventDefault()}>
              <InputGroup>
                <Form.Control
                  type="date"
                  value={snapshotDate}
                  onChange={handleSnapshotDateChange}
                  title="Select date (Denver)"
                  style={{ maxWidth: 150 }}
                />
                <Form.Control
                  type="time"
                  step="1"              // allow seconds in browsers that support it
                  value={snapshotTime}
                  onChange={handleSnapshotTimeChange}
                  title="Select time (Denver)"
                  style={{ maxWidth: 120 }}
                />
                <Button variant="outline-light" onClick={applySnapshot} disabled={snapshotLoading}>
                  {snapshotLoading ? 'Loading…' : 'Apply'}
                </Button>
                <Button variant="outline-secondary" onClick={clearSnapshot} className="ms-1">
                  Clear
                </Button>
              </InputGroup>
            </Form>

            <Nav.Link className="theme-toggle-icon" title="Dark mode only">
              <FaSun color="#FFC72C" />
            </Nav.Link>
          </Nav>
        </Navbar>

        <Container fluid className="mt-4">
          {/* If snapshot active, show small label */}
          {snapshotLabel && (
            <div style={{ color: '#FFC72C', marginBottom: 8 }}>
              {snapshotLabel}
              {snapshotError && <span style={{ color: 'salmon', marginLeft: 10 }}>{snapshotError}</span>}
            </div>
          )}

          <Routes>
            <Route
              path="/"
              element={
                <DashboardHome
                  personnelSummary={activePersonnelSummary}
                  totalVisitedToday={activeTotalVisitedToday}
                  visitedToday={activeVisitedToday}
                  visitedOccupants={activeVisitedOccupants}         // <-- NEW prop
                  floorData={activeFloorData}
                  personnelBreakdown={activePersonnelBreakdown}
                  floorInOutSummary={activeFloorInOutSummary}
                />
              }
            />

            <Route
              path="/floor-details"
              element={
                <FloorDetailsPage
                  floorData={activeFloorData}
                  floorInOutSummary={activeFloorInOutSummary}
                  visitedOccupants={activeVisitedOccupants}        // optional: pass if FloorDetails shows visitors
                />
              }
            />

            <Route
              path="/inout-inconsistency-denver"
              element={
                <DenverInOutInconsistencyPage
                  data={inOutData}
                  loading={loadingInOut}
                  error={inOutError}
                />
              }
            />
          </Routes>
        </Container>
      </div>
    </BrowserRouter>
  );
}





_______________________________________________
// src/components/FloorInOutTable.jsx
import React, { useEffect, useMemo, useState } from 'react';
import { Card, Table, Modal, OverlayTrigger, Tooltip, Button } from 'react-bootstrap';

import * as XLSX from 'xlsx'

// Accent palette (gold / yellow)
const GOLD = '#FFC72C';
const GOLD_DEEP = '#FFDD00';
const BLACK_BG = '#0b0b0b';
// const ROW_COLORS = [GOLD, '#C9A9A6', '#FFE680', '#FFF5EE', '#FFD11A', '#96DED1', '#FFEB99'];

 // small helpers for theme
  const headerStyle = { background: GOLD_DEEP, color: '#000', fontWeight: '700' };
  const modalHeaderStyle = { background: BLACK_BG, color: GOLD, borderBottom: `2px solid ${GOLD_DEEP}` };
  const footerBtnStyle = { background: GOLD_DEEP, borderColor: GOLD_DEEP, color: '#000' };


// Accent palette
const ROW_COLORS = [
  '#FFC72C', '#C9A9A6', '#FFE680',
  '#FFF5EE', '#FFD11A', '#96DED1', '#FFEB99'
];

// Security Employee IDs (hardcoded)
const SECURITY_IDS = [
  "W0023386", "W0026455", "W0028120","62082475","W0027913","C676439","W0026151",
].map(id => id.toUpperCase());

const normalizeId = v => String(v || '').trim().toUpperCase();

// normalize floor names so "Floor 01" == "Floor 1"
const normalizeFloorName = (f) => {
  if (!f && f !== 0) return '';
  return String(f).replace(/^Floor\s0*/, 'Floor ').trim();
};



// Export helpers for rejections (creates a nicer Excel workbook with a small summary sheet)
const mapRejectionForExport = (r) => {
  let localDate = '';
  let localTime = '';
  try {
    if (r.LocaleMessageTime) {
      const dt = new Date(r.LocaleMessageTime);
      localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
      localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
    } else if (r.DateOnly) {
      localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0,10) : new Date(r.DateOnly).toISOString().slice(0,10));
      localTime = r.SwipeTime || '';
    }
  } catch (e) {
    localDate = (r.DateOnly || '').slice(0,10);
    localTime = r.SwipeTime || '';
  }

  return {
    Date: localDate,
    Time: localTime,
    Name: r.ObjectName1 || '',
    EmployeeID: r.EmployeeID || '',
    CardNumber: r.CardNumber || '',
    PersonnelType: r.PersonnelType || '',
    Door: r.Door || r.Location || '',
    RejectionType: r.RejectionType || '',
    DerivedFloor: deriveFloorFromRecord(r) || ''
  };
};

const exportRejectionsToExcel = (rows, fileName = 'rejections.xlsx') => {
  if (!rows || rows.length === 0) return;
  const mapped = rows.map(mapRejectionForExport);

  // main sheet
  const ws = XLSX.utils.json_to_sheet(mapped, { header: ['Date','Time','Name','EmployeeID','CardNumber','PersonnelType','Door','RejectionType','DerivedFloor'] });

  // set some column widths for a nicer look
  ws['!cols'] = [
    { wch: 6 },  // index column (we'll keep # when viewing)
    { wch: 12 }, // Date
    { wch: 10 }, // Time
    { wch: 28 }, // Name
    { wch: 14 }, // EmployeeID
    { wch: 14 }, // CardNumber
    { wch: 16 }, // PersonnelType
    { wch: 48 }, // Door
    { wch: 20 }, // RejectionType
    { wch: 12 }  // DerivedFloor
  ];

  // Summary sheet with small metadata
  const summary = [
    { Key: 'Export Date', Value: new Date().toLocaleString('en-CA') },
    { Key: 'Record Count', Value: mapped.length },
    { Key: 'Generated By', Value: 'FloorInOutTable' }
  ];
  const wsSummary = XLSX.utils.json_to_sheet(summary);
  wsSummary['!cols'] = [{ wch: 20 }, { wch: 30 }];

  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, 'Rejections');
  XLSX.utils.book_append_sheet(wb, wsSummary, 'Summary');

  // force download
  XLSX.writeFile(wb, fileName);
};






// Try to extract floor number from Door/Location strings robustly
function deriveFloorFromRecord(rec) {
  // Prefer explicit floor field if present
  if (rec.floor && String(rec.floor).trim()) return normalizeFloorName(rec.floor);

  const door = String(rec.Door || rec.door || rec.Location || '').trim();

  if (!door) return 'Unknown';

  // Common patterns: "US.CO.HQ. 12. South ..." or "US.CO.HQ. 06" or "US.CO.HQ 12"
  // Look for HQ[.]? <num>
  const mHQ = door.match(/HQ[.\s]*\s*(\d{1,2})\b/i);
  if (mHQ && mHQ[1]) return `Floor ${parseInt(mHQ[1], 10)}`;

  // Sometimes the floor appears right after the site prefix (e.g. "US.CO.HQ 6")
  const mSimple = door.match(/\b(\d{1,2})\b/);
  if (mSimple && mSimple[1]) {
    // extra guard: don't accidentally pick small numbers from serials like "11:01:0A"
    // require that the matched number is followed by a dot, space, or end-of-string (typical in " 12." or " 12 ")
    const idx = door.indexOf(mSimple[1]);
    if (idx !== -1) {
      const after = door[idx + mSimple[1].length] || '';
      if (after === '' || /\s|\./.test(after)) {
        return `Floor ${parseInt(mSimple[1], 10)}`;
      }
    }
  }

  // If Location contains 'Floor X'
  const mFloorText = door.match(/Floor\s*(\d{1,2})/i);
  if (mFloorText && mFloorText[1]) return `Floor ${parseInt(mFloorText[1], 10)}`;

  return 'Unknown';
}

export default function FloorInOutTable({
  data = [],
  floorBreakdown = [],
  floorInOutSummary = []
}) {
  const securitySet = useMemo(() => new Set(SECURITY_IDS), []);

  // Security modal state
  const [showSecurityModal, setShowSecurityModal] = useState(false);
  const [selectedFloorSecurity, setSelectedFloorSecurity] = useState(null);
  const [selectedPeopleSecurity, setSelectedPeopleSecurity] = useState([]);

  // Rejection state (today only)
  const [rejectionDetails, setRejectionDetails] = useState({}); // { normFloor -> [records...] }
  const [rejectionSummaryMap, setRejectionSummaryMap] = useState({}); // { normFloor -> count }
  const [rejectionAllDetailsToday, setRejectionAllDetailsToday] = useState([]); // flat array of today's details
  const [rejectionsLoading, setRejectionsLoading] = useState(false);

  // Modal for showing today's rejection list
  const [showRejectionModal, setShowRejectionModal] = useState(false);
  const [selectedRejectionFloor, setSelectedRejectionFloor] = useState(null);
  const [selectedRejectionList, setSelectedRejectionList] = useState([]);

  // NEW: modals for header-clicks (show ALL security across floors, show ALL rejections today)
  const [showAllSecurityModal, setShowAllSecurityModal] = useState(false);
  const [showAllRejectionsModal, setShowAllRejectionsModal] = useState(false);

  // Build securityByFloor from occupants & inOnlyPersons
  const securityByFloor = useMemo(() => {
    const byFloor = {};

    (floorBreakdown || []).forEach(fb => {
      const people = [];
      (fb.occupants || []).forEach(o => {
        const empId = normalizeId(o.EmployeeID);
        if (securitySet.has(empId)) people.push(o);
      });
      if (people.length) {
        byFloor[fb.floor] = (byFloor[fb.floor] || []).concat(people);
      }
    });

    (floorInOutSummary || []).forEach(f => {
      (f.inOnlyPersons || []).forEach(pid => {
        const empId = normalizeId(pid);
        if (securitySet.has(empId)) {
          byFloor[f.floor] = (byFloor[f.floor] || []).concat([
            { EmployeeID: empId, ObjectName1: "(Unknown)", Swipe_Time: "—", Door: "—", PersonnelType: "—" }
          ]);
        }
      });
    });

    return byFloor;
  }, [floorBreakdown, floorInOutSummary, securitySet]);

  // NEW: flattened security list (each item gets a floor property)
  const securityFlat = useMemo(() => {
    const arr = [];
    Object.keys(securityByFloor || {}).forEach(f => {
      (securityByFloor[f] || []).forEach(p => arr.push({ ...p, floor: f }));
    });
    return arr;
  }, [securityByFloor]);

  // --- fetch rejections and keep only today's (Denver) records ---
  useEffect(() => {
    let mounted = true;

    async function loadRejectionsTodayOnly() {
      setRejectionsLoading(true);
      try {
        const res = await fetch('/api/rejections');
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const payload = await res.json();

        // today in Denver (YYYY-MM-DD)
        const todayDenver = new Date().toLocaleDateString('en-CA', { timeZone: 'America/Denver' });

        // collect today's details (flat)
        let detailsToday = [];
        const summaryMap = {};

        // Prefer backend dateWise (aggregates) for counts if available
        if (Array.isArray(payload.dateWise)) {
          const dayObj = payload.dateWise.find(d => d.date === todayDenver);
          if (dayObj && Array.isArray(dayObj.floors)) {
            dayObj.floors.forEach(f => {
              const key = normalizeFloorName(f.floor || '');
              if (!key) return;
              summaryMap[key] = Number(f.rejectionCount || 0);
            });
          }
          // build detailsToday from payload.details so we can populate modal content
          if (Array.isArray(payload.details)) {
            detailsToday = payload.details.filter(d => {
              const raw = d.LocaleMessageTime || d.DateOnly || d.LocaleMessageTime;
              if (!raw) return false;
              try {
                const dt = new Date(raw);
                const dtStr = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                return dtStr === todayDenver;
              } catch (e) {
                return String(raw).slice(0, 10) === todayDenver;
              }
            });
          }
        } else {
          // fallback: filter details for today and aggregate counts
          if (Array.isArray(payload.details)) {
            detailsToday = payload.details.filter(d => {
              const raw = d.LocaleMessageTime || d.DateOnly || d.LocaleMessageTime;
              if (!raw) return false;
              try {
                const dt = new Date(raw);
                const dtStr = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                return dtStr === todayDenver;
              } catch (e) {
                return String(raw).slice(0, 10) === todayDenver;
              }
            });

            // derive floor per record and increment summary
            detailsToday.forEach(d => {
              const derived = deriveFloorFromRecord(d) || 'Unknown';
              const key = normalizeFloorName(derived);
              summaryMap[key] = (summaryMap[key] || 0) + 1;
            });
          }
        }

        // group detailsToday by normalized floor (derive floor if missing)
        const detailsByFloor = {};
        detailsToday.forEach(d => {
          const derived = deriveFloorFromRecord(d) || 'Unknown';
          const key = normalizeFloorName(derived) || 'Unknown';
          detailsByFloor[key] = detailsByFloor[key] || [];
          detailsByFloor[key].push(d);
        });

        if (!mounted) return;
        setRejectionSummaryMap(summaryMap);
        setRejectionDetails(detailsByFloor);
        setRejectionAllDetailsToday(detailsToday);
      } catch (err) {
        console.error('Failed to load rejections:', err);
        if (mounted) {
          setRejectionSummaryMap({});
          setRejectionDetails({});
          setRejectionAllDetailsToday([]);
        }
      } finally {
        if (mounted) setRejectionsLoading(false);
      }
    }

    loadRejectionsTodayOnly();
    return () => { mounted = false; };
  }, []);

  // Build sorted rows and attach securityCount & today's rejectionCount
  const sorted = useMemo(() => {
    const rows = (Array.isArray(data) ? data : []).map(({ floor, inSwipes, outSwipes }) => {
      const normFloor = normalizeFloorName(floor);
      return {
        floor,
        normFloor,
        inSwipes: Number(inSwipes || 0),
        outSwipes: Number(outSwipes || 0),
        inconsistency: Number(inSwipes || 0) - Number(outSwipes || 0),
        securityCount: (securityByFloor[floor] || []).length,
        rejectionCount: rejectionSummaryMap[normFloor] || 0
      };
    });
    return rows.sort((a, b) => b.inconsistency - a.inconsistency);
  }, [data, securityByFloor, rejectionSummaryMap]);

  const top = sorted[0];

  const handleSecurityCellClick = (floor) => {
    const people = securityByFloor[floor] || [];
    if (people.length > 0) {
      setSelectedFloorSecurity(floor);
      setSelectedPeopleSecurity(people);
      setShowSecurityModal(true);
    }
  };

  // when user clicks the rejection cell, open modal and show today's details for that normalized floor
  const handleRejectionCellClick = (normFloor, displayFloor) => {
    let list = rejectionDetails[normFloor] || [];

    // fallback: if grouped list empty but we have a count, try scanning flat details for the floor number
    if ((!list || list.length === 0) && (rejectionSummaryMap[normFloor] || 0) > 0) {
      const numMatch = (normFloor && normFloor.match(/\d+/)) ? normFloor.match(/\d+/)[0] : null;
      if (numMatch && Array.isArray(rejectionAllDetailsToday)) {
        const regex = new RegExp(`\\b${numMatch}\\b`);
        list = rejectionAllDetailsToday.filter(d => {
          const door = String(d.Door || d.door || d.Location || '');
          return regex.test(door);
        });
      }
    }

    setSelectedRejectionFloor(displayFloor || normFloor);
    setSelectedRejectionList(list || []);
    setShowRejectionModal(true);
  };

  // NEW: header click handlers
  const handleSecurityHeaderClick = () => {
    if ((securityFlat || []).length > 0) setShowAllSecurityModal(true);
  };

  const handleRejectionHeaderClick = () => {
    if ((rejectionAllDetailsToday || []).length > 0) setShowAllRejectionsModal(true);
  };

  // Tooltip content uses rejectionDetails (already filtered to today)
  const renderRejectionTooltip = (floor) => {
    const nf = normalizeFloorName(floor);
    const byFloor = rejectionDetails[nf] || [];
    if (!byFloor.length) return 'No rejections today';
    const lines = [`Total today: ${byFloor.length}`, '', 'Recent:'];
    byFloor.slice(0, 6).forEach(d => {
      const date = d.LocaleMessageTime ? d.LocaleMessageTime.slice(0,10) : (d.DateOnly ? (typeof d.DateOnly === 'string' ? d.DateOnly.slice(0,10) : new Date(d.DateOnly).toISOString().slice(0,10)) : '');
      const time = d.SwipeTime || (d.LocaleMessageTime ? d.LocaleMessageTime.slice(11,19) : '');
      lines.push(`${date} ${time} — ${d.RejectionType || ''} — ${d.Door || d.Location || ''}`);
    });
    if (byFloor.length > 6) lines.push(`… +${byFloor.length - 6} more`);
    return lines.join('\n');
  };

  return (
    <>
      <Card className="mb-4 shadow-sm" style={{ background: '#1a1a1a', border: '2px solid #FFC72C' }}>
        <Card.Header className="text-center fw-bold" style={{ background: '#000', color: '#FFC72C' }}>
          Floor In vs Out Swipe Summary (Rejections — Today)
        </Card.Header>

        <Card.Body style={{ height: 450, padding: '1rem', overflowY: 'auto' }}>
          {top && (
            <div className="mb-3" style={{ color: '#fff', fontSize: '1rem' }}>
              Highest inconsistency:&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.inconsistency}</span>
              &nbsp;on&nbsp;
              <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.floor}</span>
            </div>
          )}

          <Table striped bordered hover size="sm" variant="dark" className="mb-0">
            <thead>
              <tr>
                <th>Floor</th>
                <th>In Swipes</th>
                <th>Out Swipes</th>
                <th>In − Out</th>
                <th
                  style={{ cursor: (securityFlat && securityFlat.length) ? 'pointer' : 'default', textDecoration: (securityFlat && securityFlat.length) ? 'underline' : 'none' }}
                  onClick={handleSecurityHeaderClick}
                  title={securityFlat && securityFlat.length ? `Show all security (${securityFlat.length})` : 'No security'}
                >
                  Security
                </th>
                <th
                  style={{ cursor: (rejectionAllDetailsToday && rejectionAllDetailsToday.length) ? 'pointer' : 'default', textDecoration: (rejectionAllDetailsToday && rejectionAllDetailsToday.length) ? 'underline' : 'none' }}
                  onClick={handleRejectionHeaderClick}
                  title={rejectionAllDetailsToday && rejectionAllDetailsToday.length ? `Show all rejections today (${rejectionAllDetailsToday.length})` : 'No rejections today'}
                >
                  Rejection
                </th>
              </tr>
            </thead>

            <tbody>
              {sorted.map((row, idx) => (
                <tr key={row.floor} style={{ backgroundColor: row.securityCount > 0 ? '#333300' : undefined }}>
                  <td style={{ color: '#fff' }}>{row.floor}</td>
                  <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>{row.inSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>{row.outSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 2) % ROW_COLORS.length], fontWeight: 'bold' }}>
                    {row.inconsistency}
                  </td>

                  {/* Security cell - clickable only this cell */}
                  <td
                    style={{
                      color: row.securityCount > 0 ? '#FFC72C' : '#aaa',
                      fontWeight: row.securityCount > 0 ? 'bold' : 'normal',
                      cursor: row.securityCount > 0 ? 'pointer' : 'default',
                      textDecoration: row.securityCount > 0 ? 'underline' : 'none'
                    }}
                    onClick={() => { if (row.securityCount > 0) handleSecurityCellClick(row.floor); }}
                  >
                    {row.securityCount}
                  </td>

                  {/* Rejection cell (today only) - clickable to open modal */}
                  <td style={{
                    color: row.rejectionCount > 0 ? '#FFCCCB' : '#aaa',
                    fontWeight: row.rejectionCount > 0 ? 'bold' : 'normal',
                    cursor: row.rejectionCount > 0 ? 'pointer' : 'default'
                  }}>
                    {row.rejectionCount > 0 ? (
                      <OverlayTrigger
                        placement="top"
                        overlay={<Tooltip id={`rej-tip-${row.normFloor.replace(/\s+/g,'_')}`}>{renderRejectionTooltip(row.normFloor || row.floor)}</Tooltip>}
                      >
                        <span
                          onClick={() => handleRejectionCellClick(row.normFloor, row.floor)}
                          style={{ textDecoration: 'underline', display: 'inline-block' }}
                        >
                          {row.rejectionCount}
                        </span>
                      </OverlayTrigger>
                    ) : 0}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Card.Body>
      </Card>

      {/* Security Modal */}
      <Modal show={showSecurityModal} onHide={() => setShowSecurityModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title>Security Occupants - {selectedFloorSecurity}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Table striped bordered hover size="sm">
            <thead>
              <tr>
                <th>EmployeeID</th>
                <th>Name</th>
                <th>Swipe Time</th>
                <th>Door</th>
                <th>Type</th>
              </tr>
            </thead>
            <tbody>
              {selectedPeopleSecurity.map((p, idx) => (
                <tr key={idx}>
                  <td>{p.EmployeeID}</td>
                  <td>{p.ObjectName1 || "(Unknown)"}</td>
                  <td>{p.Swipe_Time || "—"}</td>
                  <td>{p.Door || "—"}</td>
                  <td>{p.PersonnelType || "—"}</td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Modal.Body>
      </Modal>


     
      {/* NEW: All Security Modal (header click) */}
      <Modal show={showAllSecurityModal} onHide={() => setShowAllSecurityModal(false)} size="lg" centered>
        <Modal.Header closeButton>
          <Modal.Title style={{ textAlign:'center' }}>All Security Occupants</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {(!securityFlat || securityFlat.length === 0) ? (
            <div>No security occupants found</div>
          ) : (
            <Table striped bordered hover size="sm">
              <thead >
                <tr>
                  <th>Sr.no</th>
                  <th>Floor</th>
                  <th>EmployeeID</th>
                  <th>Name</th>
                  <th>Swipe Time</th>
                  <th>Door</th>
                </tr>
              </thead>
              <tbody>
                {securityFlat.map((p, i) => (
                  <tr key={i}>
                    <td>{i + 1}</td>
                    <td>{p.floor}</td>
                    <td>{p.EmployeeID}</td>
                    <td>{p.ObjectName1 || '(Unknown)'}</td>
                    <td>{p.Swipe_Time || '—'}</td>
                    <td style={{ maxWidth: 240, wordBreak: 'break-word' }}>{p.Door || '—'}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAllSecurityModal(false)}>Close</Button>
        </Modal.Footer>
      </Modal>

    



      
{/* Rejection details modal (today) */}
<Modal show={showRejectionModal} onHide={() => setShowRejectionModal(false)} size="lg" centered>
  <Modal.Header closeButton>
    <Modal.Title>Rejections Today - {selectedRejectionFloor}</Modal.Title>
  </Modal.Header>
  <Modal.Body>
    {selectedRejectionList.length === 0 ? (
      <div>No rejections recorded today for {selectedRejectionFloor}</div>
    ) : (
      <Table striped bordered hover size="sm">
        <thead>
          <tr>
            <th>#</th>
            <th>Date</th>
            <th>Time</th>
            <th>Name</th>
            <th>EmployeeID</th>
            <th>CardNumber</th>
            <th>PersonnelType</th>
            <th>Door</th>
            <th>RejectionType</th>
          </tr>
        </thead>
        <tbody>
          {selectedRejectionList.map((r, i) => {
            let localDate = '';
            let localTime = '';
            try {
              if (r.LocaleMessageTime) {
                const dt = new Date(r.LocaleMessageTime);
                localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
              } else if (r.DateOnly) {
                localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0,10) : new Date(r.DateOnly).toISOString().slice(0,10));
                localTime = r.SwipeTime || '';
              }
            } catch (e) {
              localDate = (r.DateOnly || '').slice(0,10);
              localTime = r.SwipeTime || '';
            }

            return (
              <tr key={i}>
                <td>{i + 1}</td>
                <td>{localDate}</td>
                <td>{localTime}</td>
                <td>{r.ObjectName1}</td>
                <td>{r.EmployeeID}</td>
                <td>{r.CardNumber || '—'}</td>
                <td>{r.PersonnelType || '—'}</td>
                <td style={{ maxWidth: 280, wordBreak: 'break-word' }}>{r.Door || r.Location || '—'}</td>
                <td>{r.RejectionType || '—'}</td>
              </tr>
            );
          })}
        </tbody>
      </Table>
    )}
  </Modal.Body>
  <Modal.Footer>
    <Button
      style={{ background: '#FFC72C', borderColor: '#FFC72C', color: '#000', fontWeight: 600 }}
      onClick={() => exportRejectionsToExcel(selectedRejectionList, `rejections-${(selectedRejectionFloor||'floor').replace(/\s+/g,'_')}-${new Date().toISOString().slice(0,10)}.xlsx`)}
    >
      Export Excel
    </Button>
    <Button variant="secondary" onClick={() => setShowRejectionModal(false)}>Close</Button>
  </Modal.Footer>
</Modal>



   





      
{/* NEW: All Rejections Modal (header click) */}
<Modal show={showAllRejectionsModal} onHide={() => setShowAllRejectionsModal(false)} size="lg" centered>
  <Modal.Header closeButton>
    <Modal.Title>All Rejections Today</Modal.Title>
  </Modal.Header>
  <Modal.Body>
    {(!rejectionAllDetailsToday || rejectionAllDetailsToday.length === 0) ? (
      <div>No rejections recorded today</div>
    ) : (
      <Table striped bordered hover size="sm">
        <thead>
          <tr>
            <th>#</th>
            <th>Date</th>
            <th>Time</th>
            <th>Name</th>
            <th>EmployeeID</th>
            <th>CardNumber</th>
            <th>PersonnelType</th>
            <th>Door</th>
            <th>RejectionType</th>
          </tr>
        </thead>
        <tbody>
          {rejectionAllDetailsToday.map((r, i) => {
            let localDate = '';
            let localTime = '';
            try {
              if (r.LocaleMessageTime) {
                const dt = new Date(r.LocaleMessageTime);
                localDate = dt.toLocaleDateString('en-CA', { timeZone: 'America/Denver' });
                localTime = dt.toLocaleTimeString('en-GB', { timeZone: 'America/Denver' });
              } else if (r.DateOnly) {
                localDate = (typeof r.DateOnly === 'string' ? r.DateOnly.slice(0,10) : new Date(r.DateOnly).toISOString().slice(0,10));
                localTime = r.SwipeTime || '';
              }
            } catch (e) {
              localDate = (r.DateOnly || '').slice(0,10);
              localTime = r.SwipeTime || '';
            }

            return (
              <tr key={i}>
                <td>{i + 1}</td>
                <td>{localDate}</td>
                <td>{localTime}</td>
                <td>{r.ObjectName1}</td>
                <td>{r.EmployeeID}</td>
                <td>{r.CardNumber || '—'}</td>
                <td>{r.PersonnelType || '—'}</td>
                <td style={{ maxWidth: 280, wordBreak: 'break-word' }}>{r.Door || r.Location || '—'}</td>
                <td>{r.RejectionType || '—'}</td>
              </tr>
            );
          })}
        </tbody>
      </Table>
    )}
  </Modal.Body>
  <Modal.Footer>
    <Button
      style={{ background: '#FFC72C', borderColor: '#FFC72C', color: '#000', fontWeight: 600 }}
      onClick={() => exportRejectionsToExcel(rejectionAllDetailsToday, `all-rejections-${new Date().toISOString().slice(0,10)}.xlsx`)}
    >
      Export Excel
    </Button>
    <Button variant="secondary" onClick={() => setShowAllRejectionsModal(false)}>Close</Button>
  </Modal.Footer>
</Modal>
    </>
  );
}
