const handleExportFloor = async (floor, emps) => {
  if (!emps || emps.length === 0) return;

  const workbook = new ExcelJS.Workbook();
  const sheet = workbook.addWorksheet("FloorExport");

  // --- Header row ---
  const headers = [
    "Emp ID",
    "Name",
    "Swipe Time",
    "Type",
    "Company",
    "Direction",
    "Card",
    "Door"
  ];
  const headerRow = sheet.addRow(headers);
  headerRow.eachCell(cell => {
    cell.font = { bold: true, color: { argb: "FFFFFFFF" } };
    cell.fill = {
      type: "pattern",
      pattern: "solid",
      fgColor: { argb: "FFFFC107" } // Yellow
    };
    cell.alignment = { horizontal: "center", vertical: "middle" };
    cell.border = {
      top: { style: "thin" },
      left: { style: "thin" },
      bottom: { style: "thin" },
      right: { style: "thin" }
    };
  });

  // --- Data rows ---
  emps.forEach(r => {
    const row = sheet.addRow([
      r.EmployeeID ?? "",
      r.ObjectName1 ?? "",
      formatApiDateTime(r.LocaleMessageTime),
      r.PersonnelType ?? "",
      r.CompanyName ?? "",
      r.Direction ?? "",
      r.CardNumber ?? "",
      r.Door ?? ""
    ]);

    row.eachCell(cell => {
      cell.border = {
        top: { style: "thin" },
        left: { style: "thin" },
        bottom: { style: "thin" },
        right: { style: "thin" }
      };
    });
  });

  // --- Auto column width ---
  sheet.columns.forEach(col => {
    let maxLen = 7;
    col.eachCell({ includeEmpty: true }, c => {
      maxLen = Math.max(maxLen, (c.value ? c.value.toString().length : 0) + 2);
    });
    col.width = Math.min(Math.max(maxLen, 10), 40);
  });

  // --- Filename (safe floor name + timestamp) ---
  const safeFloor = floor.replace(/[^a-z0-9\-_]/gi, "_").slice(0, 80);
  const ts = new Date().toISOString().slice(0, 19).replace(/[:T]/g, "-");
  const filename = `${safeFloor}_${ts}.xlsx`;

  // --- Save file ---
  const buf = await workbook.xlsx.writeBuffer();
  saveAs(new Blob([buf]), filename);
};