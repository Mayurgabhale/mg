// --- new helper: fetch events in 24h window ending at `until` (inclusive)
async function fetchEventsWindowUntil(until) {
  let pool;
  try {
    pool = await denver.poolPromise;
  } catch (err) {
    console.error('‚ùå Failed to get Denver pool in fetchEventsWindowUntil():', err);
    return [];
  }
  if (!pool) return [];

  const req = pool.request();
  req.input('until', sql.DateTime2, until);

  const { recordset } = await req.query(`
    WITH CombinedQuery AS (
      SELECT
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t1.ObjectName1,
        CASE WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t1.ObjectIdentity1 AS PersonGUID,
        t3.Name AS PersonnelType,
        COALESCE(TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'), sc.value) AS CardNumber,
        t5a.value AS AdmitCode,
        t5d.value AS Direction,
        t1.ObjectName2 AS Door
      FROM ACVSUJournal_00010029.dbo.ACVSUJournalLog t1
      LEFT JOIN ACVSCore.Access.Personnel t2 ON t1.ObjectIdentity1 = t2.GUID
      LEFT JOIN ACVSCore.Access.PersonnelType t3 ON t2.PersonnelTypeId  = t3.ObjectID
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5a ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred t5d ON t1.XmlGUID = t5d.GUID AND t5d.Name = 'Direction'
      LEFT JOIN ACVSUJournal_00010029.dbo.ACVSUJournalLogxml t_xml ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00010029.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) sc ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.ObjectName2 LIKE '%HQ%'
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) <= @until
        AND DATEADD(MINUTE,-1 * t1.MessageLocaleOffset, t1.MessageUTC) > DATEADD(HOUR, -24, @until)
    )
    SELECT
      LocaleMessageTime,
      CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
      CONVERT(VARCHAR(8) , LocaleMessageTime, 108) AS Swipe_Time,
      EmployeeID, PersonGUID, ObjectName1, PersonnelType,
      CardNumber, AdmitCode, Direction, Door
    FROM CombinedQuery
    ORDER BY LocaleMessageTime ASC;
  `);

  return recordset;
}

// --- new handler: GET /api/occupancy-at-time-denver?time=HH:MM[:SS]
exports.getDenverSnapshotAtTime = async (req, res) => {
  try {
    const timeRaw = req.query.time; // expect HH:MM or HH:MM:SS (Denver local)
    if (!timeRaw) return res.status(400).json({ error: 'missing "time" query parameter (expected HH:MM or HH:MM:SS)' });

    // Validate basic format
    const m = /^([0-1]\d|2[0-3]):([0-5]\d)(?::([0-5]\d))?$/.exec(timeRaw);
    if (!m) return res.status(400).json({ error: 'invalid "time" format; expected HH:MM or HH:MM:SS' });

    const hour = Number(m[1]);
    const minute = Number(m[2]);
    const second = m[3] ? Number(m[3]) : 0;

    // Build the "until" instant as today in America/Denver with the provided time
    const untilDt = DateTime.now().setZone('America/Denver').set({ hour, minute, second, millisecond: 0 });
    const untilJsDate = untilDt.toJSDate();

    // fetch events in 24h window ending at until
    const events = await fetchEventsWindowUntil(untilJsDate);

    // Build occupancy payload using existing builder
    const payload = buildOccupancyForToday(events, []);

    // adjust asOf to the requested snapshot instant (ISO)
    payload.asOf = untilDt.toUTC().toISO();

    return res.json(payload);
  } catch (err) {
    console.error('getDenverSnapshotAtTime error:', err);
    return res.status(500).json({ error: 'Internal Server Error' });
  }
};




....

...
.




// routes/liveOccupancyRoutesDenver.js  (or your existing Denver router file)
const express = require('express');
const router = express.Router();
const { getDenverLiveOccupancy, getDenverSnapshotAtTime } = require('../controllers/denverLiveOccupancyController');

router.get('/live-occupancy-denver', getDenverLiveOccupancy);
router.get('/occupancy-at-time-denver', getDenverSnapshotAtTime); // <-- new snapshot endpoint

module.exports = router;




...

...


{snapshotMode && (
  <div style={{
    background: '#2b2b2b',
    color: '#FFD100',
    padding: '8px 16px',
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderLeft: '4px solid #FFD100',
    marginBottom: 8
  }}>
    <div>
      Viewing historical snapshot for:&nbsp;
      <strong>{(snapshotData && snapshotData.asOf) ? snapshotData.asOf : snapshotTime}</strong>
      {snapshotError && <span style={{ color: 'salmon', marginLeft: 10 }}>{snapshotError}</span>}
    </div>
    <div>
      <button className="btn btn-sm btn-outline-warning" onClick={() => clearSnapshot()} disabled={snapshotLoading}>
        Return to Live
      </button>
    </div>
  </div>
)}