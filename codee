see this read all availabl member 
Site Head
1
Rajeev Mago
Rajeev Mago
Available
rajeev.mago@wu.com
xxx-xxx-xxxx
Red Zone
BCM Team / Site Operations
1
Rohit Singla
Rohit Singla
Available
rohit.singla@wu.com
xxx-xxx-xxxx
Red Zone
HR
1
Suma Roy
Suma Roy
Away
suma.roy@wu.com
xxx-xxx-xxxx
Podium Floor – Red Zone
Incident Controller
3
Sameer Kanade
Sameer Kanade
Available
Sameer.Kanade@wu.com
xxx-xxx-xxxx
Reception Area
Lloyds Dass
Lloyds Dass
Available
Lloyds.Dass@wu.com
xxx-xxx-xxxx
Reception Area
Singh, Uday Prakash
Singh, Uday Prakash
Available
Uday.Singh@westernunion.com
xxx-xxx-xxxx
Red Zone
ERT Team Leader
6
Vishal Chaudhari
Vishal Chaudhari
Available
Vishal.Chaudhary@wu.com
xxx-xxx-xxxx
Green Zone
Vinit Kumar
Vinit Kumar
Available
Vinit.Kumar@wu.com
xxx-xxx-xxxx
Green Zone
Sonu Pandey
Sonu Pandey
Available
Sonu.Pandey@westernunion.com
xxx-xxx-xxxx
Green Zone
Sagar Jamdade
Sagar Jamdade
Available
sagar.jamdade@wu.com
xxx-xxx-xxxx
Tower B
Rangare, Bhupendra Babu
Rangare, Bhupendra Babu
Available
bhupendra.rangare@wu.com
xxx-xxx-xxxx
Red Zone
Bhoyane, Satish Pandurang
Bhoyane, Satish Pandurang
Available
satishpandurang.bhoyane@westernunion.com
xxx-xxx-xxxx
Green Zone
ERT Team Members
28
Bamoriya, Priyank
Bamoriya, Priyank
Available
Priyank.Bamoriya@wu.com
xxx-xxx-xxxx
Yellow Zone
Barua, Renuka
Barua, Renuka
Available
Renuka.Barua@wu.com
xxx-xxx-xxxx
Tower B
Ladva, Hirav
Ladva, Hirav
Available
Hirav.Ladva@wu.com
xxx-xxx-xxxx
Red Zone
Mahajan, Sachin
Mahajan, Sachin
Available
sachin.mahajan@wu.com
xxx-xxx-xxxx
Yellow Zone
Mulye, Devdatta
Mulye, Devdatta
Available
devdatta.mulye@wu.com
xxx-xxx-xxxx
Reception Area
Nalband, Khushboo
Nalband, Khushboo
Available
Khushboo.Nalband@wu.com
xxx-xxx-xxxx
2nd Floor, Pune
Pachimatla, Shiva Prasad
Pachimatla, Shiva Prasad
Available
Shiva.Pachimatla@wu.com
xxx-xxx-xxxx
Tower B
Patle, Mayank
Patle, Mayank
Available
Mayank.Patle@wu.com
xxx-xxx-xxxx
2nd Floor, Pune
Thirumala, Rajesh
Thirumala, Rajesh
Available
Rajesh.Thirumala@wu.com
xxx-xxx-xxxx
Tower B
Ahuja, Charandeep Singh
Ahuja, Charandeep Singh
Away
CharandeepSingh.Ahuja@wu.com
xxx-xxx-xxxx
Podium Floor-Green Zone - 2
Ahuja, Ravi
Ahuja, Ravi
Away
Ravi.Ahuja@wu.com
xxx-xxx-xxxx
Tower B
Bedre, Atharva
Bedre, Atharva
Away
Atharva.Bedre@wu.com
xxx-xxx-xxxx
Tower B
Choudhary, Shanker
Choudhary, Shanker
Away
Shanker.Choudhary@wu.com
xxx-xxx-xxxx
Tower B
Dalal, Vighnesh
Dalal, Vighnesh
Away
Vighnesh.Dalal@wu.com
xxx-xxx-xxxx
Podium Floor-Red Zone
Dhavale, Yashraj
Dhavale, Yashraj
Away
Yashraj.Dhavale@wu.com
xxx-xxx-xxxx
Tower B
Kolhe, Vaibhav
Kolhe, Vaibhav
Away
Vaibhav.Kolhe@wu.com
xxx-xxx-xxxx
2nd Floor
Mishra, Anurag
Mishra, Anurag
Away
Anurag.Mishra@wu.com
xxx-xxx-xxxx
Podium Floor-Yellow Zone
Nair, Saurabh
Nair, Saurabh
Away
Saurabh.Nair@wu.com
xxx-xxx-xxxx
Podium Floor -Yellow Zone
Nerella, Srikanth
Nerella, Srikanth
Away
Srikanth.Nerella@wu.com
xxx-xxx-xxxx
2nd Floor
Palve, Vikas
Palve, Vikas
Away
Vikas.Palve@wu.com
xxx-xxx-xxxx
2nd Floor
Patil, Sangramsinh
Patil, Sangramsinh
Away
Sangramsinh.Patil@wu.com
xxx-xxx-xxxx
Podium Floor-Orange Zone
Pillai, Anurag
Pillai, Anurag
Away
Anurag.Pillai@wu.com
xxx-xxx-xxxx
Podium Floor-Orange Zone
Punde, Deepak
Punde, Deepak
Away
Deepak.Punde@wu.com
xxx-xxx-xxxx
Podium Floor-Red Zone
Samrendra, Samar
Samrendra, Samar
Away
Samar.Samrendra@wu.com
xxx-xxx-xxxx
Podium Floor-Green Zone - 2
Shah, Bhavik
Shah, Bhavik
Away
Bhavik.Shah@wu.com
xxx-xxx-xxxx
Podium Floor-Red Zone
Shaikh, Juned Ahmed
Shaikh, Juned Ahmed
Away
Juned.Ahmed@wu.com
xxx-xxx-xxxx
Tower B
Sharma, Rajesh
Sharma, Rajesh
Away
Rajesh.Sharma@wu.com
xxx-xxx-xxxx
Podium Floor-Green Zone - 2
Yash, Kumar
Yash, Kumar
Away
kumar.yash@wu.com
xxx-xxx-xxxx
Podium Floor-Red Zone


import React, { useState, useMemo } from 'react';
import { Card, Row, Col, Badge, Button, Container } from 'react-bootstrap';
import {
  FaHome,
  FaBuilding,
  FaLayerGroup,
  FaEnvelope,
  FaPhone,
  FaUserTie,
  FaUserShield,
  FaUserNurse,
  FaUsers,
  FaEye,
  FaEyeSlash,
  FaUserCog,
  FaIdCard,
  FaLocationArrow
} from 'react-icons/fa';

// ---------------------- CONFIG ----------------------
const firstColumnRoles = [
  'Site Head',
  'BCM Team / Site Operations',
  'HR',
  'Incident Controller'
];

const roleIcons = {
  'Site Head': <FaUserTie className="text-info" />,
  'BCM Team / Site Operations': <FaUserShield className="text-teal" />,
  'HR': <FaUserTie className="text-purple" />,
  'Incident Controller': <FaUserShield className="text-warning" />,
  'ERT Team Leader': <FaUserShield className="text-danger" />,
  'ERT Team Members': <FaUsers className="text-primary" />,
  'First Aid Team': <FaUserNurse className="text-orange" />
};

const baseLocationByRole = {
  'Site Head': 'Podium Floor – Red Zone',
  'HR': 'Podium Floor – Red Zone',
  'Incident Controller': 'Podium Floor – Red Zone',
  'First Aid Team': 'Podium Floor – Green Zone',
  'ERT Team Leader': 'Podium Floor – Green Zone',
  'BCM Team / Site Operations': 'Podium Floor – Red Zone'
};

// ---------------------- HELPERS ----------------------
const DEFAULT_PHOTO = '/photos/default.png';

const normalize = (s = '') =>
  s
    .toString()
    .toLowerCase()
    .replace(/[–—−]/g, '-')   // unify dash characters
    .replace(/\s+/g, ' ')
    .trim();

// treat a variety of incoming present values as present
const isPresent = (m) => {
  if (!m) return false;
  const p = m.present;
  if (typeof p === 'boolean') return p;
  if (typeof p === 'string') {
    return /^(true|yes|y|available|present)$/i.test(p.trim());
  }
  // fallback: truthy values count as present
  return Boolean(p);
};

// various property names for live/current location
const getLiveLocation = (m = {}) =>
  (m.zone || m.liveLocation || m.currentLocation || '').toString();

// various property names for base location
const getBaseLocation = (m = {}) =>
  (m['Base Location'] || m.Floor || m.baseLocation || '').toString();

// map location text to one of the three floors (or null)
const detectFloor = (location = '') => {
  const l = normalize(location);
  if (!l) return null;
  if (l.includes('2nd') || l.includes('second floor') || l.includes('2nd floor')) return '2nd Floor';
  if (l.includes('tower b') || l.includes('tower-b') || l.includes('towerb')) return 'Tower B';
  // treat color zones on podium floor as podium
  if (l.includes('podium') || l.includes('red zone') || l.includes('green zone') || l.includes('podium floor')) {
    return 'Podium Floor';
  }
  return null;
};

// check whether a location string corresponds to the filter zone
const matchesFilterZone = (location = '', filterZone = '') => {
  if (!filterZone) return true;
  return detectFloor(location) === filterZone;
};

const toSlug = (name = '') =>
  name.toLowerCase().trim().replace(/[^a-z0-9]+/g, '_').replace(/^_+|_+$/g, '');

const getPhotoSrc = (member) => {
  if (!member) return DEFAULT_PHOTO;
  if (member.photo) return member.photo;
  const name = member.name || member.Name;
  if (name) return `/photos/${toSlug(name)}.png`;
  return DEFAULT_PHOTO;
};

// ---------------------- ROLE CARD ----------------------
function renderRoleCard(role, membersRaw = [], filterZone) {
  // when filtering - show only available (present) members whose CURRENT location matches filter
  const members = filterZone
    ? membersRaw.filter(m => isPresent(m) && matchesFilterZone(getLiveLocation(m), filterZone))
    : membersRaw;

  if (filterZone && members.length === 0) return null;

  return (
    <Card className="dashboard-card mb-1" key={role}>
      <Card.Header className="dashboard-card-header d-flex align-items-center">
        <span className="role-icon me-2">{roleIcons[role] || <FaUserCog className="text-muted" />}</span>
        <span className="role-title">{role}</span>
        <Badge bg="outline-light" className="ms-2">{members.length}</Badge>
      </Card.Header>
      <Card.Body className="p-1">
        {members.length > 0 ? members.map((m, i) => {
          const location = isPresent(m)
            ? (getLiveLocation(m) || 'Unknown Zone')
            : (getBaseLocation(m) || baseLocationByRole[role] || 'Unknown Zone');

          return (
            <div key={i} className="member-item pb-0 mb-1">
              <div className="d-flex justify-content-between align-items-start mb-1">
                <div className="d-flex align-items-center">
                  <div className={`member-photo-container ${isPresent(m) ? 'present-border' : 'away-border'}`}>
                    <img
                      src={getPhotoSrc(m)}
                      alt={m.name || 'Member'}
                      className="member-photo"
                      onError={(e) => {
                        e.currentTarget.onerror = null;
                        e.currentTarget.src = DEFAULT_PHOTO;
                      }}
                    />
                    <div className={`status-indicator ${isPresent(m) ? 'present' : 'away'}`} />
                  </div>
                  <div className="ms-3">
                    <h6 className="mb-0 member-name">{m.name}</h6>
                    <small className="text-muted">{m.designation || m.role}</small>
                  </div>
                </div>
                <Badge bg={isPresent(m) ? 'success' : 'danger'} className="status-badge">
                  {isPresent(m) ? 'Available' : 'Away'}
                </Badge>
              </div>

              <div className="member-contact-info">
                <div className="contact-item">
                  <FaEnvelope className="contact-icon text-primary" />
                  <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                </div>
                <div className="contact-item">
                  <FaPhone className="contact-icon text-success" />
                  <span className="contact-text">{m.phone}</span>
                </div>
                <div className="contact-item">
                  <FaLocationArrow className="contact-icon text-danger" />
                  <span className="contact-text">{location}</span>
                </div>
              </div>
            </div>
          );
        }) : (
          <div className="text-center py-3 text-muted">
            <FaIdCard size={24} className="mb-2" />
            <p className="mb-0">No members available</p>
          </div>
        )}
      </Card.Body>
    </Card>
  );
}

// ---------------------- MAIN COMPONENT ----------------------
export default function ERTOverview({ ertStatus = {} }) {
  const [filterZone, setFilterZone] = useState(null);
  const [showAllMembers, setShowAllMembers] = useState(false);

  const allMembers = useMemo(() => {
    const list = [];
    Object.entries(ertStatus || {}).forEach(([role, members]) => {
      (members || []).forEach(m => list.push({ role, ...m }));
    });
    return list;
  }, [ertStatus]);

  // ---- Floor Counts: count only present members, by their live location if available (fallback to role base)
  const floorCounts = useMemo(() => {
    const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 };

    allMembers.forEach(m => {
      if (!isPresent(m)) return;

      const location = getLiveLocation(m) || getBaseLocation(m) || baseLocationByRole[m.role] || '';
      const floor = detectFloor(location);
      if (floor) counts[floor]++;
    });

    return counts;
  }, [allMembers]);

  // ---- ERT Team Leaders (custom order + filter by live location when filtering)
  const ertLeaders = useMemo(() => {
    const raw = (ertStatus['ERT Team Leader'] || []).map(m => ({ role: 'ERT Team Leader', ...m }));

    const filtered = filterZone
      ? raw.filter(m => isPresent(m) && matchesFilterZone(getLiveLocation(m), filterZone))
      : raw;

    const order = [
      'Vishal Chaudhari',
      'Vinit Kumar',
      'Sonu Pandey',
      'Sagar Jamdade',
      'Rangare, Bhupendra Babu',
      'Bhoyane, Satish Pandurang'
    ];

    return filtered.sort((a, b) => {
      const pa = isPresent(a) ? 1 : 0;
      const pb = isPresent(b) ? 1 : 0;
      if (pa !== pb) return pb - pa; // present first

      const ia = order.indexOf(a.name);
      const ib = order.indexOf(b.name);
      if (ia !== -1 || ib !== -1) {
        if (ia === -1) return 1;
        if (ib === -1) return -1;
        return ia - ib;
      }

      return (a.name || '').localeCompare(b.name || '');
    });
  }, [ertStatus, filterZone]);

  // ---- ERT Members (Available first; when filtering show only present whose live location matches)
  const ertMembers = useMemo(() => {
    const members = (ertStatus['ERT Team Members'] || []).map(m => ({
      role: 'ERT Team Members',
      name: m.Name || m.name,
      baseLocation: getBaseLocation(m),
      liveLocation: getLiveLocation(m),
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    const filtered = filterZone
      ? members.filter(m => isPresent(m) && matchesFilterZone(m.liveLocation || '', filterZone))
      : members;

    // present first, then alphabetical
    filtered.sort((a, b) => {
      const pa = isPresent(a) ? 1 : 0;
      const pb = isPresent(b) ? 1 : 0;
      if (pa !== pb) return pb - pa;
      return (a.name || '').localeCompare(b.name || '');
    });

    return showAllMembers ? filtered : filtered.slice(0, 6);
  }, [ertStatus, filterZone, showAllMembers]);

  // ---- First Aid Team
  const firstAidMembers = useMemo(() => {
    const members = (ertStatus['First Aid Team'] || []).map(m => ({
      role: 'First Aid Team',
      name: m.Name || m.name,
      baseLocation: getBaseLocation(m),
      liveLocation: getLiveLocation(m),
      email: m.Email || m.email,
      phone: m.Phone || m.phone,
      present: m.present
    }));

    return filterZone
      ? members.filter(m => isPresent(m) && matchesFilterZone(m.liveLocation || '', filterZone))
      : members;
  }, [ertStatus, filterZone]);

  const floorIcons = {
    'Podium Floor': <FaHome className="text-danger" />,
    '2nd Floor': <FaBuilding className="text-info" />,
    'Tower B': <FaLayerGroup className="text-success" />
  };

  // UI render
  return (
    <div className="ert-dashboard">
      <Container fluid className="py-4">
        {/* ---- Stats Cards ---- */}
        <Row className="mb-4">
          <Col xs={12} md={3} className="mb-3">
            <Card className="stats-card total-members">
              <Card.Body className="p-3">
                <div className="d-flex align-items-center">
                  <div className="stats-icon me-3">
                    <FaUsers size={24} />
                  </div>
                  <div>
                    <h6 className="stats-label">Total Members</h6>
                    <h3 className="stats-value mb-0">
                      {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
                    </h3>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>

          {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
            const count = floorCounts[floor] || 0;
            const isSelected = filterZone === floor;
            return (
              <Col key={floor} xs={12} md={3} className="mb-3">
                <Card
                  className={`stats-card location-card ${isSelected ? 'active' : ''}`}
                  onClick={() => setFilterZone(prev => (prev === floor ? null : floor))}
                >
                  <Card.Body className="p-3">
                    <div className="d-flex align-items-center">
                      <div className="stats-icon me-3">{floorIcons[floor]}</div>
                      <div>
                        <h6 className="stats-label">{floor}</h6>
                        <h3 className="stats-value mb-0">{count}</h3>
                      </div>
                    </div>
                  </Card.Body>
                </Card>
              </Col>
            );
          })}
        </Row>

        {/* ---- Three-column layout ---- */}
        <Row className="align-items-stretch">
          {/* LEFT COLUMN */}
          <Col xs={12} lg={4} className="mb-4">
            {firstColumnRoles.map(role => renderRoleCard(role, ertStatus[role] || [], filterZone))}
          </Col>

          {/* MIDDLE COLUMN */}
          <Col xs={12} lg={4} className="mb-4">
            <Card className="dashboard-card h-100">
              <Card.Header className="dashboard-card-header d-flex align-items-center">
                <span className="role-icon me-2">{roleIcons['ERT Team Leader']}</span>
                <span className="role-title">ERT Team Leader</span>
                <Badge bg="outline-light" className="ms-2">{ertLeaders.length}</Badge>
              </Card.Header>
              <Card.Body className="p-3">
                {ertLeaders.length > 0 ? ertLeaders.map((m, i) => {
                  const location = isPresent(m) ? (getLiveLocation(m) || 'Unknown Zone') : (getBaseLocation(m) || baseLocationByRole['ERT Team Leader']);
                  return (
                    <div key={i} className="member-item pb-1 mb-1">
                      <div className="d-flex justify-content-between align-items-start mb-2">
                        <div className="d-flex align-items-center">
                          <div className={`member-photo-container ${isPresent(m) ? 'present-border' : 'away-border'}`}>
                            <img src={getPhotoSrc(m)} alt={m.name} className="member-photo" />
                            <div className={`status-indicator ${isPresent(m) ? 'present' : 'away'}`} />
                          </div>
                          <div className="ms-3">
                            <h6 className="mb-0 member-name">{m.name}</h6>
                          </div>
                        </div>
                        <Badge bg={isPresent(m) ? 'success' : 'danger'}>{isPresent(m) ? 'Available' : 'Away'}</Badge>
                      </div>

                      <div className="member-contact-info">
                        <div className="contact-item">
                          <FaEnvelope className="contact-icon text-primary" />
                          <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                        </div>
                        <div className="contact-item">
                          <FaPhone className="contact-icon text-success" />
                          <span className="contact-text">{m.phone}</span>
                        </div>
                        <div className="contact-item">
                          <FaLocationArrow className="contact-icon text-danger" />
                          <span className="contact-text">{location}</span>
                        </div>
                      </div>
                    </div>
                  );
                }) : (
                  <div className="text-center py-4 text-muted">
                    <FaUserShield size={28} className="mb-2" />
                    <p className="mb-0">No Team Leaders Available</p>
                  </div>
                )}
              </Card.Body>
            </Card>
          </Col>

          {/* RIGHT COLUMN */}
          <Col xs={12} lg={4} className="mb-4">
            {/* ERT Team Members */}
            <Card className="dashboard-card h-100 mb-0">
              <Card.Header className="dashboard-card-header d-flex align-items-center">
                <span className="role-icon me-2">{roleIcons['ERT Team Members']}</span>
                <span className="role-title">ERT Team Members</span>
                <Badge bg="outline-light" className="ms-2">{ertMembers.length}</Badge>
              </Card.Header>
              <Card.Body className="p-3">
                {ertMembers.map((m, i) => {
                  const location = isPresent(m) ? (m.liveLocation || 'Unknown Zone') : (m.baseLocation || '');
                  return (
                    <div key={i} className="member-item pb-1 mb-1">
                      <div className="d-flex justify-content-between align-items-start mb-2">
                        <div className="d-flex align-items-center">
                          <div className={`member-photo-container ${isPresent(m) ? 'present-border' : 'away-border'}`}>
                            <img src={getPhotoSrc(m)} alt={m.name} className="member-photo" />
                            <div className={`status-indicator ${isPresent(m) ? 'present' : 'away'}`} />
                          </div>
                          <div className="ms-3">
                            <h6 className="mb-0 member-name">{m.name}</h6>
                          </div>
                        </div>
                        <Badge bg={isPresent(m) ? 'success' : 'danger'}>{isPresent(m) ? 'Available' : 'Away'}</Badge>
                      </div>

                      <div className="member-contact-info">
                        <div className="contact-item">
                          <FaEnvelope className="contact-icon text-primary" />
                          <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                        </div>
                        <div className="contact-item">
                          <FaPhone className="contact-icon text-success" />
                          <span className="contact-text">{m.phone}</span>
                        </div>
                        <div className="contact-item">
                          <FaLocationArrow className="contact-icon text-danger" />
                          <span className="contact-text">{location}</span>
                        </div>
                      </div>
                    </div>
                  );
                })}

                {!ertMembers.length &&
                  <div className="text-center py-4 text-muted">
                    <FaUsers size={28} className="mb-2" />
                    <p className="mb-0">No Team Members Available</p>
                  </div>
                }

                <div className="text-center mt-3">
                  <Button
                    variant="outline-primary"
                    className="d-flex align-items-center mx-auto"
                    onClick={() => setShowAllMembers(prev => !prev)}
                  >
                    {showAllMembers ? (
                      <>
                        <FaEyeSlash className="me-2" /> Show Less
                      </>
                    ) : (
                      <>
                        <FaEye className="me-2" /> Show More
                      </>
                    )}
                  </Button>
                </div>
              </Card.Body>
            </Card>

            {/* First Aid Team (not shown as card; can use renderRoleCard if wanted) */}
          </Col>
        </Row>
      </Container>
    </div>
  );
}
