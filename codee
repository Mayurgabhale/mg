// --- fetch rejections and keep only today's (Denver) records ---
useEffect(() => {
  let mounted = true;

  async function loadRejectionsTodayOnly() {
    setRejectionsLoading(true);
    try {
      const res = await fetch('/api/rejections');
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const payload = await res.json();

      // today in Denver (YYYY-MM-DD)
      const todayDenver = new Date().toLocaleDateString('en-CA', {
        timeZone: 'America/Denver',
      });

      let detailsToday = [];
      const summaryMap = {};

      if (Array.isArray(payload.dateWise)) {
        // use backend summary if available
        const dayObj = payload.dateWise.find(d => d.date === todayDenver);
        if (dayObj && Array.isArray(dayObj.floors)) {
          dayObj.floors.forEach(f => {
            const norm = normalizeFloorName(f.floor || '') || 'Unknown';
            summaryMap[norm] = Number(f.rejectionCount || 0);
          });
        }

        // filter today's details for modal content
        if (Array.isArray(payload.details)) {
          detailsToday = payload.details.filter(d => {
            const raw = d.LocaleMessageTime || d.DateOnly;
            if (!raw) return false;
            try {
              const dt = new Date(raw);
              const dtStr = dt.toLocaleDateString('en-CA', {
                timeZone: 'America/Denver',
              });
              return dtStr === todayDenver;
            } catch (e) {
              return String(raw).slice(0, 10) === todayDenver;
            }
          });
        }
      } else if (Array.isArray(payload.details)) {
        // fallback: compute summary from details
        detailsToday = payload.details.filter(d => {
          const raw = d.LocaleMessageTime || d.DateOnly;
          if (!raw) return false;
          try {
            const dt = new Date(raw);
            const dtStr = dt.toLocaleDateString('en-CA', {
              timeZone: 'America/Denver',
            });
            return dtStr === todayDenver;
          } catch (e) {
            return String(raw).slice(0, 10) === todayDenver;
          }
        });

        detailsToday.forEach(d => {
          const derived = deriveFloorFromRecord(d) || 'Unknown';
          const norm = normalizeFloorName(derived) || 'Unknown';
          summaryMap[norm] = (summaryMap[norm] || 0) + 1;
        });
      }

      // always group details by normalized floor
      const detailsByFloor = {};
      detailsToday.forEach(d => {
        const derived = deriveFloorFromRecord(d) || 'Unknown';
        const norm = normalizeFloorName(derived) || 'Unknown';
        detailsByFloor[norm] = detailsByFloor[norm] || [];
        detailsByFloor[norm].push(d);
      });

      if (!mounted) return;
      setRejectionSummaryMap(summaryMap);
      setRejectionDetails(detailsByFloor);
      setRejectionAllDetailsToday(detailsToday);
    } catch (err) {
      console.error('Failed to load rejections:', err);
      if (mounted) {
        setRejectionSummaryMap({});
        setRejectionDetails({});
        setRejectionAllDetailsToday([]);
      }
    } finally {
      if (mounted) setRejectionsLoading(false);
    }
  }

  loadRejectionsTodayOnly();
  return () => {
    mounted = false;
  };
}, []);