const { DateTime } = require("luxon");
const { fetchNewEvents } = require("../db/queries");
const { getPool } = require("../db/pool");

// âœ… Incremental buildOccupancy
async function buildOccupancy(newEvents, occupancy = null) {
  // if no previous occupancy, initialize
  if (!occupancy) {
    occupancy = {
      asOf: null,
      personnelSummary: { total: 0, byType: {} },
      personnelBreakdown: {},
      floorBreakdown: {},
      zoneBreakdown: {},
      details: {},
      ertStatus: {}
    };
  }

  for (const e of newEvents) {
    const zone = e.Zone || "Unknown";
    const floor = e.Floor || "Unknown";
    const type = e.PersonnelType || "Unknown";
    const guid = e.GUID;

    // increment totals
    occupancy.personnelSummary.total++;
    occupancy.personnelSummary.byType[type] =
      (occupancy.personnelSummary.byType[type] || 0) + 1;

    occupancy.personnelBreakdown[type] =
      (occupancy.personnelBreakdown[type] || 0) + 1;

    occupancy.floorBreakdown[floor] =
      (occupancy.floorBreakdown[floor] || 0) + 1;

    occupancy.zoneBreakdown[zone] =
      (occupancy.zoneBreakdown[zone] || 0) + 1;

    // store detail
    if (!occupancy.details[zone]) occupancy.details[zone] = [];
    occupancy.details[zone].push(e);

    // example: ERT status
    if (type === "ERT") {
      occupancy.ertStatus[guid] = {
        name: e.PersonnelName,
        zone,
        floor,
        inBuilding: true
      };
    }
  }

  occupancy.asOf = DateTime.now().setZone("Asia/Kolkata").toISO();
  return occupancy;
}

// âœ… Visited Today stats
function buildVisitedToday(events) {
  const unique = new Map();
  for (const e of events) {
    if (!unique.has(e.GUID)) {
      unique.set(e.GUID, e.PersonnelType);
    }
  }

  const byType = {};
  for (const type of unique.values()) {
    byType[type] = (byType[type] || 0) + 1;
  }

  return { total: unique.size, byType };
}

// âœ… Main SSE Controller
exports.getLiveOccupancy = async (req, res) => {
  try {
    await getPool();

    res.writeHead(200, {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      Connection: "keep-alive"
    });
    res.write("\n");

    let lastSeen = new Date();
    let events = [];
    let occupancy = null;
    let isPushing = false;

    const push = async () => {
      if (isPushing) return;
      isPushing = true;

      try {
        // fetch new events since lastSeen
        const fresh = await fetchNewEvents(lastSeen);

        if (fresh.length) {
          lastSeen = fresh[fresh.length - 1].LocaleMessageTime || new Date();
          events.push(...fresh);
          occupancy = await buildOccupancy(fresh, occupancy);
        }

        // ðŸ”Ž Only keep today's events
        const todayKolkata = DateTime.now()
          .setZone("Asia/Kolkata")
          .toFormat("yyyy-LL-dd");
        events = events.filter(e => e.Dateonly === todayKolkata);

        // build "visited today" stats
        const todayStats = buildVisitedToday(events);
        occupancy.totalVisitedToday = todayStats.total;
        occupancy.visitedToday = todayStats;

        // âš¡ Slim payload (summary + breakdowns)
        const slimPayload = {
          asOf: occupancy.asOf,
          personnelSummary: occupancy.personnelSummary,
          personnelBreakdown: occupancy.personnelBreakdown,
          floorBreakdown: occupancy.floorBreakdown,
          zoneBreakdown: occupancy.zoneBreakdown,
          totalVisitedToday: occupancy.totalVisitedToday,
          visitedToday: occupancy.visitedToday,
          ertStatus: occupancy.ertStatus
        };

        // stream to client
        const sid = Date.now();
        res.write(`id: ${sid}\n`);
        res.write(`data: ${JSON.stringify(slimPayload)}\n\n`);

        if (typeof res.flush === "function") res.flush();
      } catch (err) {
        console.error("Live occupancy push error:", err);
      } finally {
        isPushing = false;
      }
    };

    // initial push
    await push();

    // update every 5s (instead of 2s)
    const timer = setInterval(push, 5000);
    req.on("close", () => clearInterval(timer));
  } catch (err) {
    console.error("Live occupancy SSE error:", err);
    if (!res.headersSent) {
      res.status(500).json({ error: "Internal Server Error" });
    }
  }
};