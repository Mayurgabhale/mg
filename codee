if (current === 'Offline' || downCount > 15) {
    // include remark so we can show tooltips for "Not accessible"
    list.push({ ip, safe, name, category, region, city, current, hist, downCount, remark: dev.remark || '' });
}












.......




// show modern tooltip for devices marked "Not accessible"
const remarkText = (dev.remark || '').toString().trim();
if (remarkText && /not\s+access/i.test(remarkText)) {
    row.classList.add('row-not-accessible');

    // ensure row can position absolute children
    if (getComputedStyle(row).position === 'static') {
        row.style.position = 'relative';
    }

    const tooltip = document.createElement('div');
    tooltip.className = 'device-access-tooltip';
    tooltip.textContent = 'Due to policy, this camera is Not accessible';

    // inline styles so no external CSS edit required
    tooltip.style.position = 'absolute';
    tooltip.style.bottom = '100%';
    tooltip.style.left = '12px';
    tooltip.style.padding = '8px 10px';
    tooltip.style.background = '#e63946'; // modern red
    tooltip.style.color = '#fff';
    tooltip.style.borderRadius = '6px';
    tooltip.style.fontSize = '13px';
    tooltip.style.fontWeight = '600';
    tooltip.style.whiteSpace = 'nowrap';
    tooltip.style.pointerEvents = 'none';
    tooltip.style.opacity = '0';
    tooltip.style.transform = 'translateY(6px)';
    tooltip.style.transition = 'opacity 0.18s ease, transform 0.18s ease';
    tooltip.style.zIndex = '9999';
    tooltip.style.boxShadow = '0 6px 14px rgba(0,0,0,0.18)';

    row.appendChild(tooltip);

    row.addEventListener('mouseenter', () => {
        tooltip.style.opacity = '1';
        tooltip.style.transform = 'translateY(0)';
    });
    row.addEventListener('mouseleave', () => {
        tooltip.style.opacity = '0';
        tooltip.style.transform = 'translateY(6px)';
    });

    // accessible fallback
    row.title = tooltip.textContent;
}
