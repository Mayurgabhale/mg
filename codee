// add these imports at top of Header.jsx (if not present)
import TextField from '@mui/material/TextField';
import Stack from '@mui/material/Stack';
import Icon from '@mui/material/Icon';

// ... inside Header() return, replace Right: Selector + Flag Box with:

{/* Right: Partition selector + date/time */}
<Box display="flex" alignItems="center" gap={1}>
  {/* partition select */}
  <Select
    size="small"
    value={currentPartition}
    displayEmpty
    onChange={e => handlePartitionChange(e.target.value)}
    sx={{ bgcolor: 'background.paper', mr: 1, minWidth: 150 }}
  >
    <MenuItem value="">— Select Partition —</MenuItem>
    {partitionList.map(p => (
      <MenuItem key={p} value={p}>
        {displayNameMap[p] || p}
      </MenuItem>
    ))}
  </Select>

  {/* date + time inputs */}
  <Stack direction="row" spacing={1} alignItems="center" sx={{ mr: 1 }}>
    {/* date */}
    <TextField
      size="small"
      type="date"
      InputLabelProps={{ shrink: true }}
      value={(() => {
        // prefer URL date if present, else today in yyyy-mm-dd
        const params = new URLSearchParams(window.location.search);
        return params.get('date') || new Date().toISOString().slice(0,10);
      })()}
      onChange={e => {
        const params = new URLSearchParams(window.location.search);
        if (e.target.value) params.set('date', e.target.value);
        else params.delete('date');
        // keep time if present
        const time = params.get('time') || '';
        // navigate retaining current partition path
        const base = currentPartition ? `/partition/${encodeURIComponent(currentPartition)}` : '/';
        navigate(`${base}${window.location.pathname.includes('history') ? '/history' : ''}?${params.toString()}`);
      }}
      sx={{ bgcolor: 'background.paper' }}
    />
    {/* time */}
    <TextField
      size="small"
      type="time"
      InputLabelProps={{ shrink: true }}
      inputProps={{ step: 1 }} // allow seconds if user types them
      value={(() => {
        const params = new URLSearchParams(window.location.search);
        return params.get('time') || new Date().toTimeString().slice(0,5);
      })()}
      onChange={e => {
        const params = new URLSearchParams(window.location.search);
        if (e.target.value) params.set('time', e.target.value);
        else params.delete('time');
        const base = currentPartition ? `/partition/${encodeURIComponent(currentPartition)}` : '/';
        navigate(`${base}${window.location.pathname.includes('history') ? '/history' : ''}?${params.toString()}`);
      }}
      sx={{ width: 130, bgcolor: 'background.paper' }}
    />
    {/* clear button */}
    <IconButton
      size="small"
      color="inherit"
      title="Clear date/time (return to live)"
      onClick={() => {
        const params = new URLSearchParams(window.location.search);
        params.delete('date');
        params.delete('time');
        const base = currentPartition ? `/partition/${encodeURIComponent(currentPartition)}` : '/';
        navigate(base + (suffixSegments.length ? `/${suffixSegments.join('/')}` : '') + (params.toString() ? `?${params.toString()}` : ''));
      }}
    >
      <Icon>clear</Icon>
    </IconButton>
  </Stack>

  {/* Flag */}
  <Box component="img" src={selectedFlag} alt="Flag" sx={{ height: 50 }} />
</Box>