PS C:\Users\W0024618\Desktop\swipeData\employee-ai-insights> npm start

> employee-ai-insights@1.0.0 start
> node server.js

node:internal/modules/cjs/loader:1404
  throw err;
  ^

Error: Cannot find module '('../config/db'
Require stack:
- C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\denverRejection.js
- C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\routes\occupancyDenverRoutes.js
- C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\server.js
    at Function._resolveFilename (node:internal/modules/cjs/loader:1401:15)
    at defaultResolveImpl (node:internal/modules/cjs/loader:1057:19)
    at resolveForCJSWithHooks (node:internal/modules/cjs/loader:1062:22)
    at Function._load (node:internal/modules/cjs/loader:1211:37)
    at TracingChannel.traceSync (node:diagnostics_channel:322:14)
    at wrapModuleLoad (node:internal/modules/cjs/loader:235:24)
    at Module.require (node:internal/modules/cjs/loader:1487:12)
    at require (node:internal/modules/helpers:135:16)
    at Object.<anonymous> (C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\denverRejection.js:3:18)
    at Module._compile (node:internal/modules/cjs/loader:1730:14) {
  code: 'MODULE_NOT_FOUND',
  requireStack: [
    'C:\\Users\\W0024618\\Desktop\\swipeData\\employee-ai-insights\\controllers\\denverRejection.js',
    'C:\\Users\\W0024618\\Desktop\\swipeData\\employee-ai-insights\\routes\\occupancyDenverRoutes.js',
    'C:\\Users\\W0024618\\Desktop\\swipeData\\employee-ai-insights\\server.js'
  ]
}

Node.js v22.17.0
PS C:\Users\W0024618\Desktop\swipeData\employee-ai-insights> 


// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\controllers\denverRejection.js
const sql = require("mssql");
const dbConfig = require("('../config/db"); // adjust path to your DB config

// Get rejection counts grouped by floor
async function getRejections(req, res) {
  try {
    let pool = await sql.connect(dbConfig);

    const result = await pool.request().query(`
      WITH CombinedQuery AS (
        SELECT
          DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
          t1.ObjectName2 AS Door,
          t1.PartitionName2 AS PartitionName2,
          t5_rej.value AS RejectionType
        FROM [ACVSUJournal_00010029].[dbo].[ACVSUJournalLog] AS t1
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxml] AS t_xml
          ON t1.XmlGUID = t_xml.GUID
        LEFT JOIN [ACVSUJournal_00010029].[dbo].[ACVSUJournalLogxmlShred] AS t5_rej
          ON t1.XmlGUID = t5_rej.GUID AND t5_rej.Name = 'RejectCode'
        WHERE
          t1.MessageType = 'CardRejected'
          AND t1.PartitionName2 IN (${parts})
          AND CONVERT(DATE,
               DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)
              ) >= DATEADD(DAY, -7, CONVERT(DATE, GETDATE()))
      )
      SELECT
        PartitionName2 AS floor,
        COUNT(*) AS rejectionCount
      FROM CombinedQuery
      GROUP BY PartitionName2
      ORDER BY floor;
    `);

    res.json(result.recordset);
  } catch (err) {
    console.error("Error fetching rejection data:", err);
    res.status(500).send("Server Error");
  }
}

module.exports = { getRejections };





// routes/occupancyDenverRoutes.js
const express = require('express');
const router = express.Router();

const { getDenverLiveOccupancy, getDenverSnapshotAtDateTime } = require('../controllers/denverLiveOccupancyController');
const { getDenverInOutInconsistency } = require('../controllers/denverInOutInconsistencyController');

const { getRejections } = require("../controllers/denverRejection");

// Denver live occupancy
router.get('/live-occupancy-denver', getDenverLiveOccupancy);

// Denver in/out inconsistency trends
router.get('/inout-inconsistency-denver', getDenverInOutInconsistency);

// Denver snapshot endpoint
router.get('/occupancy-at-time-denver', getDenverSnapshotAtDateTime);


router.get("/rejections", getRejections);


module.exports = router;






// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\server.js
// server.js
const express = require('express');
const cors    = require('cors');
const path    = require('path');


const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());


// --- middleware to disable proxy buffering for SSE endpoints ---
const noBuffering = (req, res, next) => {
  // Nginx or other proxies honor this header to stream chunks immediately
  res.set('X-Accel-Buffering', 'no');
  next();
};


// simple sanity-check
app.get('/ping', (req, res) => res.send('pong'));




app.use('/api', employeeRoutes);

// Pune SSE (live occupancy)
app.use(
  '/api',
  noBuffering,
  liveOccupancyRoutes
);

// Denver SSE (live occupancy)

app.use(
  '/api',
  noBuffering,
  occupancyDenverRoutes
);



// debug: list registered endpoints
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\nðŸ“‹ Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        // .keys(layer.route.methods)
        // .map(m => m.toUpperCase())
        // .join(',');

        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');

      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
}

// serve React build (if any)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));





