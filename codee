in server.js file  this is not 

// New snapshot endpoint
router.get('/occupancy-at-time-pune', getPuneSnapshotAtDateTime); this and 
this 
// Denver in/out inconsistency trends
router.get('/inout-inconsistency-denver', getDenverInOutInconsistency);

// Denver snapshot endpoint
router.get('/occupancy-at-time-denver', getDenverSnapshotAtDateTime);


router.get("/rejections", getRejections);
********************************************************

// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\server.js
// server.js
const express = require('express');
const cors    = require('cors');
const path    = require('path');


const employeeRoutes        = require('./routes/employeeRoutes');
const liveOccupancyRoutes   = require('./routes/liveOccupancyRoutes');
const occupancyDenverRoutes = require('./routes/occupancyDenverRoutes');

const app = express();
app.use(cors());
app.use(express.json());


// --- middleware to disable proxy buffering for SSE endpoints ---
const noBuffering = (req, res, next) => {
  // Nginx or other proxies honor this header to stream chunks immediately
  res.set('X-Accel-Buffering', 'no');
  next();
};


// simple sanity-check
app.get('/ping', (req, res) => res.send('pong'));




app.use('/api', employeeRoutes);

// Pune SSE (live occupancy)
app.use(
  '/api',
  noBuffering,
  liveOccupancyRoutes
);

// Denver SSE (live occupancy)

app.use(
  '/api',
  noBuffering,
  occupancyDenverRoutes
);



// debug: list registered endpoints
if (app._router && Array.isArray(app._router.stack)) {
  console.log('\nðŸ“‹ Registered endpoints:');
  app._router.stack.forEach(layer => {
    if (layer.route && layer.route.path) {
      const methods = Object
        // .keys(layer.route.methods)
        // .map(m => m.toUpperCase())
        // .join(',');

        .keys(layer.route.methods)
        .map(m => m.toUpperCase())
        .join(',');

      console.log(`  ${methods}\t${layer.route.path}`);
    }
  });
}

// serve React build (if any)
const buildPath = path.join(__dirname, '..', 'client', 'build');
app.use(express.static(buildPath));

// health check
app.get('/health', (req, res) => res.send('OK'));

const PORT = process.env.PORT || 5001;
app.listen(PORT, () => console.log(`Server running at http://localhost:${PORT}`));

_____________________________________________________________

// C:\Users\W0024618\Desktop\swipeData\employee-ai-insights\routes\liveOccupancyRoutes.js
const express = require('express');
const router  = express.Router();
const {
  getLiveOccupancy,
 
 getPuneSnapshotAtDateTime
} = require('../controllers/liveOccupancyController');

router.get('/live-occupancy', getLiveOccupancy);


// New snapshot endpoint
router.get('/occupancy-at-time-pune', getPuneSnapshotAtDateTime);

module.exports = router;


// routes/occupancyDenverRoutes.js
const express = require('express');
const router = express.Router();

const { getDenverLiveOccupancy, getDenverSnapshotAtDateTime } = require('../controllers/denverLiveOccupancyController');
const { getDenverInOutInconsistency } = require('../controllers/denverInOutInconsistencyController');

const { getRejections } = require("../controllers/denverRejection");

// Denver live occupancy
router.get('/live-occupancy-denver', getDenverLiveOccupancy);

// Denver in/out inconsistency trends
router.get('/inout-inconsistency-denver', getDenverInOutInconsistency);

// Denver snapshot endpoint
router.get('/occupancy-at-time-denver', getDenverSnapshotAtDateTime);


router.get("/rejections", getRejections);


module.exports = router;





