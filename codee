// src/components/FloorInOutTable.jsx
import React from 'react';
import { Card, Table, OverlayTrigger, Tooltip } from 'react-bootstrap';

// Accent palette (re-used from FloorOccupancyChart)
const ROW_COLORS = [
  '#FFC72C',
  '#C9A9A6',
  '#FFE680',
  '#FFF5EE',
  '#FFD11A',
  '#96DED1',
  '#FFEB99'
];

// Security officer IDs (canonical EmployeeIDs)
const SECURITY_OFFICERS = [
  'W0003901','W0019956','W0023386','W0025278','W0025490',
  'W0025492','W0025493','W0025639','W0026149','W0026151',
  'W0026208','W0026455','W0022449'
];

// helper: normalize any id/string for robust comparison
const normalizeId = v => String(v || '').trim().toUpperCase();

export default function FloorInOutTable({ data = [], floorBreakdown = [] }) {
  // build fast lookup set for security employeeIDs
  const securitySet = new Set(SECURITY_OFFICERS.map(normalizeId));

  // Build map: PersonGUID/CardNumber -> EmployeeID (normalized)
  const idToEmployee = new Map();
  if (Array.isArray(floorBreakdown)) {
    floorBreakdown.forEach(fb => {
      (fb.occupants || []).forEach(o => {
        const guid = normalizeId(o.PersonGUID || o.personGUID || o.PersonGuid);
        const emp = normalizeId(o.EmployeeID || o.EmployeeId || o.employeeID || o.Employee);
        const card = normalizeId(o.CardNumber || o.cardNumber || o.Card);
        // map all known keys to the employee id (if available)
        if (guid) idToEmployee.set(guid, emp || '');
        if (card) idToEmployee.set(card, emp || '');
        // also map employee id to itself for consistent lookups
        if (emp) idToEmployee.set(emp, emp);
      });
    });
  }

  // Defensive: if `data` items come from a different shape (e.g. floorBreakdown passed accidentally),
  // try to support both floorInOutSummary items and floorBreakdown-like items.
  const normalizedRows = (Array.isArray(data) ? data : []).map(item => {
    // possible shapes
    const floor = item.floor || item.name || item.floorName || 'Unknown Floor';
    const inSwipes = Number(item.inSwipes || item.in_swipes || 0);
    const outSwipes = Number(item.outSwipes || item.out_swipes || 0);
    const inOnlyPersons = Array.isArray(item.inOnlyPersons)
      ? item.inOnlyPersons
      : Array.isArray(item.in_only_persons)
        ? item.in_only_persons
        : [];

    // find security matches for this row
    const securityMatches = new Set();

    // 1) quick check: any id in inOnlyPersons directly matches a SECURITY employee id
    inOnlyPersons.forEach(rawId => {
      if (rawId == null) return;
      // sometimes the array might contain an object { PersonGUID: '...', EmployeeID: '...' }
      if (typeof rawId === 'object') {
        const objEmp = normalizeId(rawId.EmployeeID || rawId.employeeID || rawId.Employee);
        const objGuid = normalizeId(rawId.PersonGUID || rawId.personGUID || rawId.PersonGuid);
        if (objEmp && securitySet.has(objEmp)) securityMatches.add(objEmp);
        if (!objEmp && objGuid && idToEmployee.has(objGuid)) {
          const mapped = idToEmployee.get(objGuid);
          if (mapped && securitySet.has(mapped)) securityMatches.add(mapped);
        }
        return;
      }

      const nid = normalizeId(rawId);
      if (!nid) return;

      // direct employee-id match
      if (securitySet.has(nid)) {
        securityMatches.add(nid);
        return;
      }

      // if this id is actually a GUID or a card, map to EmployeeID via idToEmployee
      if (idToEmployee.has(nid)) {
        const mapped = idToEmployee.get(nid);
        if (mapped && securitySet.has(mapped)) securityMatches.add(mapped);
      }
    });

    // 2) As a fallback: inspect floorBreakdown occupants for this floor (if available)
    //    to find any occupant whose PersonGUID or CardNumber appears in inOnlyPersons, then map to EmployeeID.
    if (securityMatches.size === 0 && Array.isArray(floorBreakdown)) {
      const fb = floorBreakdown.find(f => normalizeId(f.floor) === normalizeId(floor));
      if (fb && Array.isArray(fb.occupants)) {
        fb.occupants.forEach(o => {
          const guid = normalizeId(o.PersonGUID || o.personGUID || o.PersonGuid);
          const emp = normalizeId(o.EmployeeID || o.EmployeeId || o.employeeID || o.Employee);
          const card = normalizeId(o.CardNumber || o.cardNumber || o.Card);

          // if any inOnlyPersons contains guid/card/employee, and emp is a security id, add it
          const anyMatch = inOnlyPersons.some(rawId => {
            const nid = normalizeId(rawId);
            return nid && (nid === guid || nid === card || nid === emp);
          });
          if (anyMatch && emp && securitySet.has(emp)) securityMatches.add(emp);
        });
      }
    }

    const securityList = Array.from(securityMatches).sort();
    const securityCount = securityList.length;

    return {
      floor,
      inSwipes,
      outSwipes,
      inconsistency: inSwipes - outSwipes,
      securityCount,
      securityList,
      rawInOnlyPersons: inOnlyPersons // keep for debugging if needed
    };
  });

  const sorted = normalizedRows.sort((a, b) => b.inconsistency - a.inconsistency);
  const top = sorted[0];

  return (
    <Card
      className="mb-4 shadow-sm"
      style={{
        background: '#1a1a1a',
        border: '2px solid #FFC72C'
      }}
    >
      <Card.Header
        className="text-center fw-bold"
        style={{ background: '#000', color: '#FFC72C' }}
      >
        Floor In vs Out Swipe Summary
      </Card.Header>

      <Card.Body
        style={{
          height: 450,
          padding: '1rem',
          overflowY: 'auto'
        }}
      >
        {top && (
          <div className="mb-3" style={{ color: '#fff', fontSize: '1rem' }}>
            Highest inconsistency:&nbsp;
            <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.inconsistency}</span>
            &nbsp;on&nbsp;
            <span style={{ color: '#FFC72C', fontWeight: 'bold' }}>{top.floor}</span>
          </div>
        )}

        <Table striped bordered hover size="sm" variant="dark" className="mb-0">
          <thead>
            <tr>
              <th>Floor</th>
              <th>In Swipes</th>
              <th>Out Swipes</th>
              <th>In &minus; Out</th>
              <th>Security</th>
              <th>Rejection</th>
            </tr>
          </thead>
          <tbody>
            {sorted.map((row, idx) => {
              const tooltipText =
                row.securityList && row.securityList.length > 0
                  ? row.securityList.join(', ')
                  : (row.rawInOnlyPersons && row.rawInOnlyPersons.length > 0
                      ? `No matching EmployeeID in SECURITY_OFFICERS. rawIDs: ${row.rawInOnlyPersons.map(x => normalizeId(x)).join(', ')}`
                      : 'No security present');

              return (
                <tr
                  key={row.floor}
                  style={{ backgroundColor: row.securityCount > 0 ? '#333300' : undefined }}
                >
                  <td style={{ color: '#fff' }}>{row.floor}</td>
                  <td style={{ color: ROW_COLORS[idx % ROW_COLORS.length] }}>{row.inSwipes}</td>
                  <td style={{ color: ROW_COLORS[(idx + 1) % ROW_COLORS.length] }}>{row.outSwipes}</td>
                  <td
                    style={{
                      color: ROW_COLORS[(idx + 2) % ROW_COLORS.length],
                      fontWeight: 'bold'
                    }}
                  >
                    {row.inconsistency}
                  </td>

                  {/* Security column with Bootstrap tooltip */}
                  <td style={{ color: row.securityCount > 0 ? '#FFC72C' : '#aaa', fontWeight: row.securityCount > 0 ? 'bold' : 'normal' }}>
                    <OverlayTrigger
                      placement="top"
                      overlay={<Tooltip id={`sec-tip-${row.floor}`}>{tooltipText}</Tooltip>}
                    >
                      <span style={{ cursor: 'default' }}>{row.securityCount}</span>
                    </OverlayTrigger>
                  </td>

                  <td></td>
                </tr>
              );
            })}
          </tbody>
        </Table>
      </Card.Body>
    </Card>
  );
}
