const getPhotoSrc = (member) => {
  if (!member) return DEFAULT_PHOTO;
  if (member.photo) return member.photo;

  const name = member.name || member.Name;
  if (name) return `/photos/${toSlug(name)}.png`;

  return DEFAULT_PHOTO;
};




...
Compiled with problems:
×
ERROR in ./src/components/ERTOverview.jsx
Module build failed (from ./node_modules/babel-loader/lib/index.js):
SyntaxError: C:\Users\W0024618\Desktop\swipeData\client\src\components\ERTOverview.jsx: Invalid regular expression flag. (2932:67)

  2930 | const getPhotoSrc = (member) => { if (!member) return DEFAULT_PHOTO; if (member.photo) return member.photo;
  2931 |
> 2932 | const name = member.name || member.Name; if (name) return /photos/${toSlug(name)}.png;
       |                                                                    ^
  2933 |
  2934 | return DEFAULT_PHOTO; };
  2935 |
    at constructor (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:360:19)
    at FlowParserMixin.raise (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:6613:19)
    at FlowParserMixin.readRegexp (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:6378:14)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11224:16)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:4770:20)
    at FlowParserMixin.parseExprSubscripts (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10992:23)
    at FlowParserMixin.parseUpdate (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10977:21)
    at FlowParserMixin.parseMaybeUnary (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10957:23)
    at FlowParserMixin.parseMaybeUnaryOrPrivate (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10810:61)
    at FlowParserMixin.parseExprOps (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10815:23)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10792:23)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10745:21)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3555:18)
    at FlowParserMixin.parseExpressionBase (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10698:23)
    at C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10694:39
    at FlowParserMixin.allowInAnd (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12329:16)
    at FlowParserMixin.parseExpression (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10694:17)
    at FlowParserMixin.parseReturnStatement (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13018:28)
    at FlowParserMixin.parseStatementContent (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12675:21)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12644:17)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2922:24)
    at FlowParserMixin.parseStatementOrSloppyAnnexBFunctionDeclaration (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12634:17)
    at FlowParserMixin.parseIfStatement (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13006:28)
    at FlowParserMixin.parseStatementContent (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12673:21)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12644:17)
    at FlowParserMixin.parseStatementLike (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2922:24)
    at FlowParserMixin.parseStatementListItem (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12624:17)
    at FlowParserMixin.parseBlockOrModuleBlockBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13192:61)
    at FlowParserMixin.parseBlockBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13185:10)
    at FlowParserMixin.parseBlock (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:13173:10)
    at FlowParserMixin.parseFunctionBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12018:24)
    at C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2896:63
    at FlowParserMixin.forwardNoArrowParamsConversionAt (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3072:16)
    at FlowParserMixin.parseFunctionBody (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:2896:12)
    at FlowParserMixin.parseArrowExpression (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11993:10)
    at FlowParserMixin.parseParenAndDistinguishExpression (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11603:12)
    at FlowParserMixin.parseParenAndDistinguishExpression (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3597:18)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:11242:23)
    at FlowParserMixin.parseExprAtom (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:4770:20)
    at FlowParserMixin.parseExprSubscripts (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10992:23)
    at FlowParserMixin.parseUpdate (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10977:21)
    at FlowParserMixin.parseMaybeUnary (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10957:23)
    at FlowParserMixin.parseMaybeUnaryOrPrivate (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10810:61)
    at FlowParserMixin.parseExprOps (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10815:23)
    at FlowParserMixin.parseMaybeConditional (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10792:23)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10745:21)
    at FlowParserMixin.parseMaybeAssign (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:3555:18)
    at C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10714:39
    at FlowParserMixin.allowInAnd (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:12329:16)
    at FlowParserMixin.parseMaybeAssignAllowIn (C:\Users\W0024618\Desktop\swipeData\client\node_modules\@babel\parser\lib\index.js:10714:17)
ERROR
[eslint] 
src\components\ERTOverview.jsx
  Line 2932:67:  Parsing error: Invalid regular expression flag. (2932:67)

import React, { useState, useMemo } from 'react'; import { Card, Row, Col, Badge, Button, Container } from 'react-bootstrap'; import { FaHome, FaBuilding, FaLayerGroup, FaEnvelope, FaPhone, FaMapMarkerAlt, FaUserTie, FaUserShield, FaUserNurse, FaUsers, FaEye, FaEyeSlash, FaUserCog, FaIdCard, FaLocationArrow } from 'react-icons/fa';

const firstColumnRoles = [ 'Site Head', 'BCM Team / Site Operations', 'HR', 'Incident Controller' ];

const roleIcons = { 'Site Head': <FaUserTie className="text-info" />, 'BCM Team / Site Operations': <FaUserShield className="text-teal" />, 'HR': <FaUserTie className="text-purple" />, 'Incident Controller': <FaUserShield className="text-warning" />, 'ERT Team Leader': <FaUserShield className="text-danger" />, 'ERT Team Members': <FaUsers className="text-primary" />, 'First Aid Team': <FaUserNurse className="text-orange" /> };

const baseLocationByRole = { 'Site Head': 'Podium Floor – Red Zone', 'HR': 'Podium Floor – Red Zone', 'Incident Controller': 'Podium Floor – Red Zone', 'First Aid Team': 'Podium Floor – Green Zone', 'ERT Team Leader': 'Podium Floor – Green Zone', 'BCM Team / Site Operations': 'Podium Floor – Red Zone' };

// ---- Photo helpers ---- const DEFAULT_PHOTO = '/photos/default.png';

const toSlug = (name = '') => name .toLowerCase() .trim() .replace(/[^a-z0-9]+/g, '') .replace(/^+|_+$/g, '');

const getPhotoSrc = (member) => { if (!member) return DEFAULT_PHOTO; if (member.photo) return member.photo;

const name = member.name || member.Name; if (name) return /photos/${toSlug(name)}.png;

return DEFAULT_PHOTO; };

function renderRoleCard(role, membersRaw, filterZone) { const members = filterZone ? membersRaw.filter(m => m.present && ( (m.zone && m.zone.includes(filterZone)) || baseLocationByRole[role].includes(filterZone) ) ) : membersRaw;

// Don't render the card if there are no members to show (when filtered) if (filterZone && members.length === 0) return null;

return ( <Card className="dashboard-card mb-2" key={role}> <Card.Header className="dashboard-card-header d-flex align-items-center"> <span className="role-icon me-2">{roleIcons[role] || <FaUserCog className="text-muted" />}</span> <span className="role-title">{role}</span> <Badge bg="outline-light" className="ms-2">{members.length}</Badge> </Card.Header> <Card.Body className="p-2"> {members.length > 0 ? members.map((m, i) => { const location = m.present ? (m.zone || 'Unknown Zone') : baseLocationByRole[role]; return ( <div key={i} className="member-item"> <div className="d-flex justify-content-between align-items-start mb-2"> <div className="d-flex align-items-center"> <div className={member-photo-container ${m.present ? 'present-border' : ''}}> <img src={getPhotoSrc(m)} alt={m.name || 'Member'} className="member-photo" onError={(e) => { e.currentTarget.onerror = null; e.currentTarget.src = DEFAULT_PHOTO; }} /> <div className={status-indicator ${m.present ? 'present' : 'away'}}></div> </div> <div className="ms-3"> <h6 className="mb-0 member-name">{m.name}</h6> <small className="text-muted">{m.designation || m.role}</small> </div> </div> <Badge bg={m.present ? 'success' : 'danger'} className="status-badge"> {m.present ? 'Available' : 'Away'} </Badge> </div>

<div className="member-contact-info">
            <div className="contact-item">
              <FaEnvelope className="contact-icon text-primary" />
              <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
            </div>
            <div className="contact-item">
              <FaPhone className="contact-icon text-success" />
              <span className="contact-text">{m.phone}</span>
            </div>
            <div className="contact-item">
              <FaLocationArrow className="contact-icon text-danger" />
              <span className="contact-text">{location}</span>
            </div>
          </div>
        </div>
      );
    }) : (
      <div className="text-center py-3 text-muted">
        <FaIdCard size={24} className="mb-2" />
        <p className="mb-0">No members available</p>
      </div>
    )}
  </Card.Body>
</Card>

); }

export default function ERTOverview({ ertStatus }) { const [filterZone, setFilterZone] = useState(null); const [showAllMembers, setShowAllMembers] = useState(false);

const allMembers = useMemo(() => { const list = []; Object.entries(ertStatus).forEach(([role, members]) => { members.forEach(m => list.push({ role, ...m })); }); return list; }, [ertStatus]);

const floorCounts = useMemo(() => { const counts = { 'Podium Floor': 0, '2nd Floor': 0, 'Tower B': 0 }; allMembers.forEach(m => { if (!m.present) return; const z = m.zone?.toLowerCase() || ''; if (z.includes('2nd')) counts['2nd Floor']++; else if (z.includes('tower b')) counts['Tower B']++; else counts['Podium Floor']++; }); return counts; }, [allMembers]);

const ertLeaders = useMemo(() => { const raw = (ertStatus['ERT Team Leader'] || []).map(m => ({ role: 'ERT Team Leader', ...m })); const filtered = filterZone ? raw.filter(m => m.present && ( (m.zone && m.zone.includes(filterZone)) || baseLocationByRole['ERT Team Leader'].includes(filterZone) ) ) : raw;

const order = ['Vishal Chaudhari', 'Vinit Kumar', 'Sonu Pandey', 'Sagar Jamdade', 'Rangare, Bhupendra Babu', 'Satish Bhoyane'];
return filtered.sort((a, b) => {
  const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
  if (pa !== pb) return pb - pa;
  const ia = order.indexOf(a.name), ib = order.indexOf(b.name);
  if (ia !== -1 || ib !== -1) {
    if (ia === -1) return 1;
    if (ib === -1) return -1;
    return ia - ib;
  }
  return a.name.localeCompare(b.name);
});

}, [ertStatus, filterZone]);

const ertMembers = useMemo(() => { const members = (ertStatus['ERT Team Members'] || []).map(m => ({ role: 'ERT Team Members', name: m.Name || m.name, baseLocation: m['Base Location'] || m.Floor || m.zone, liveLocation: m.zone, email: m.Email || m.email, phone: m.Phone || m.phone, present: m.present }));

const filtered = filterZone
  ? members.filter(m =>
    m.present && (
      (m.liveLocation && m.liveLocation.includes(filterZone)) ||
      m.baseLocation.includes(filterZone)
    )
  )
  : members;

filtered.sort((a, b) => {
  const pa = a.present ? 1 : 0, pb = b.present ? 1 : 0;
  if (pa !== pb) return pb - pa;
  return a.name.localeCompare(b.name);
});
return showAllMembers ? filtered : filtered.slice(0, 7);

}, [ertStatus, filterZone, showAllMembers]);

const firstAidMembers = useMemo(() => { const members = (ertStatus['First Aid Team'] || []).map(m => ({ role: 'First Aid Team', name: m.Name || m.name, baseLocation: m['Base Location'] || m.Floor || m.zone, liveLocation: m.zone, email: m.Email || m.email, phone: m.Phone || m.phone, present: m.present }));

const filtered = filterZone
  ? members.filter(m =>
    m.present && (
      (m.liveLocation && m.liveLocation.includes(filterZone)) ||
      baseLocationByRole['First Aid Team'].includes(filterZone)
    )
  )
  : members;

return filtered;

}, [ertStatus, filterZone]);

const floorIcons = { 'Podium Floor': <FaHome className="text-danger" />, '2nd Floor': <FaBuilding className="text-info" />, 'Tower B': <FaLayerGroup className="text-success" /> };

// Check if columns have members to display when filtered const leftColumnHasMembers = useMemo(() => { if (!filterZone) return true; return firstColumnRoles.some(role => { const members = ertStatus[role] || []; return members.some(m => m.present && ( (m.zone && m.zone.includes(filterZone)) || baseLocationByRole[role].includes(filterZone) ) ); }); }, [ertStatus, filterZone]);

const middleColumnHasMembers = useMemo(() => { if (!filterZone) return true; return ertLeaders.length > 0; }, [ertLeaders, filterZone]);

const rightColumnHasMembers = useMemo(() => { if (!filterZone) return true; return ertMembers.length > 0 || firstAidMembers.length > 0; }, [ertMembers, firstAidMembers, filterZone]);

return ( <div className="ert-dashboard">

<Container fluid className="py-4">
    {/* Stats Cards */}
    <Row className="mb-4">
      <Col xs={12} md={3} className="mb-3">
        <Card className="stats-card total-members">
          <Card.Body className="p-3">
            <div className="d-flex align-items-center">
              <div className="stats-icon me-3">
                <FaUsers size={24} />
              </div>
              <div>
                <h6 className="stats-label">Total Members</h6>
                <h3 className="stats-value mb-0">
                  {Object.values(floorCounts).reduce((sum, c) => sum + c, 0)}
                </h3>
              </div>
            </div>
          </Card.Body>
        </Card>
      </Col>

      {['Podium Floor', '2nd Floor', 'Tower B'].map(floor => {
        const count = floorCounts[floor] || 0;
        const isSelected = filterZone === floor;
        return (
          <Col key={floor} xs={12} md={3} className="mb-3">
            <Card 
              className={`stats-card location-card ${isSelected ? 'active' : ''}`}
              onClick={() => setFilterZone(prev => prev === floor ? null : floor)}
            >
              <Card.Body className="p-3">
                <div className="d-flex align-items-center">
                  <div className="stats-icon me-3">
                    {floorIcons[floor]}
                  </div>
                  <div>
                    <h6 className="stats-label">{floor}</h6>
                    <h3 className="stats-value mb-0">{count}</h3>
                  </div>
                </div>
              </Card.Body>
            </Card>
          </Col>
        );
      })}
    </Row>

    {/* Three-column layout */}
    <Row className="align-items-stretch equal-height-row">
      {/* LEFT COLUMN: Fixed roles - only show if has members when filtered */}
      {(filterZone ? leftColumnHasMembers : true) && (
        <Col xs={12} lg={4} className="mb-4 d-flex flex-column">
          <div className="column-inner">
            {firstColumnRoles.map(role => renderRoleCard(role, ertStatus[role] || [], filterZone))}
          </div>
        </Col>
      )}

      {/* MIDDLE COLUMN: ERT Team Leaders - only show if has members when filtered */}
      {(filterZone ? middleColumnHasMembers : true) && (
        <Col xs={12} lg={4} className="mb-4 d-flex flex-column">
          <div className="column-inner">
            <Card className="dashboard-card h-100">
              <Card.Header className="dashboard-card-header d-flex align-items-center">
                <span className="role-icon me-2">{roleIcons['ERT Team Leader']}</span>
                <span className="role-title">ERT Team Leader</span>
                <Badge bg="outline-light" className="ms-2">{ertLeaders.length}</Badge>
              </Card.Header>
              <Card.Body className="p-3">
                {ertLeaders.map((m, i) => {
                  const location = m.present ? m.zone || 'Unknown Zone' : baseLocationByRole['ERT Team Leader'];
                  return (
                    <div key={i} className="member-item">
                      <div className="d-flex justify-content-between align-items-start mb-2">
                        <div className="d-flex align-items-center">
                          <div className={`member-photo-container ${m.present ? 'present-border' : ''}`}>
                            <img
                              src={getPhotoSrc(m)}
                              alt={m.name || 'Member'}
                              className="member-photo"
                              onError={(e) => {
                                e.currentTarget.onerror = null;
                                e.currentTarget.src = DEFAULT_PHOTO;
                              }}
                            />
                            <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                          </div>
                          <div className="ms-3">
                            <h6 className="mb-0 member-name">{m.name}</h6>
                          </div>
                        </div>
                        <Badge bg={m.present ? 'success' : 'danger'} className="status-badge">
                          {m.present ? 'Available' : 'Away'}
                        </Badge>
                      </div>

                      <div className="member-contact-info">
                        <div className="contact-item">
                          <FaEnvelope className="contact-icon text-primary" />
                          <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                        </div>
                        <div className="contact-item">
                          <FaPhone className="contact-icon text-success" />
                          <span className="contact-text">{m.phone}</span>
                        </div>
                        <div className="contact-item">
                          <FaLocationArrow className="contact-icon text-danger" />
                          <span className="contact-text">{location}</span>
                        </div>
                      </div>
                    </div>
                  );
                })}
                {!ertLeaders.length && 
                  <div className="text-center py-4 text-muted">
                    <FaUserShield size={28} className="mb-2" />
                    <p className="mb-0">No Team Leaders Available</p>
                  </div>
                }
              </Card.Body>
            </Card>
          </div>
        </Col>
      )}

      {/* RIGHT COLUMN: ERT Team Members and First Aid Team - only show if has members when filtered */}
      {(filterZone ? rightColumnHasMembers : true) && (
        <Col xs={12} lg={4} className="mb-4 d-flex flex-column">
          <div className="column-inner">
            {/* ERT Team Members */}
            <Card className="dashboard-card h-100 mb-3">
              <Card.Header className="dashboard-card-header d-flex align-items-center">
                <span className="role-icon me-2">{roleIcons['ERT Team Members']}</span>
                <span className="role-title">ERT Team Members</span>
                <Badge bg="outline-light" className="ms-2">{ertMembers.length}</Badge>
              </Card.Header>
              
              <Card.Body className="p-3">
                {ertMembers.map((m, i) => {
                  const location = m.present ? m.liveLocation || 'Unknown Zone' : m.baseLocation;
                  return (
                    <div key={i} className="member-item">
                      <div className="d-flex justify-content-between align-items-start mb-2">
                        <div className="d-flex align-items-center">
                          <div className={`member-photo-container ${m.present ? 'present-border' : ''}`}>
                            <img
                              src={getPhotoSrc(m)}
                              alt={m.name || 'Member'}
                              className="member-photo"
                              onError={(e) => {
                                e.currentTarget.onerror = null;
                                e.currentTarget.src = DEFAULT_PHOTO;
                              }}
                            />
                            <div className={`status-indicator ${m.present ? 'present' : 'away'}`}></div>
                          </div>
                          <div className="ms-3">
                            <h6 className="mb-0 member-name">{m.name}</h6>
                          </div>
                        </div>
                        <Badge bg={m.present ? 'success' : 'danger'} className="status-badge">
                          {m.present ? 'Available' : 'Away'}
                        </Badge>
                      </div>

                      <div className="member-contact-info">
                        <div className="contact-item">
                          <FaEnvelope className="contact-icon text-primary" />
                          <a href={`mailto:${m.email}`} className="contact-link">{m.email}</a>
                        </div>
                        <div className="contact-item">
                          <FaPhone className="contact-icon text-success" />
                          <span className="contact-text">{m.phone}</span>
                        </div>
                        <div className="contact-item">
                          <FaLocationArrow className="contact-icon text-danger" />
                          <span className="contact-text">{location}</span>
                        </div>
                      </div>
                    </div>
                  );
                })}
                
                {!ertMembers.length && 
                  <div className="text-center py-4 text-muted">
                    <FaUsers size={28} className="mb-2" />
                    <p className="mb-0">No Team Members Available</p>
                  </div>
                }
                
                <div className="text-center mt-3">
                  <Button
                    variant="outline-primary"
                    className="d-flex align-items-center mx-auto"
                    onClick={() => setShowAllMembers(prev => !prev)}
                  >
                    {showAllMembers ? (
                      <>
                        <FaEyeSlash className="me-2" />
                        Show Less
                      </>
                    ) : (
                      <>
                        <FaEye className="me-2" />
                        Show More
                      </>
                    )}
                  </Button>
                </div>
              </Card.Body>
            </Card>

            {/* First Aid Team (optional) - re-using renderRoleCard would work if you want it back */}
            {/* {renderRoleCard('First Aid Team', ertStatus['First Aid Team'] || [], filterZone)} */}
          </div>
        </Col>
      )}
    </Row>
  </Container>

  <style jsx>{`
    .ert-dashboard {
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
      min-height: 100vh;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
    }

    /* Make the three columns match height automatically and allow internal scrolling when content overflows */
    .equal-height-row > .col {
      display: flex;
      flex-direction: column;
      min-height: 0; /* enables children to scroll */
    }

    .column-inner {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      flex: 1 1 auto;
      min-height: 0; /* allow flex child to shrink properly */
      overflow: auto; /* so individual columns can scroll if content grows beyond the tallest column */
      padding-bottom: 0.5rem; /* consistent bottom padding */
    }

    .dashboard-card {
      background: linear-gradient(135deg, rgba(30, 41, 59, 0.9) 0%, rgba(26, 35, 51, 0.9) 100%);
      border: 1px solid rgba(255, 255, 255, 0.08);
      border-radius: 16px;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    /* Ensure card body behaves well in flex layouts */
    .dashboard-card .card-body {
      flex: 1 1 auto;
      min-height: 0; /* required for proper scroll inside flex children */
    }

    .member-item {
      border-bottom: 1px solid rgba(148, 163, 184, 0.06);
      transition: all 0.2s ease;
      padding: 0.5rem 1.25rem; /* standardized padding */
      margin: 0 -1.25rem; /* matches the card padding so items line up */
    }

    .member-item:hover {
      background: rgba(255, 255, 255, 0.03);
    }

    .member-photo-container {
      position: relative;
      width: 60px;
      height: 60px;
      border-radius: 50%;
      overflow: hidden;
      flex-shrink: 0;
      border: 2px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      transition: all 0.18s ease;
      background: #0b1220;
    }

    /* Green border when member is Available */
    .member-photo-container.present-border {
      border-color: #10b981; /* Tailwind emerald-500 */
      box-shadow: 0 0 0 6px rgba(16,185,129,0.06);
    }

    .member-photo {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center top;
    }

    .status-indicator {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 16px;
      height: 16px;
      border-radius: 50%;
      border: 2px solid #0f172a;
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.06);
    }

    .status-indicator.present {
      background-color: #10b981;
    }

    .status-indicator.away {
      background-color: rgb(139, 100, 100);
    }

    .member-name {
      color: #f1f5f9;
      font-weight: 600;
      font-size: 1.05rem;
    }

    .status-badge {
      font-size: 0.75rem;
      font-weight: 600;
      padding: 0.35em 0.65em;
    }

    .member-contact-info {
      padding-left: 12px;
      border-left: 2px solid rgba(96, 165, 250, 0.18);
      margin-left: 30px;
      margin-top: 0.5rem;
    }

    .contact-item {
      display: flex;
      align-items: center;
      margin-bottom: 0.5rem;
    }

    .contact-link, .contact-text {
      font-size: 0.9rem;
      color: #cbd5e1;
      text-decoration: none;
      transition: color 0.2s;
      word-break: break-word;
    }

    .contact-link:hover {
      color: #60a5fa;
    }

    @media (max-width: 992px) {
      .dashboard-card {
        margin-bottom: 1.5rem;
      }
    }
  `}</style>
</div>

); }

