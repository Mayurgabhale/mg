
backend work correct but in fontend not get correct count 
dont convert time disply as it is. 
read all code carefulluy and write correct code. carefuly.
ok ... 
http://localhost:5000/api/occupancy-at?at=2025-09-10T10:12:00.000Z
{
  "asOf": "2025-09-10T10:12:00.000Z",
  "summary": [
    {
      "zone": "Tower B",
      "count": 112
    },
    {
      "zone": "Yellow Zone - Outer Area",
      "count": 30
    },
    {
      "zone": "Reception Area",
      "count": 21
    },
    {
      "zone": "Green Zone",
      "count": 54
    },
    {
      "zone": "Yellow Zone",
      "count": 102
    },
    {
      "zone": "Orange Zone",
      "count": 95
    },
    {
      "zone": "2nd Floor, Pune",
      "count": 61
    },
    {
      "zone": "Red Zone",
      "count": 110
    },
    {
      "zone": "Red Zone - Outer Area",
      "count": 1
    },
    {
      "zone": "Orange Zone - Outer Area",
      "count": 4
    },
    {
      "zone": "Tower B GYM",
      "count": 3
    }
  ],
  "zoneBreakdown": [
    {
      "zone": "Tower B",
      "Visitor": 1,
      "Employee": 105,
      "Property Management": 4,
      "Contractor": 2,
      "total": 112
    },
    {
      "zone": "Yellow Zone - Outer Area",
      "Property Management": 1,
      "Employee": 28,
      "Contractor": 1,
      "total": 30
    },
    {
      "zone": "Reception Area",
      "Visitor": 5,
      "Employee": 10,
      "Property Management": 4,
      "Contractor": 2,
      "total": 21
    },
    {
      "zone": "Green Zone",
      "Visitor": 8,
      "Property Management": 3,
      "Employee": 42,
      "Contractor": 1,
      "total": 54
    },
    {
      "zone": "Yellow Zone",
      "Visitor": 6,
      "Contractor": 3,
      "Property Management": 2,
      "Employee": 90,
      "Temp Badge": 1,
      "total": 102
    },
    {
      "zone": "Orange Zone",
      "Employee": 76,
      "Visitor": 16,
      "Property Management": 2,
      "Temp Badge": 1,
      "total": 95
    },
    {
      "zone": "2nd Floor, Pune",
      "Employee": 57,
      "Contractor": 1,
      "Property Management": 2,
      "Visitor": 1,
      "total": 61
    },
    {
      "zone": "Red Zone",
      "Property Management": 4,
      "Visitor": 6,
      "Employee": 97,
      "Contractor": 3,
      "total": 110
    },
    {
      "zone": "Red Zone - Outer Area",
      "Temp Badge": 1,
      "total": 1
    },
    {
      "zone": "Orange Zone - Outer Area",
      "Employee": 4,
      "total": 4
    },
    {
      "zone": "Tower B GYM",
      "Employee": 3,
      "total": 3
    }
  ],
  "floorBreakdown": [
    {
      "floor": "Tower B",
      "Visitor": 1,
      "Employee": 108,
      "Property Management": 4,
      "Contractor": 2,
      "total": 115
    },
    {
      "floor": "Podium Floor",
      "Property Management": 16,
      "Employee": 347,
      "Contractor": 10,
      "Visitor": 41,
      "Temp Badge": 3,
      "total": 417
    },
    {
      "floor": "2nd Floor",
      "Employee": 57,
      "Contractor": 1,
      "Property Management": 2,
      "Visitor": 1,
      "total": 61
    }
  ],


backend work correct but in fontend not get correct count 
// C:\Users\W0024618\Desktop\swipeData\client\src\components\TimeTravelControl.jsx
import React, { useEffect, useState } from 'react';
import { Button, InputGroup, FormControl, Spinner } from 'react-bootstrap';

/**
 * TimeTravelControl
 * - local UI to pick a datetime (uses <input type="datetime-local">)
 * - calls onApply(isoTimestamp) when user applies a timestamp (ISO UTC)
 * - calls onLive() when user wants to return to live mode
 *
 * Notes:
 * - Keeps local input in sync when parent changes currentTimestamp.
 * - Produces ISO with seconds and ms zeroed: "YYYY-MM-DDTHH:mm:00.000Z"
 */
export default function TimeTravelControl({ currentTimestamp, onApply, onLive, loading }) {
  // store local value as datetime-local string (no timezone)
  const [local, setLocal] = useState(currentTimestamp ? isoToLocalDatetimeInput(currentTimestamp) : '');

  // keep local input synced when parent changes the timestamp (apply / clear)
  useEffect(() => {
    if (currentTimestamp) {
      setLocal(isoToLocalDatetimeInput(currentTimestamp));
    } else {
      setLocal('');
    }
  }, [currentTimestamp]);

  function handleApply() {
    if (!local) return;
    // Convert local datetime (browser local) to an ISO UTC string and zero seconds/ms
    const d = new Date(local);
    d.setSeconds(0, 0);
    const iso = d.toISOString(); // this is UTC ISO
    onApply(iso);
  }

  function handleLive() {
    setLocal('');
    onLive();
  }

  return (
    <div style={{ display: 'flex', gap: 8, alignItems: 'center', minWidth: 340 }}>
      <InputGroup>
        <FormControl
          type="datetime-local"
          value={local}
          onChange={(e) => setLocal(e.target.value)}
          placeholder="Select date & time"
        />
      </InputGroup>

      <div style={{ display: 'flex', gap: 6 }}>
        <Button variant="outline-warning" onClick={handleApply} disabled={loading || !local}>
          {loading ? <><Spinner animation="border" size="sm" />&nbsp;Applying</> : 'Apply'}
        </Button>
        <Button variant="warning" onClick={handleLive} disabled={loading}>
          Live
        </Button>
      </div>
    </div>
  );
}

/** helpers **/
function pad(n) {
  return String(n).padStart(2, '0');
}

/** Convert ISO (UTC) -> "YYYY-MM-DDTHH:mm" local input value */
function isoToLocalDatetimeInput(iso) {
  if (!iso) return '';
  const d = new Date(iso); // JS Date will correctly represent the instant
  // Use local date/time components so <input type=datetime-local> shows local equivalent
  const year = d.getFullYear();
  const month = pad(d.getMonth() + 1);
  const day = pad(d.getDate());
  const hours = pad(d.getHours());
  const minutes = pad(d.getMinutes());
  return `${year}-${month}-${day}T${hours}:${minutes}`;
}





// src/App.js  (replace the App component with this version)
import React, { useEffect, useState, useRef } from 'react';
import { Container, Navbar, Nav } from 'react-bootstrap';
import { BrowserRouter, Routes, Route, Link, useLocation } from 'react-router-dom';
import { FaSun } from 'react-icons/fa';
import ZoneDetailsTable from './components/ZoneDetailsTable';
import DashboardHome    from './pages/DashboardHome';
import ErtPage          from './pages/ErtPage';
import TimeTravelControl from './components/TimeTravelControl';
import './App.css';

function ZoneDetailsPage({ detailsData }) {
  const [searchTerm, setSearchTerm] = useState('');
  return (
    <>
      <div
        className="d-flex justify-content-between align-items-center mb-2"
        style={{ flexWrap: 'wrap', gap: '0.5rem' }}
      >
        <Link to="/" className="btn btn-secondary">← Back to Dashboard</Link>
        <input
          type="text"
          placeholder="Search employee..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          style={{ flexGrow: 1, maxWidth: 300, padding: '0.4rem 0.8rem', fontSize: '1rem', borderRadius: 4, border: '1px solid #ccc' }}
        />
      </div>
      <ZoneDetailsTable data={detailsData} searchTerm={searchTerm} />
    </>
  );
}

function App() {
  const location = useLocation();
  const headerText = location.pathname === '/ert'
    ? 'Emergency Response Team — Western Union Pune'
    : 'Live Occupancy — Western Union Pune';

  // ---------- CONFIG: API base URL ----------
  // Priority:
  // 1) REACT_APP_API_BASE_URL environment variable (set in .env or build env)
  // 2) If in development, default to http://localhost:5000 (most dev setups)
  // 3) In production, use same origin (window.location.origin)
  const API_BASE = (process.env.REACT_APP_API_BASE_URL)
    || (process.env.NODE_ENV === 'development' ? 'http://localhost:5000' : window.location.origin);
  // normalize (no trailing slash)
  const API_ORIGIN = API_BASE.replace(/\/$/, '');
  // ------------------------------------------

  const [liveData, setLiveData] = useState({
    summary: [],
    details: {},
    floorBreakdown: [],
    zoneBreakdown: [],
    personnelBreakdown: [],
    totalVisitedToday: 0,
    personnelSummary: { employees: 0, contractors: 0 },
    visitedToday: { employees: 0, contractors: 0, total: 0 },
    ertStatus: {}
  });

  const [timeTravelMode, setTimeTravelMode] = useState(false);
  const [timeTravelTimestamp, setTimeTravelTimestamp] = useState(null);
  const [timeTravelLoading, setTimeTravelLoading] = useState(false);

  const esRef = useRef(null);

  // SSE: runs only when NOT time-traveling
  useEffect(() => {
    if (timeTravelMode) {
      if (esRef.current) {
        try { esRef.current.close(); } catch (e) { /* ignore */ }
        esRef.current = null;
      }
      return;
    }

    const esUrl = `${API_ORIGIN}/api/live-occupancy`;
    console.debug('[SSE] connecting to', esUrl);
    const es = new EventSource(esUrl);
    esRef.current = es;

    es.onopen = () => console.debug('[SSE] open', esUrl);
    es.onmessage = (e) => {
      try {
        const p = JSON.parse(e.data);
        setLiveData({
          summary: Array.isArray(p.summary) ? p.summary : [],
          details: p.details || {},
          floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
          zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
          personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
          totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
          personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
          visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
          ertStatus: p.ertStatus || {}
        });
      } catch (err) {
        console.error('[SSE] parse error', err, e.data);
      }
    };

    es.onerror = (err) => {
      console.error('[SSE] error', err);
      try { es.close(); } catch (e) {}
      esRef.current = null;
    };

    return () => {
      try { es.close(); } catch (e) {}
      esRef.current = null;
    };
  }, [timeTravelMode, API_ORIGIN]);

  // Helper: unify payload set
  function setPayload(p) {
    setLiveData({
      summary: Array.isArray(p.summary) ? p.summary : [],
      details: p.details || {},
      floorBreakdown: Array.isArray(p.floorBreakdown) ? p.floorBreakdown : [],
      zoneBreakdown: Array.isArray(p.zoneBreakdown) ? p.zoneBreakdown : [],
      personnelBreakdown: Array.isArray(p.personnelBreakdown) ? p.personnelBreakdown : [],
      totalVisitedToday: typeof p.totalVisitedToday === 'number' ? p.totalVisitedToday : 0,
      personnelSummary: p.personnelSummary || { employees: 0, contractors: 0 },
      visitedToday: p.visitedToday || { employees: 0, contractors: 0, total: 0 },
      ertStatus: p.ertStatus || {}
    });
  }

  // Fetch a historical snapshot
  async function fetchSnapshot(isoTimestamp) {
    setTimeTravelLoading(true);
    const url = `${API_ORIGIN}/api/occupancy-at?at=${encodeURIComponent(isoTimestamp)}`;
    console.debug('[TimeTravel] fetching', url);
    try {
      const resp = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' } });
      if (!resp.ok) {
        // give a better message for 404 vs other errors and include body if present
        const body = await resp.text().catch(() => '');
        console.error(`[TimeTravel] error ${resp.status} from ${url}`, body);
        if (resp.status === 404) {
          window.alert(`Snapshot not found for ${isoTimestamp} (404). Check server logs or the 'at' parameter.`);
        } else {
          window.alert(`Failed to load snapshot: server returned ${resp.status}. See console for details.`);
        }
        throw new Error(`Server returned ${resp.status}`);
      }

      // const p = await resp.json();
      // setPayload(p);
      // setTimeTravelMode(true);
      // setTimeTravelTimestamp(isoTimestamp);

      const p = await resp.json();
setPayload(p);
setTimeTravelMode(true);
// prefer server-provided timestamp (p.asOf) if backend returns it; fallback to requested isoTimestamp
setTimeTravelTimestamp(p?.asOf || isoTimestamp);


    } catch (err) {
      console.error('Failed to fetch snapshot', err);
      // (UI already alerted above for non-2xx)
      if (!err.message.includes('Server returned')) {
        window.alert('Failed to load snapshot. See console for details.');
      }
    } finally {
      setTimeTravelLoading(false);
    }
  }

  // Return to live mode
  async function clearTimeTravel() {
    setTimeTravelLoading(true);
    try {
      setTimeTravelMode(false);
      setTimeTravelTimestamp(null);
      // optional immediate refresh
      try {
        const url = `${API_ORIGIN}/api/current-occupancy`;
        const resp = await fetch(url, { headers: { Accept: 'application/json' } });
        if (resp.ok) {
          const p = await resp.json();
          setPayload(p);
        } else {
          console.debug('[TimeTravel] current-occupancy not available', resp.status);
        }
      } catch (e) {
        console.debug('[TimeTravel] current-occupancy fetch failed (ignored)', e);
      }
    } finally {
      setTimeTravelLoading(false);
    }
  }

  return (
    <>
      <Navbar bg="dark" variant="dark" expand="lg" className="px-4">
        <Navbar.Brand as={Link} to="/" className="wu-brand">{headerText}</Navbar.Brand>
        <Nav className="ms-auto align-items-center">
          <div className="me-3" style={{ display: 'flex', alignItems: 'center' }}>
            <TimeTravelControl
              currentTimestamp={timeTravelTimestamp}
              onApply={(iso) => fetchSnapshot(iso)}
              onLive={() => clearTimeTravel()}
              loading={timeTravelLoading}
            />
          </div>

          <Nav.Link as={Link} to="/" className="nav-item-infographic"><i className="bi bi-house"></i></Nav.Link>
          <Nav.Link href="http://10.199.22.57:3000/partition/Pune/history"  className="nav-item-infographic"><i className="bi bi-clock-history"></i></Nav.Link>
          <Nav.Link as={Link} to="/details" className="nav-item-infographic"><i className="fa-solid fa-calendar-day"></i></Nav.Link>
          <Nav.Link as={Link} to="/ert" className="nav-item-infographic">ERT Overview</Nav.Link>
          <Nav.Link className="theme-toggle-icon" title="Dark mode only"><FaSun/></Nav.Link>
        </Nav>
      </Navbar>

      <Container fluid className="mt-2">
        {timeTravelMode && (
          <div style={{
            background: '#2b2b2b',
            color: '#FFD100',
            padding: '8px 16px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            borderLeft: '4px solid #FFD100',
            marginBottom: 8
          }}>
            <div>
              Viewing historical snapshot for:&nbsp;
              <strong>{new Date(timeTravelTimestamp).toLocaleString()}</strong>
            </div>
            <div>
              <button className="btn btn-sm btn-outline-warning" onClick={() => clearTimeTravel()} disabled={timeTravelLoading}>
                Return to Live
              </button>
            </div>
          </div>
        )}

        <Routes>
          <Route
            path="/"
            element={
              <DashboardHome
                summaryData={liveData.summary}
                detailsData={liveData.details}
                floorData={liveData.floorBreakdown}
                zoneBreakdown={liveData.zoneBreakdown}
                personnelBreakdown={liveData.personnelBreakdown}
                totalVisitedToday={liveData.totalVisitedToday}
                personnelSummary={liveData.personnelSummary}
                visitedToday={liveData.visitedToday}
                ertStatus={liveData.ertStatus}
              />
            }
          />
          <Route path="/details" element={<ZoneDetailsPage detailsData={liveData.details} />} />
          <Route path="/ert"     element={<ErtPage ertStatus={liveData.ertStatus} />} />
        </Routes>
      </Container>
    </>
  );
}

export default function WrappedApp() {
  return (
    <BrowserRouter>
      <div className="dark-theme">
        <App />
      </div>
    </BrowserRouter>
  );
}
