import React, { useEffect, useMemo, useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
  CartesianGrid,
  LineChart,
  Line,
  PieChart,
  Pie,
  Cell,
  Legend,
} from "recharts";
import { FiDownload as Download, FiSearch as Search, FiCalendar as Calendar, FiRefreshCw as Refresh } from "react-icons/fi";

export default function PuneMonthlyDashboard({ initialMonth }) {
  const now = new Date();
  const defaultMonth = initialMonth || `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, "0")}`;

  const [month, setMonth] = useState(defaultMonth);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  const [q, setQ] = useState("");
  const [personnelFilter, setPersonnelFilter] = useState("All");
  const [showTopOnly, setShowTopOnly] = useState(false);

  useEffect(() => {
    let alive = true;
    async function load() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/monthly-summary?month=${month}`);
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = await res.json();
        if (!alive) return;
        setData(json);
      } catch (err) {
        console.error(err);
        if (!alive) return;
        setError(err.message || "Failed to load");
      } finally {
        if (alive) setLoading(false);
      }
    }
    load();
    return () => { alive = false; };
  }, [month]);

  const days = useMemo(
    () => (data?.attendanceSheet?.length ? Object.keys(data.attendanceSheet[0]).filter(k => /^\d{4}-\d{2}-\d{2}$/.test(k)) : data?.days || []),
    [data]
  );

  const personnelTypes = useMemo(() => {
    if (!data) return [];
    const set = new Set();
    for (const p of data.attendanceSheet || []) set.add(p.personnelType || p.PersonnelType || "Unknown");
    return ["All", ...Array.from(set)];
  }, [data]);

  const filteredAttendance = useMemo(() => {
    if (!data) return [];
    const rows = data.attendanceSheet || [];
    return rows.filter(r => {
      if (personnelFilter !== "All" && r.personnelType !== personnelFilter) return false;
      if (q) {
        const term = q.toLowerCase();
        return (r.name || "").toLowerCase().includes(term) || (r.employeeId || "").toLowerCase().includes(term);
      }
      return true;
    });
  }, [data, q, personnelFilter]);

  const topVisitors = data?.top10Visitors || [];

  const personnelDistribution = useMemo(() => {
    if (!data?.attendanceSheet) return [];
    const map = new Map();
    for (const r of data.attendanceSheet) {
      const t = r.personnelType || r.PersonnelType || "Unknown";
      map.set(t, (map.get(t) || 0) + 1);
    }
    return Array.from(map.entries()).map(([name, value]) => ({ name, value }));
  }, [data]);

  const COLORS = ["#6366F1", "#10B981", "#F59E0B", "#EF4444", "#3B82F6"];

  function downloadJSON() {
    const payload = JSON.stringify({ month, data }, null, 2);
    const blob = new Blob([payload], { type: "application/json" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `monthly-summary-${month}.json`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function downloadCSV() {
    const rows = showTopOnly ? filteredAttendance.slice(0, 50) : filteredAttendance;
    const headers = ["employeeId", "name", "personnelType", "daysPresent", "attendancePercent"];
    const csv = [headers.join(",")].concat(
      rows.map(r => headers.map(h => `"${(r[h] ?? "").toString().replace(/"/g, '""')}"`).join(","))
    ).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `attendance-${month}.csv`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }

  function humanDay(d) { return d.slice(8); }

  function pctColorClass(pct) {
    const n = parseFloat((pct || 0).toString());
    if (Number.isNaN(n)) return "bg-slate-700 text-white";
    if (n >= 90) return "bg-gradient-to-r from-emerald-500 to-emerald-700 text-white";
    if (n >= 75) return "bg-gradient-to-r from-yellow-400 to-yellow-600 text-white";
    return "bg-gradient-to-r from-rose-400 to-rose-600 text-white";
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white p-6 max-w-[1400px] mx-auto">
      <header className="flex items-start justify-between mb-8 gap-6">
        <div>
          <h1 className="text-3xl md:text-4xl font-extrabold tracking-tight">Pune — Monthly Summary</h1>
          <p className="text-sm text-slate-300 mt-1">Premium insights for attendance, occupancy and visitors • <span className="font-medium text-slate-200">{month}</span></p>
        </div>

        <div className="flex items-center gap-3">
          <label className="flex items-center gap-2 text-sm text-slate-200 bg-slate-700/40 border border-slate-600 rounded-lg px-3 py-2 shadow">
            <Calendar size={16} />
            <input
              aria-label="Select month"
              type="month"
              value={month}
              onChange={(e) => setMonth(e.target.value)}
              className="bg-transparent outline-none text-sm text-white"
            />
          </label>

          <button onClick={() => { setLoading(true); setTimeout(()=> setLoading(false), 600); }} title="Refresh" className="bg-slate-700/40 border border-slate-600 rounded-lg p-2 shadow hover:bg-slate-600/60">
            <Refresh size={18} />
          </button>

          <div className="flex gap-2">
            <button onClick={downloadCSV} className="inline-flex items-center gap-2 bg-indigo-600 hover:bg-indigo-500 text-white text-sm px-3 py-2 rounded-lg shadow">CSV</button>
            <button onClick={downloadJSON} className="inline-flex items-center gap-2 bg-slate-700/60 hover:bg-slate-600 text-white text-sm px-3 py-2 rounded-lg shadow">Export</button>
          </div>
        </div>
      </header>

      {loading && (
        <div className="space-y-4">
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div className="p-4 bg-slate-700/40 rounded-lg animate-pulse h-24" />
            <div className="p-4 bg-slate-700/40 rounded-lg animate-pulse h-24" />
            <div className="p-4 bg-slate-700/40 rounded-lg animate-pulse h-24" />
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-2 p-4 bg-slate-700/40 rounded-lg animate-pulse h-56" />
            <div className="p-4 bg-slate-700/40 rounded-lg animate-pulse h-56" />
          </div>
        </div>
      )}

      {error && (
        <div className="p-4 bg-red-500/20 border border-red-400 text-red-200 rounded">Error: {error}</div>
      )}

      {!loading && data && (
        <main className="space-y-8">
          {/* KPI row */}
          <section className="grid grid-cols-1 sm:grid-cols-3 gap-6">
            <div className="p-5 bg-gradient-to-br from-indigo-600 to-indigo-800 rounded-xl shadow-lg">
              <div className="text-sm text-slate-200">Avg Daily Headcount</div>
              <div className="mt-2 text-3xl font-extrabold">{data.avgDailyHeadcount ?? '—'}</div>
              <div className="text-xs text-slate-300">Monthly average</div>
            </div>

            <div className="p-5 bg-gradient-to-br from-emerald-600 to-emerald-800 rounded-xl shadow-lg">
              <div className="text-sm text-slate-200">Distinct People</div>
              <div className="mt-2 text-3xl font-extrabold">{data.summary?.persons ?? (data.attendanceSheet?.length ?? 0)}</div>
              <div className="text-xs text-slate-300">At least one swipe</div>
            </div>

            <div className="p-5 bg-gradient-to-br from-yellow-500 to-yellow-700 rounded-xl shadow-lg">
              <div className="text-sm text-slate-200">Days in Month</div>
              <div className="mt-2 text-3xl font-extrabold">{data.summary?.daysInMonth ?? (data.days?.length ?? days.length)}</div>
              <div className="text-xs text-slate-300">{month}</div>
            </div>
          </section>

          {/* Charts */}
          <section className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-2 p-5 bg-slate-800 rounded-xl shadow-lg">
              <h3 className="text-sm font-medium text-slate-200 mb-3">Peak Occupancy</h3>
              <div style={{ height: 260 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={data.peakOccupancy || []} margin={{ top: 6, right: 12, left: 0, bottom: 6 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#475569" />
                    <XAxis dataKey="date" tickFormatter={d => d.slice(8)} stroke="#CBD5E1" />
                    <YAxis stroke="#CBD5E1" />
                    <Tooltip contentStyle={{ backgroundColor: '#1E293B', borderColor: '#334155', color: '#F8FAFC' }} formatter={(v) => [v, 'Peak']} />
                    <Bar dataKey="peak" fill="#6366F1" radius={[6,6,0,0]} />
                    <Line type="monotone" dataKey="peak" stroke="#22D3EE" strokeWidth={2} dot={false} />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            <div className="p-5 bg-slate-800 rounded-xl shadow-lg">
              <h3 className="text-sm font-medium text-slate-200 mb-3">People by Type</h3>
              <div style={{ height: 200 }}>
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie data={personnelDistribution} dataKey="value" nameKey="name" outerRadius={70} innerRadius={34} paddingAngle={4}>
                      {personnelDistribution.map((entry, idx) => (
                        <Cell key={`c-${idx}`} fill={COLORS[idx % COLORS.length]} />
                      ))}
                    </Pie>
                    <Legend verticalAlign="bottom" height={36} wrapperStyle={{ color: '#CBD5E1' }} />
                    <Tooltip contentStyle={{ backgroundColor: '#1E293B', borderColor: '#334155', color: '#F8FAFC' }} />
                  </PieChart>
                </ResponsiveContainer>
              </div>
            </div>
          </section>

          {/* Table */}
          <section className="p-5 bg-slate-800 rounded-xl shadow-lg">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center gap-3">
                <div className="relative">
                  <input
                    className="pl-9 pr-3 py-2 rounded-lg text-sm w-72 bg-slate-700 text-white placeholder-slate-400"
                    placeholder="Search name or id"
                    value={q}
                    onChange={(e) => setQ(e.target.value)}
                  />
                  <div className="absolute left-3 top-2 text-slate-400"><Search size={14} /></div>
                </div>

                <select className="rounded-lg px-3 py-2 text-sm bg-slate-700 text-white" value={personnelFilter} onChange={(e) => setPersonnelFilter(e.target.value)}>
                  {personnelTypes.map((pt) => (
                    <option key={pt} value={pt}>{pt}</option>
                  ))}
                </select>

                <label className="text-sm flex items-center gap-2 text-slate-300">
                  <input type="checkbox" checked={showTopOnly} onChange={(e) => setShowTopOnly(e.target.checked)} /> Show top 50
                </label>
              </div>

              <div className="flex items-center gap-3 text-sm text-slate-300">
                <div>Showing <strong>{filteredAttendance.length}</strong> rows</div>
                <div className="text-xs">Updated: <span className="font-medium">{new Date().toLocaleString()}</span></div>
              </div>
            </div>

            <div className="overflow-auto border border-slate-700 rounded-lg">
              <table className="min-w-full divide-y divide-slate-700">
                <thead className="bg-slate-700 sticky top-0 z-10">
                  <tr>
                    <th className="px-3 py-3 text-left text-xs font-medium text-slate-300">#</th>
                    <th className="px-3 py-3 text-left text-xs font-medium text-slate-300">Name</th>
                    <th className="px-3 py-3 text-left text-xs font-medium text-slate-300">Type</th>
                    {days.map(d => (
                      <th key={d} className="px-2 py-3 text-xs text-center text-slate-400">{humanDay(d)}</th>
                    ))}
                    <th className="px-3 py-3 text-xs text-right text-slate-300">Present</th>
                    <th className="px-3 py-3 text-xs text-right text-slate-300">%</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-slate-700">
                  {(showTopOnly ? filteredAttendance.slice(0,50) : filteredAttendance).map((r, idx) => (
                    <tr key={(r.employeeId || idx) + "-" + idx} className="hover:bg-slate-700/50">
                      <td className="px-3 py-2 text-sm text-slate-200">{idx + 1}</td>
                      <td className="px-3 py-2 text-sm font-medium text-slate-100">{r.name} <div className="text-xs text-slate-400">{r.employeeId}</div></td>
                      <td className="px-3 py-2 text-sm text-slate-300">{r.personnelType}</td>
                      {days.map(d => {
                        const v = r[d];
                        const isP = String(v).toUpperCase() === 'P' || v === true;
                        return (
                          <td key={d} className="px-1 py-1 text-center">
                            <div className={`inline-block text-xs font-semibold px-
