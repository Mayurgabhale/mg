function buildVisitedToday(allEvents) {
  // "Today" in Asia/Kolkata relative to now
  const nowUtc = new Date();
  const todayLocal = DateTime.fromJSDate(nowUtc, { zone: 'utc' })
    .setZone('Asia/Kolkata')
    .toFormat('yyyy-LL-dd');

  const todayIns = allEvents.filter(evt => {
    const evtTs = evt.LocaleMessageTime ? new Date(evt.LocaleMessageTime) : null;
    if (!evtTs) return false;
    const evtLocalDate = DateTime.fromJSDate(evtTs, { zone: 'utc' })
      .setZone('Asia/Kolkata')
      .toFormat('yyyy-LL-dd');
    return evt.Direction === 'InDirection' && evtLocalDate === todayLocal;
  });

  const dedup = new Map();
  for (const e of todayIns) {
    const key = e.PersonGUID || e.EmployeeID || e.CardNumber || e.ObjectName1;
    if (!key) continue;
    const evtTs = new Date(e.LocaleMessageTime);
    const prev = dedup.get(key);
    if (!prev || evtTs > new Date(prev.LocaleMessageTime)) {
      dedup.set(key, e);
    }
  }

  const finalList = Array.from(dedup.values());
  const employees = finalList.filter(e =>
    !['Contractor','Terminated Contractor','Temp Badge','Visitor','Property Management']
      .includes(e.PersonnelType)
  ).length;
  const contractors = finalList.length - employees;

  return { employees, contractors, total: finalList.length };
}