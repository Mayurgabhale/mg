import React, { useState } from 'react';
import {
  Box, FormControl, InputLabel, Select, OutlinedInput,
  Checkbox, ListItemText, MenuItem, Button,
  CircularProgress, Typography, TextField, Tabs, Tab, Paper
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { StaticDatePicker } from '@mui/x-date-pickers/StaticDatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import axios from 'axios';
import ExcelJS from 'exceljs';
import * as XLSX from 'xlsx';

// Keep all your EMPLOYEE_OPTIONS, REGION_OPTIONS, LOCATION_MAP, formatDisplayDate, and functions unchanged above...

export default function ReportsPage() {
  // --- your states, handlers, and logic remain here unchanged ---

  return (
    <Box sx={{ backgroundColor: '#f4f6f8', minHeight: '100vh' }}>
      {/* Header */}
      <Box
        sx={{
          background: 'linear-gradient(90deg, #1a1a1a, #333)',
          color: '#FFCC00',
          textAlign: 'center',
          py: 4,
          boxShadow: 3,
          mb: 4
        }}
      >
        <Typography variant="h3" fontWeight="bold">
          Global Security Operation Center Reports
        </Typography>
        <Typography variant="subtitle1" sx={{ color: '#fff', opacity: 0.85 }}>
          Generate, export, and manage detailed security reports
        </Typography>
      </Box>

      {/* Content Container */}
      <Box maxWidth="lg" mx="auto" px={2} pb={6}>
        {/* Tabs */}
        <Paper
          elevation={3}
          sx={{
            borderRadius: 3,
            overflow: 'hidden',
            mb: 3
          }}
        >
          <Tabs
            value={tab}
            onChange={handleTabChange}
            variant="scrollable"
            scrollButtons
            allowScrollButtonsMobile
            sx={{
              backgroundColor: '#fff',
              '& .MuiTab-root': {
                fontWeight: 600,
                textTransform: 'none',
                borderRadius: 5,
                m: 0.5,
                minHeight: 48
              },
              '& .Mui-selected': {
                backgroundColor: '#FFCC00',
                color: '#000 !important'
              },
              '& .MuiTabs-indicator': {
                display: 'none'
              }
            }}
          >
            <Tab label="Daily Access" />
            <Tab label="Raw" />
            <Tab label="Rejection" />
            <Tab label="Time Duration" />
            <Tab label="HeadCount" />
          </Tabs>
        </Paper>

        {/* Filters */}
        <Paper elevation={3} sx={{ p: 3, borderRadius: 3, mb: 4 }}>
          <LocalizationProvider dateAdapter={AdapterDateFns}>
            <Box
              display="grid"
              gridTemplateColumns="repeat(auto-fill, minmax(250px, 1fr))"
              gap={2}
            >
              {/* Region */}
              <FormControl fullWidth>
                <InputLabel>Region</InputLabel>
                <Select
                  value={region}
                  onChange={e => { setRegion(e.target.value); setLocation(''); }}
                  input={<OutlinedInput label="Region" />}
                >
                  {REGION_OPTIONS.map(r =>
                    <MenuItem key={r} value={r}>{r.toUpperCase()}</MenuItem>
                  )}
                </Select>
              </FormControl>

              {/* Location */}
              <FormControl fullWidth disabled={!region}>
                <InputLabel>Location</InputLabel>
                <Select
                  value={location}
                  onChange={e => setLocation(e.target.value)}
                  input={<OutlinedInput label="Location" />}
                >
                  {(LOCATION_MAP[region] || []).map(loc =>
                    <MenuItem key={loc} value={loc}>
                      {loc.split('.').pop()}
                    </MenuItem>
                  )}
                </Select>
              </FormControl>

              {/* From Date */}
              {tab !== 4 && (
                <Box>
                  <TextField
                    label={tab === 0 ? 'From Date' : 'Start Date'}
                    value={from ? from.toLocaleDateString() : ''}
                    readOnly
                    fullWidth
                    onClick={() => setShowFromCal(true)}
                  />
                  {showFromCal && (
                    <StaticDatePicker
                      displayStaticWrapperAs="desktop"
                      value={from}
                      onChange={(newValue) => setFrom(newValue)}
                      onClose={() => setShowFromCal(false)}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  )}
                </Box>
              )}

              {/* To Date */}
              {tab !== 4 && (
                <Box>
                  <TextField
                    label={tab === 0 ? 'To Date' : 'End Date'}
                    value={to ? to.toLocaleDateString() : ''}
                    readOnly
                    fullWidth
                    onClick={() => setShowToCal(true)}
                  />
                  {showToCal && (
                    <StaticDatePicker
                      displayStaticWrapperAs="desktop"
                      value={to}
                      onChange={(newValue) => setTo(newValue)}
                      onClose={() => setShowToCal(false)}
                      renderInput={(params) => <TextField {...params} />}
                    />
                  )}
                </Box>
              )}

              {/* Employees */}
              {tab === 0 && (
                <FormControl fullWidth>
                  <InputLabel>Employees</InputLabel>
                  <Select
                    multiple
                    value={selectedEmps}
                    onChange={e => setSelectedEmps(e.target.value)}
                    input={<OutlinedInput label="Employees" />}
                    renderValue={vals => vals.join(', ')}
                  >
                    {EMPLOYEE_OPTIONS.map(n => (
                      <MenuItem key={n} value={n}>
                        <Checkbox checked={selectedEmps.includes(n)} />
                        <ListItemText primary={n} />
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              )}
            </Box>
          </LocalizationProvider>
        </Paper>

        {/* Action Button */}
        <Box textAlign="center" mt={4}>
          <Button
            variant="contained"
            size="large"
            onClick={handleGenerate}
            disabled={disabled}
            startIcon={loading ? <CircularProgress size={20} /> : null}
            sx={{
              backgroundColor: '#FFCC00',
              color: 'black',
              fontWeight: 'bold',
              px: 5,
              py: 1.5,
              fontSize: '1rem',
              borderRadius: 5,
              boxShadow: 3,
              '&:hover': {
                backgroundColor: '#f4d03f'
              }
            }}
          >
            {loading
              ? 'Generatingâ€¦'
              : tab === 4
              ? `Navigate to ${location ? location.split('.').pop() : region.toUpperCase()}`
              : 'Export to Excel'}
          </Button>
        </Box>
      </Box>
    </Box>
  );
}