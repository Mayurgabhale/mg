
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { FaMapMarkerAlt, FaPalette, FaCalendarAlt, FaClock, FaDoorClosed, FaExchangeAlt } from 'react-icons/fa';
import './EmployeeCard.css';
export default function CurrentLocation({ empId, showMore }) {
  const [loading, setLoading] = useState(false);
  const [loc, setLoc] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!empId) {
      setLoc(null);
      setError('');
      return;
    }

    let cancelled = false;
    setLoading(true);
    setError('');
    setLoc(null);

    axios
      .get(`http://localhost:5001/api/employees/${empId}/location`)
      .then((res) => {
        if (cancelled) return;
        setLoc(res.data);
      })
      .catch((err) => {
        if (cancelled) return;
        console.error('Location load error', err?.message || err);
        setError('Failed to load location');
      })
      .finally(() => {
        if (!cancelled) setLoading(false);
      });

    return () => {
      cancelled = true;
    };
  }, [empId]);

  if (!empId) return null;

  return (
    <div className="current-location-card" style={{ marginTop: 1 }}>
      <h4 style={{ margin: '0 0 6px 0', fontSize: 14, color: '#f5a742' }}>Swipe Details</h4>

      {loading && <div style={{ color: '#fff' }}>Loading location…</div>}
      {error && <div style={{ color: '#fff' }}>{error}</div>}

      {!loading && loc && !loc.found && (
        <div style={{ color: '#2ced0e' }}>No recent swipe</div>
      )}

      {!loading && loc && loc.found && (


        <table className="swipe-details-table">
          <tbody>
            <tr>
              <td className="label"><FaMapMarkerAlt className="icon location" /> Location</td>
              <td className="value">
                {loc.partition || '—'}
                {loc.floor ? ` · ${loc.floor}` : ''}
              </td>
            </tr>


            <tr>
              <td className="label">
                <FaPalette className="icon zone" /> {loc.Zone ? 'Zone' : 'Floor'}
              </td>
              <td className="value">
                {loc.Zone || loc.floor || '—'}
              </td>
            </tr>

            {showMore && (
              <>
                {/* <tr>
                  <td className="label"><FaCalendarAlt className="icon date" /> Date</td>
                  <td className="value">
                    {loc.timestampUTC
                      ? new Date(loc.timestampUTC).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' })
                      : '—'}
                  </td>
                </tr>

                <tr>
                  <td className="label"><FaClock className="icon time" /> Time</td>
                  <td className="value">
                    {loc.timestampUTC
                      ? new Date(loc.timestampUTC).toLocaleTimeString('en-IN', { timeZone: 'Asia/Kolkata' })
                      : '—'}
                  </td>
                </tr> */}



                <tr>
  <td className="label"><FaCalendarAlt className="icon date" /> Date</td>
  <td className="value">
    {loc.LocaleMessageTime
      ? new Date(loc.LocaleMessageTime).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' })
      : '—'}
  </td>
</tr>
<tr>
  <td className="label"><FaClock className="icon time" /> Time</td>
  <td className="value">
    {loc.LocaleMessageTime
      ? new Date(loc.LocaleMessageTime).toLocaleTimeString('en-IN', { timeZone: 'Asia/Kolkata' })
      : '—'}
  </td>
</tr>


                

                <tr>
                  <td className="label"><FaDoorClosed className="icon door" /> Door</td>
                  <td className="value">{loc.door || '—'}</td>
                </tr>
                <tr>
                  <td className="label"><FaExchangeAlt className="icon direction" /> Direction</td>
                  <td className="value">{loc.direction || '—'}</td>
                </tr>
              </>
            )}
          </tbody>
        </table>

      )}
    </div>
  );
}





