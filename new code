return (
  <Box
    sx={{
      minHeight: '100vh',
      background: 'linear-gradient(180deg, #000000 0%, #1a1a1a 100%)',
      color: '#fff',
      pb: 6,
    }}
  >
    {/* Header */}
    <Box
      sx={{
        background: 'linear-gradient(90deg, #FFCC00 0%, #FFD633 100%)',
        py: 4,
        textAlign: 'center',
        boxShadow: '0px 4px 20px rgba(255, 204, 0, 0.5)',
      }}
    >
      <Typography
        variant="h3"
        sx={{
          fontWeight: '900',
          color: '#000',
          letterSpacing: 1,
        }}
      >
        Global Security Operation Center Reports
      </Typography>
    </Box>

    {/* Tabs */}
    <Box sx={{ mt: 4 }}>
      <Tabs
        value={tab}
        onChange={handleTabChange}
        centered
        TabIndicatorProps={{
          style: { backgroundColor: '#FFCC00', height: 4, borderRadius: 4 },
        }}
        sx={{
          '& .MuiTab-root': {
            color: '#ccc',
            fontWeight: 'bold',
            borderRadius: '25px',
            px: 3,
            mx: 1,
            textTransform: 'none',
            transition: 'all 0.3s ease',
            '&:hover': { backgroundColor: 'rgba(255, 204, 0, 0.1)' },
          },
          '& .Mui-selected': {
            backgroundColor: 'rgba(255, 204, 0, 0.15)',
            color: '#FFCC00 !important',
          },
        }}
      >
        <Tab icon={<i className="fas fa-calendar-day" />} label="Daily Access" />
        <Tab icon={<i className="fas fa-database" />} label="Raw" />
        <Tab icon={<i className="fas fa-ban" />} label="Rejection" />
        <Tab icon={<i className="fas fa-clock" />} label="Time Duration" />
        <Tab icon={<i className="fas fa-users" />} label="HeadCount" />
      </Tabs>
    </Box>

    {/* Filters */}
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Paper
        elevation={6}
        sx={{
          mt: 5,
          p: 4,
          maxWidth: '1200px',
          mx: 'auto',
          background: 'rgba(255, 255, 255, 0.04)',
          backdropFilter: 'blur(10px)',
          borderRadius: '20px',
          border: '1px solid rgba(255, 204, 0, 0.3)',
        }}
      >
        <Grid container spacing={3}>
          {/* Region */}
          <Grid item xs={12} sm={6} md={4}>
            <FormControl fullWidth>
              <InputLabel sx={{ color: '#FFCC00' }}>Region</InputLabel>
              <Select
                value={region}
                onChange={(e) => {
                  setRegion(e.target.value);
                  setLocation('');
                }}
                input={<OutlinedInput label="Region" />}
                sx={{
                  color: '#fff',
                  '& .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#FFCC00',
                  },
                  '&:hover .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#FFD700',
                  },
                }}
              >
                {REGION_OPTIONS.map((r) => (
                  <MenuItem key={r} value={r}>
                    {r.toUpperCase()}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {/* Location */}
          <Grid item xs={12} sm={6} md={4}>
            <FormControl fullWidth>
              <InputLabel sx={{ color: '#FFCC00' }}>Location</InputLabel>
              <Select
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                input={<OutlinedInput label="Location" />}
                sx={{
                  color: '#fff',
                  '& .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#FFCC00',
                  },
                  '&:hover .MuiOutlinedInput-notchedOutline': {
                    borderColor: '#FFD700',
                  },
                }}
                disabled={!region}
              >
                {(LOCATION_MAP[region] || []).map((loc) => (
                  <MenuItem key={loc} value={loc}>
                    {loc.split('.').pop()}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>

          {/* Dates */}
          {tab !== 4 && (
            <>
              <Grid item xs={12} sm={6} md={4}>
                <TextField
                  label={tab === 0 ? 'From Date' : 'Start Date'}
                  value={from ? from.toLocaleDateString() : ''}
                  readOnly
                  onClick={() => setShowFromCal(true)}
                  fullWidth
                  sx={{
                    input: { color: '#fff' },
                    '& .MuiOutlinedInput-root fieldset': {
                      borderColor: '#FFCC00',
                    },
                    '&:hover .MuiOutlinedInput-root fieldset': {
                      borderColor: '#FFD700',
                    },
                  }}
                />
                {showFromCal && (
                  <StaticDatePicker
                    displayStaticWrapperAs="desktop"
                    value={from}
                    onChange={setFrom}
                    onClose={() => setShowFromCal(false)}
                    renderInput={(params) => <TextField {...params} />}
                    views={['year', 'month', 'day']}
                  />
                )}
              </Grid>

              <Grid item xs={12} sm={6} md={4}>
                <TextField
                  label={tab === 0 ? 'To Date' : 'End Date'}
                  value={to ? to.toLocaleDateString() : ''}
                  readOnly
                  onClick={() => setShowToCal(true)}
                  fullWidth
                  sx={{
                    input: { color: '#fff' },
                    '& .MuiOutlinedInput-root fieldset': {
                      borderColor: '#FFCC00',
                    },
                    '&:hover .MuiOutlinedInput-root fieldset': {
                      borderColor: '#FFD700',
                    },
                  }}
                />
                {showToCal && (
                  <StaticDatePicker
                    displayStaticWrapperAs="desktop"
                    value={to}
                    onChange={setTo}
                    onClose={() => setShowToCal(false)}
                    renderInput={(params) => <TextField {...params} />}
                    views={['year', 'month', 'day']}
                  />
                )}
              </Grid>
            </>
          )}

          {/* Employees */}
          {tab === 0 && (
            <Grid item xs={12} md={6}>
              <FormControl fullWidth>
                <InputLabel sx={{ color: '#FFCC00' }}>Employees</InputLabel>
                <Select
                  multiple
                  value={selectedEmps}
                  onChange={(e) => setSelectedEmps(e.target.value)}
                  input={<OutlinedInput label="Employees" />}
                  sx={{
                    color: '#fff',
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#FFCC00',
                    },
                    '&:hover .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#FFD700',
                    },
                  }}
                  renderValue={(vals) => vals.join(', ')}
                >
                  {EMPLOYEE_OPTIONS.map((n) => (
                    <MenuItem key={n} value={n}>
                      <Checkbox checked={selectedEmps.includes(n)} />
                      <ListItemText primary={n} />
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Grid>
          )}
        </Grid>
      </Paper>
    </LocalizationProvider>

    {/* Action Button */}
    <Box textAlign="center" mt={5}>
      <Button
        variant="contained"
        size="large"
        onClick={handleGenerate}
        disabled={tab === 4 ? (!region || loading) : disabled}
        startIcon={loading ? <CircularProgress size={20} /> : null}
        sx={{
          background: 'linear-gradient(90deg, #FFCC00, #FFD633)',
          color: '#000',
          fontWeight: 'bold',
          px: 5,
          py: 1.5,
          borderRadius: '50px',
          boxShadow: '0px 4px 15px rgba(255, 204, 0, 0.5)',
          transition: 'all 0.3s ease',
          '&:hover': {
            background: 'linear-gradient(90deg, #FFD633, #FFB300)',
            transform: 'scale(1.05)',
          },
        }}
      >
        {loading
          ? tab === 4
            ? 'Loading…'
            : 'Generating…'
          : tab === 4
          ? location
            ? `Navigate to ${location.split('.').pop()}`
            : `Navigate to ${region.toUpperCase()}`
          : 'Export to Excel'}
      </Button>
    </Box>
  </Box>
);