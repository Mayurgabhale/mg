return (
  <LocalizationProvider dateAdapter={AdapterDateFns}>
  <Box sx={{ minHeight: '100vh', background: 'linear-gradient(180deg,#070707 0%, #111 100%)', color: '#fff' }}>
    {/* Topbar / Header */}
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        gap: 2,
        px: 3,
        py: 2,
        borderBottom: '1px solid rgba(255,204,0,0.08)',
        background: 'linear-gradient(90deg, rgba(20,20,20,0.7), rgba(0,0,0,0.4))'
      }}
    >
      <Avatar sx={{ bgcolor: '#000', border: '3px solid #FFCC00', width: 56, height: 56 }}>
        <Typography sx={{ color: '#FFCC00', fontWeight: 900 }}>WU</Typography>
      </Avatar>

      <Box sx={{ flex: 1 }}>
        <Typography variant="h5" sx={{ fontWeight: 900, letterSpacing: 0.6 }}>
          Global Security Operation Center
        </Typography>
        <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
          Reports & Exports — Secure access, fast insights
        </Typography>
      </Box>

      <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
        <Button
          startIcon={<DownloadIcon />}
          onClick={handleGenerate}
          disabled={tab === 4 ? (!region || loading) : disabled}
          sx={{
            bgcolor: '#FFCC00',
            color: '#000',
            fontWeight: 800,
            px: 3,
            py: 1,
            borderRadius: 3,
            boxShadow: '0 6px 22px rgba(255,204,0,0.18)',
            transformOrigin: 'center',
            '&:hover': { bgcolor: '#ffd84d', transform: 'translateY(-2px)' }
          }}
        >
          {loading ? (tab === 4 ? 'Loading…' : 'Generating…') : (tab === 4 ? (location ? `Navigate ${location.split('.').pop()}` : `Navigate ${region.toUpperCase()}`) : 'Export to Excel')}
        </Button>
      </Box>
    </Box>

    {/* Main content: Sidebar + Content */}
    <Grid container sx={{ px: 3, py: 4 }} spacing={3}>
      {/* Sidebar */}
      <Grid item xs={12} md={3}>
        <Paper
          elevation={8}
          sx={{
            p: 2.5,
            borderRadius: 3,
            height: { xs: 'auto', md: 'calc(100vh - 150px)' },
            overflow: 'auto',
            background: 'linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.015))',
            border: '1px solid rgba(255,204,0,0.06)'
          }}
        >
          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>
            <Box>
              <Typography variant="subtitle1" sx={{ fontWeight: 800, color: '#FFCC00' }}>Filters</Typography>
              <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                Narrow down by region, date and employees
              </Typography>
            </Box>
            <IconButton size="small" sx={{ color: '#FFCC00' }}>
              <FilterListIcon />
            </IconButton>
          </Box>

          <Divider sx={{ my: 1, borderColor: 'rgba(255,204,0,0.06)' }} />

          {/* Region */}
          <Box sx={{ mt: 1 }}>
            <FormControl fullWidth>
              <InputLabel sx={{ color: '#FFCC00' }}>Region</InputLabel>
              <Select
                value={region}
                onChange={e => { setRegion(e.target.value); setLocation(''); }}
                input={<OutlinedInput label="Region" />}
                sx={{
                  color: '#fff',
                  '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.24)' }
                }}
              >
                {REGION_OPTIONS.map(r => <MenuItem key={r} value={r}>{r.toUpperCase()}</MenuItem>)}
              </Select>
            </FormControl>
          </Box>

          {/* Location */}
          <Box sx={{ mt: 2 }}>
            <FormControl fullWidth>
              <InputLabel sx={{ color: '#FFCC00' }}>Location</InputLabel>
              <Select
                value={location}
                onChange={e => setLocation(e.target.value)}
                input={<OutlinedInput label="Location" />}
                disabled={!region}
                sx={{
                  color: '#fff',
                  '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.12)' }
                }}
              >
                {(LOCATION_MAP[region] || []).map(loc => <MenuItem key={loc} value={loc}>{loc.split('.').pop()}</MenuItem>)}
              </Select>
            </FormControl>
          </Box>

          <Divider sx={{ my: 2, borderColor: 'rgba(255,204,0,0.04)' }} />

          {/* Dates */}
          {tab !== 4 && (
            <Box>
              <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                Date Range
              </Typography>
              <Box sx={{ display: 'grid', gap: 1.25 }}>
                <TextField
                  label={tab === 0 ? 'From Date' : 'Start Date'}
                  value={from ? from.toLocaleDateString() : ''}
                  readOnly
                  onClick={() => setShowFromCal(true)}
                  sx={{
                    '& .MuiInputBase-input': { color: '#fff' },
                    '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                  }}
                />
                <TextField
                  label={tab === 0 ? 'To Date' : 'End Date'}
                  value={to ? to.toLocaleDateString() : ''}
                  readOnly
                  onClick={() => setShowToCal(true)}
                  sx={{
                    '& .MuiInputBase-input': { color: '#fff' },
                    '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.08)' }
                  }}
                />
              </Box>

              {/* Static pickers (keeps your existing state handlers) */}
              {showFromCal && (
                <Box sx={{ mt: 1 }}>
                  <StaticDatePicker
                    displayStaticWrapperAs="desktop"
                    value={from}
                    onChange={(newValue) => setFrom(newValue)}
                    onAccept={() => setShowFromCal(false)}
                    onClose={() => setShowFromCal(false)}
                    renderInput={(params) => <TextField {...params} />}
                    views={['year', 'month', 'day']}
                  />
                </Box>
              )}
              {showToCal && (
                <Box sx={{ mt: 1 }}>
                  <StaticDatePicker
                    displayStaticWrapperAs="desktop"
                    value={to}
                    onChange={(newValue) => setTo(newValue)}
                    onAccept={() => setShowToCal(false)}
                    onClose={() => setShowToCal(false)}
                    renderInput={(params) => <TextField {...params} />}
                    views={['year', 'month', 'day']}
                  />
                </Box>
              )}
            </Box>
          )}

          <Divider sx={{ my: 2, borderColor: 'rgba(255,204,0,0.04)' }} />

          {/* Employees (only Daily) */}
          {tab === 0 && (
            <Box>
              <Typography sx={{ color: 'rgba(255,255,255,0.7)', mb: 1, fontWeight: 700 }}>
                Employees
              </Typography>
              <FormControl fullWidth>
                <InputLabel sx={{ color: '#FFCC00' }}>Employees</InputLabel>
                <Select
                  multiple
                  value={selectedEmps}
                  onChange={e => setSelectedEmps(e.target.value)}
                  input={<OutlinedInput label="Employees" />}
                  renderValue={vals => vals.join(', ')}
                  sx={{
                    color: '#fff',
                    '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255,204,0,0.06)' }
                  }}
                >
                  {EMPLOYEE_OPTIONS.map(n => (
                    <MenuItem key={n} value={n}>
                      <Checkbox checked={selectedEmps.includes(n)} />
                      <ListItemText primary={n} />
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>
          )}

          {/* Helpful hint */}
          <Box sx={{ mt: 3, p: 2, borderRadius: 2, background: 'rgba(255,255,255,0.02)' }}>
            <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.7)' }}>
              Tip: For daily exports pick employees & a single day range. For Time Duration choose the required partition via Location.
            </Typography>
          </Box>
        </Paper>
      </Grid>

      {/* Main panel */}
      <Grid item xs={12} md={9}>
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          {/* Tabs (visual only) */}
          <Paper
            elevation={3}
            sx={{
              px: 2,
              py: 1,
              borderRadius: 2,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              gap: 2,
              border: '1px solid rgba(255,204,0,0.04)'
            }}
          >
            <Tabs
              value={tab}
              onChange={handleTabChange}
              sx={{
                '& .MuiTab-root': {
                  textTransform: 'none',
                  minWidth: 120,
                  fontWeight: 700,
                  color: 'rgba(255,255,255,0.8)'
                },
                '& .Mui-selected': { color: '#FFCC00' }
              }}
            >
              <Tab icon={<CalendarTodayIcon />} label="Daily Access" />
              <Tab icon={<PeopleIcon />} label="Raw" />
              <Tab icon={<PlaceIcon />} label="Rejection" />
              <Tab icon={<CalendarTodayIcon />} label="Time Duration" />
              <Tab icon={<PeopleIcon />} label="HeadCount" />
            </Tabs>

            <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
              <Button
                variant="text"
                startIcon={<FilterListIcon />}
                sx={{ color: 'rgba(255,255,255,0.65)', textTransform: 'none' }}
                onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
              >
                Reset View
              </Button>
            </Box>
          </Paper>

          {/* Action summary + CTA */}
          <Paper elevation={6} sx={{ p: 3, borderRadius: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center', gap: 2 }}>
            <Box>
              <Typography variant="h6" sx={{ fontWeight: 900 }}>Export Center</Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.7)' }}>
                Selected Region: <strong style={{ color: '#FFCC00' }}>{region.toUpperCase()}</strong> {location ? `• ${location.split('.').pop()}` : ''}
              </Typography>
              <Typography variant="caption" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                Choose tab, select filters and export reports in Excel.
              </Typography>
            </Box>

            <Box>
              <Button
                startIcon={loading ? <CircularProgress size={20} /> : <DownloadIcon />}
                disabled={tab === 4 ? (!region || loading) : disabled}
                onClick={handleGenerate}
                sx={{
                  bgcolor: '#FFCC00',
                  color: '#000',
                  fontWeight: 900,
                  px: 4,
                  py: 1,
                  borderRadius: 3,
                  boxShadow: '0 8px 30px rgba(255,204,0,0.22)',
                  '&:hover': { bgcolor: '#ffd84d', transform: 'translateY(-3px)' }
                }}
              >
                {loading ? (tab === 4 ? 'Loading…' : 'Generating…') : (tab === 4 ? (location ? `Navigate ${location.split('.').pop()}` : `Navigate ${region.toUpperCase()}`) : 'Export to Excel')}
              </Button>
            </Box>
          </Paper>

          {/* Content placeholder */}
          <Box>
            <Paper elevation={4} sx={{ p: 3, borderRadius: 3, minHeight: 280, border: '1px solid rgba(255,204,0,0.03)' }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 800, mb: 1 }}>Preview</Typography>
              <Typography variant="body2" sx={{ color: 'rgba(255,255,255,0.6)' }}>
                Results will be fetched and exported when you click the export button. This area can be extended to show a preview table, charts or status summaries without changing the existing export logic.
              </Typography>
            </Paper>
          </Box>
        </Box>
      </Grid>
    </Grid>
  </Box>
  </LocalizationProvider>
);
