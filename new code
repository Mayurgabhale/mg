useEffect(() => {
  const term = searchTerm.trim().toLowerCase();

  if (!term) {
    setSuggestions([]);
    return;
  }

  const filtered = allEmployees.filter(emp => {
    if (!emp.EmpName) return false;
    
    // Check EmployeeID first
    const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
    if (id.includes(term)) return true;

    // Split name into components
    const nameParts = emp.EmpName.toLowerCase().split(' ');
    
    // Check each name component
    return nameParts.some(part => part.includes(term));
  });

  setSuggestions(filtered);
}, [searchTerm, allEmployees]);






const handleSearch = () => {
  const term = searchTerm.trim().toLowerCase();
  setError('');

  if (!term) {
    setSuggestions([]);
    setSelected(null);
    return setError('Please enter name or ID');
  }

  // Find matches - now checking name components
  const matches = allEmployees.filter(emp => {
    if (!emp.EmpName) return false;
    
    // Check ID first
    const id = emp.EmployeeID ? emp.EmployeeID.toLowerCase() : '';
    if (id === term) return true;

    // Check name components
    const nameParts = emp.EmpName.toLowerCase().split(' ');
    return nameParts.some(part => part === term);
  });

  if (matches.length === 1) {
    selectEmployee(matches[0]);
  } else if (matches.length > 1) {
    setSuggestions(matches);
    setError('Multiple matches found - please select one');
  } else {
    setSelected(null);
    setError('No exact matching employee found');
  }
};








<div className="history-list">
  <h3>Related Results</h3>
  <ul>
    {suggestions.length === 0 && searchTerm && <li>No matching employees found</li>}
    {!searchTerm && <li>Start typing to see suggestions</li>}
    {suggestions.map(emp => (
      <li key={emp.id} onClick={() => pickSuggestion(emp)}>
        {emp.EmpName}{emp.EmployeeID && ` (${emp.EmployeeID})`}
      </li>
    ))}
  </ul>
</div>