PS C:\Users\W0024618\Desktop\emea-occupancy-backend> node server.js
🚀 Server running on port 3005
✅ MSSQL  connected
TypeError: normalizeDoorName is not a function
    at mapDoorToZone (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:719:15)
    at C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:775:20
    at Array.map (<anonymous>)
    at exports.getLiveSummary (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:773:42)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
TypeError: normalizeDoorName is not a function
    at mapDoorToZone (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:719:15)
    at C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:775:20
    at Array.map (<anonymous>)
    at exports.getLiveSummary (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:773:42)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
TypeError: normalizeDoorName is not a function
    at mapDoorToZone (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:719:15)
    at C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:775:20
    at Array.map (<anonymous>)
    at exports.getLiveSummary (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:773:42)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
TypeError: normalizeDoorName is not a function
    at mapDoorToZone (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:719:15)
    at C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:775:20
    at Array.map (<anonymous>)
    at exports.getLiveSummary (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:773:42)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
TypeError: normalizeDoorName is not a function
    at mapDoorToZone (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:719:15)
    at C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:775:20
    at Array.map (<anonymous>)
    at exports.getLiveSummary (C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js:773:42)
    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)
http://localhost:3005/api/occupancy/live-summary{"success":false,"message":"Summary failed"}

// // C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js

// const service = require('../services/occupancy.service');
//  const doorMap = require('../utils/doorMap'); 
//  const timezones = require('../utils/timezones');
// //  const normalize  = name => name.trim();        // simple normalizer

//  const normalize = s =>
//    s
//      .trim()
//      .toLowerCase()
//      .replace(/[^a-z0-9]+/g, ' ')   // non-alphanum → space
//      .replace(/\s+/g, ' ')          // collapse multi-spaces
//      .trim();

// /**
//  * Returns true if this PersonnelType counts as Employee.
//  * Everything else (including blank) counts as Contractor.
//  */
// function isEmployeeType(pt) {
//   return pt === 'Employee'
//       || pt === 'Terminated Employee'
//       || pt === 'Terminated Personnel';
// }

// /**
//  * Look up floor for a given record by matching door + partition.
//  */

// function lookupFloor(partition, door, direction, unmappedSet) {
//   const normDoor = normalize(door);
//   // 1) try exact (post-normalization)
//   let entry = doorMap.find(d =>
//     d.partition === partition &&
//     normalize(d.door) === normDoor
//   );
//   // 2) fallback: partial match if exact fails
//   if (!entry) {
//     entry = doorMap.find(d =>
//       d.partition === partition &&
//       normalize(d.door).includes(normDoor)
//     );
//   }
//   if (!entry) {
//     unmappedSet.add(`${partition} | ${door}`);
//     return null;
//   }
//   return direction === 'InDirection'
//     ? entry.inDirectionFloor
//     : entry.outDirectionFloor;
// }

// exports.getLiveOccupancy = async (req, res) => {
//   try {
//     const data = await service.fetchLiveOccupancy();
//     res.json({ success: true, count: data.length, data });
//   } catch (err) {
//     console.error(err);
//     res.status(500).json({ success: false, message: 'Live occupancy fetch failed' });
//   }
// };


// // exports.getLiveSummary = async (req, res) => {
// //   try {
// //     const swipes = await service.fetchLiveOccupancy();

// //     // 1. TODAY’S HEADCOUNT: first swipe per person
// //     const firstByPerson = {};
// //     swipes.forEach(r => {
// //       const prev = firstByPerson[r.PersonGUID];
// //       const t = new Date(r.LocaleMessageTime).getTime();
// //       if (!prev || t < new Date(prev.LocaleMessageTime).getTime()) {
// //         firstByPerson[r.PersonGUID] = r;
// //       }
// //     });
// //     const todayRecs = Object.values(firstByPerson);
// //     const today = { total: 0, Employee: 0, Contractor: 0 };
// //     todayRecs.forEach(r => {
// //       today.total++;
// //       if (isEmployeeType(r.PersonnelType)) today.Employee++;
// //       else today.Contractor++;
// //     });

// //     // 2. REAL-TIME: last swipe per person
// //     const lastByPerson = {};
// //     swipes.forEach(r => {
// //       const prev = lastByPerson[r.PersonGUID];
// //       const t = new Date(r.LocaleMessageTime).getTime();
// //       if (!prev || t > new Date(prev.LocaleMessageTime).getTime()) {
// //         lastByPerson[r.PersonGUID] = r;
// //       }
// //     });

// //     const realtime = {};
// //     const unmappedDoors = new Set();

// //     Object.values(lastByPerson).forEach(r => {
// //       // Resolve floor up-front (this will also populate unmappedDoors if necessary)
// //       const rawFloor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
// //       const floorNorm = rawFloor ? String(rawFloor).trim().toLowerCase() : '';

// //       // STRICT RULE: if resolved Floor equals "Out of office" -> skip counting
// //       if (floorNorm === 'out of office') {
// //         return;
// //       }

// //       // Continue with existing OutDirection logic only if needed (original intent preserved)
// //       // (Note: we already removed any record whose mapped floor is "Out of office" regardless of direction)

// //       const p = r.PartitionName2;
// //       if (!realtime[p]) {
// //         realtime[p] = { total: 0, Employee: 0, Contractor: 0, floors: {} };
// //       }

// //       realtime[p].total++;
// //       if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
// //       else realtime[p].Contractor++;

// //       const normFloorLabel = rawFloor ? String(rawFloor).trim() : 'Unmapped';
// //       realtime[p].floors[normFloorLabel] = (realtime[p].floors[normFloorLabel] || 0) + 1;
// //     });

// //     if (unmappedDoors.size) {
// //       console.warn('Unmapped doors:\n' + Array.from(unmappedDoors).join('\n'));
// //     }

// //     // Build enriched details array, but filter out any whose resolved Floor is "Out of office"
// //     const details = Object.values(lastByPerson)
// //       .map(r => {
// //         const rawFloor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
// //         const floor = rawFloor ? String(rawFloor).trim() : null;
// //         return {
// //           ...r,
// //           Floor: floor
// //         };
// //       })
// //       // Strictly remove records whose Floor is "Out of office"
// //       .filter(d => {
// //         const f = d.Floor;
// //         return !(f && String(f).trim().toLowerCase() === 'out of office');
// //       });

// //     return res.json({
// //       success: true,
// //       today,
// //       realtime,
// //       details
// //     });
// //   } catch (err) {
// //     console.error(err);
// //     return res.status(500).json({ success: false, message: 'Live summary failed' });
// //   }
// // };






// // 📝📝📝📝📝 new code wiht time zone  ⬇️⬇️start

// // 📝 Updated getLiveSummary — enforces partition-local "today" for both today + realtime
// exports.getLiveSummary = async (req, res) => {
//   try {
//     const swipes = await service.fetchLiveOccupancy();

//     // helper: returns YYYY-MM-DD for a given date in the partition's timezone
//     function getLocalDateString(dateInput, partition) {
//       const tz = timezones[partition] || 'UTC';
//       try {
//         const d = new Date(dateInput);
//         return new Intl.DateTimeFormat('en-CA', { timeZone: tz }).format(d);
//       } catch (e) {
//         return new Date(dateInput).toISOString().slice(0, 10);
//       }
//     }

//     // PRE-CALCULATE "today" per partition (so we don't call Intl repeatedly)
//     const partitionToday = {};
//     swipes.forEach(r => {
//       const p = r.PartitionName2;
//       if (!partitionToday[p]) {
//         partitionToday[p] = getLocalDateString(new Date(), p);
//       }
//     });

//     // --- 1) TODAY’S HEADCOUNT: first swipe per person but ONLY for swipes where
//     // the swipe's partition-local date === that partition's current local date.
//     const filteredSwipesForToday = swipes.filter(r => {
//       const p = r.PartitionName2;
//       return getLocalDateString(r.LocaleMessageTime, p) === partitionToday[p];
//     });

//     const firstByPerson = {};
//     filteredSwipesForToday.forEach(r => {
//       const prev = firstByPerson[r.PersonGUID];
//       const t = new Date(r.LocaleMessageTime).getTime();
//       if (!prev || t < new Date(prev.LocaleMessageTime).getTime()) {
//         firstByPerson[r.PersonGUID] = r;
//       }
//     });

//     const todayRecs = Object.values(firstByPerson);
//     const today = { total: 0, Employee: 0, Contractor: 0 };
//     todayRecs.forEach(r => {
//       today.total++;
//       if (isEmployeeType(r.PersonnelType)) today.Employee++;
//       else today.Contractor++;
//     });

//     // --- 2) REALTIME: build lastByPerson, but only from swipes that are on the partition's LOCAL "today".
//     // This removes partitions that only have older swipes.
//     const lastByPerson = {};
//     swipes.forEach(r => {
//       const p = r.PartitionName2;
//       // skip any swipe that is NOT on this partition's current local date
//       if (getLocalDateString(r.LocaleMessageTime, p) !== partitionToday[p]) return;

//       const prev = lastByPerson[r.PersonGUID];
//       const t = new Date(r.LocaleMessageTime).getTime();
//       if (!prev || t > new Date(prev.LocaleMessageTime).getTime()) {
//         lastByPerson[r.PersonGUID] = r;
//       }
//     });

//     // Build realtime counts only from the filtered lastByPerson
//     const realtime = {};
//     const unmappedDoors = new Set();

//     Object.values(lastByPerson).forEach(r => {
//       const rawFloor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
//       const floorNorm = rawFloor ? String(rawFloor).trim().toLowerCase() : '';

//       // STRICT: drop 'Out of office' from realtime details and counts
//       if (floorNorm === 'out of office') return;

//       const p = r.PartitionName2;
//       if (!realtime[p]) {
//         realtime[p] = { total: 0, Employee: 0, Contractor: 0, floors: {} };
//       }

//       realtime[p].total++;
//       if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
//       else realtime[p].Contractor++;

//       const normFloorLabel = rawFloor ? String(rawFloor).trim() : 'Unmapped';
//       realtime[p].floors[normFloorLabel] = (realtime[p].floors[normFloorLabel] || 0) + 1;
//     });

//     if (unmappedDoors.size) {
//       console.warn('Unmapped doors:\n' + Array.from(unmappedDoors).join('\n'));
//     }

//     // details: use the filtered lastByPerson values (and drop Out of office)
//     const details = Object.values(lastByPerson)
//       .map(r => {
//         const rawFloor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmappedDoors);
//         const floor = rawFloor ? String(rawFloor).trim() : null;
//         return { ...r, Floor: floor };
//       })
//       .filter(d => {
//         const f = d.Floor;
//         return !(f && String(f).trim().toLowerCase() === 'out of office');
//       });

//     return res.json({
//       success: true,
//       today,
//       realtime,
//       details
//     });
//   } catch (err) {
//     console.error(err);
//     return res.status(500).json({ success: false, message: 'Live summary failed' });
//   }
// };

// // 📝📝📝📝📝📝new code wiht time zone end




// exports.getHistoricalOccupancy = async (req, res) => {
//   const location = req.params.location || null;
//   try {
//     const raw = await service.fetchHistoricalOccupancy(location);

//     // first swipe per person per date
//     const byDate = raw.reduce((acc, r) => {
//       const iso = (r.LocaleMessageTime instanceof Date)
//         ? r.LocaleMessageTime.toISOString()
//         : r.LocaleMessageTime;
//       const date = iso.slice(0,10);
//       acc[date] = acc[date] || {};
//       const prev = acc[date][r.PersonGUID];
//       if (!prev || new Date(iso) < new Date(prev.LocaleMessageTime)) {
//         acc[date][r.PersonGUID] = { ...r, LocaleMessageTime: iso };
//       }
//       return acc;
//     }, {});

//     const summaryByDate = [];
//     const details = [];

//     Object.keys(byDate).sort().forEach(date => {
//       const recs = Object.values(byDate[date]);
//       details.push(...recs);

//       // initialize counts
//       const regionCounts = { total: 0, Employee: 0, Contractor: 0 };
//       const partitionCounts = {};

//       recs.forEach(r => {
//         regionCounts.total++;
//         if (isEmployeeType(r.PersonnelType)) regionCounts.Employee++;
//         else regionCounts.Contractor++;

//         if (!location) {
//           const p = r.PartitionName2;
//           if (!partitionCounts[p]) {
//             partitionCounts[p] = { total: 0, Employee: 0, Contractor: 0 };
//           }
//           partitionCounts[p].total++;
//           if (isEmployeeType(r.PersonnelType)) partitionCounts[p].Employee++;
//           else partitionCounts[p].Contractor++;
//         }
//       });

//       summaryByDate.push({
//         date,
//         day: new Date(date).toLocaleDateString('en-US', { weekday:'long' }),
//         region: location
//           ? { name: location, ...regionCounts }
//           : { name: 'EMEA', ...regionCounts },
//         partitions: location ? undefined : partitionCounts
//       });
//     });

//     return res.json({ success: true, summaryByDate, details });
//   } catch (err) {
//     console.error(err);
//     return res.status(500).json({ success: false, message: 'Historical fetch failed' });
//   }
// };





// //////////⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️⬇️ all new code 


// C:\Users\W0024618\Desktop\emea-occupancy-backend\src\controllers\occupancy.controller.js

const service = require('../services/occupancy.service');

const {
  doorMap,
  normalizedDoorZoneMap,
  doorZoneMap,
  zoneFloorMap,
  normalizeDoorName
} = require('../utils/doorMap');


function isEmployeeType(pt) {
  return ['Employee', 'Terminated Employee', 'Terminated Personnel'].includes(pt);
}


function lookupFloor(partition, rawDoor, direction, unmapped) {
  const norm = normalizeDoorName(rawDoor);
  const key = `${norm}___${direction}`;

  // 1) Try normalized lookup (global map)
  const zone = normalizedDoorZoneMap[key];
  if (zone) {
    const f = zoneFloorMap[zone];
    // if zone has a known floor -> return it
    if (f) return f;
    // zone exists but has no floor (e.g. "Out of office") -> treat as known but Unknown floor
    // return immediately to avoid falling back to per-partition doorMap and marking as unmapped
    return 'Unknown';
  }

  // 2) Fallback to per-partition doorMap
  const entry = doorMap.find(d =>
    d.normalizedDoor === norm && d.partition === partition
  );
  if (entry) {
    const fl = direction === 'InDirection'
      ? entry.inDirectionFloor
      : entry.outDirectionFloor;
    if (fl) return fl;
  }

  // 3) Nothing matched → record & return Unknown
  unmapped.add(`${partition}|${rawDoor}`);
  return 'Unknown';
}


function mapDoorToZone(rawDoor, rawDir) {
  const key = normalizeDoorName(rawDoor) + '___' + (rawDir === 'InDirection' ? 'InDirection' : 'OutDirection');
  const zone = normalizedDoorZoneMap[key];
  if (!zone) return 'Unknown Zone';
  // for OutDirection that aren’t true “Out of office”, strip trailing “ Zone”
  if (rawDir === 'OutDirection' && zone !== 'Out of office') {
    return zone.replace(/\s+Zone$/i, '');
  }
  return zone;
}


exports.getLiveOccupancy = async (req, res) => {
  try {
    const data = await service.fetchLiveOccupancy();
    res.json({ success: true, count: data.length, data });
  } catch (e) {
    console.error(e);
    res.status(500).json({ success: false, message: 'Live fetch failed' });
  }
};


exports.getLiveSummary = async (req, res) => {
  try {
    const swipes = await service.fetchLiveOccupancy();

    // first swipe per person = TODAY (first swipe in the returned set)
    const first = {};
    swipes.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!first[r.PersonGUID] || t < new Date(first[r.PersonGUID].LocaleMessageTime).getTime()) {
        first[r.PersonGUID] = r;
      }
    });
    const today = { total: 0, Employee: 0, Contractor: 0 };
    Object.values(first).forEach(r => {
      today.total++;
      if (isEmployeeType(r.PersonnelType)) today.Employee++;
      else today.Contractor++;
    });

    // last swipe per person for realtime
    const last = {};
    swipes.forEach(r => {
      const t = new Date(r.LocaleMessageTime).getTime();
      if (!last[r.PersonGUID] || t > new Date(last[r.PersonGUID].LocaleMessageTime).getTime()) {
        last[r.PersonGUID] = r;
      }
    });

    const realtime = {};
    const unmapped = new Set();


    const enriched = Object.values(last).map(r => {
      // determine zone (try normalized lookup + fallback)
      const zone = mapDoorToZone(r.Door, r.Direction);

      // lookupFloor returns 'Unknown' for unmapped (and adds to unmapped set)
      const floor = lookupFloor(r.PartitionName2, r.Door, r.Direction, unmapped);

      return {
        ...r,
        // keep Unknown Zone as null, keep actual zone strings (including "Out of office")
        Zone: zone === 'Unknown Zone' ? null : zone,
        Floor: floor === 'Unknown' ? null : floor

      };
    });

    // Strictly remove "Out of office" records from details (and from counting below)
    const details = enriched.filter(r => r.Zone !== 'Out of office');

    // Counting loop (keeps any special logic but enforces strict drop on "Out of office")
    Object.values(last).forEach(r => {
      const p = r.PartitionName2;

      // determine zone again for each record (use mapDoorToZone to be consistent)
      const zoneRaw = mapDoorToZone(r.Door, r.Direction);

      // STRICT RULE: if zone resolved to exact "Out of office" -> skip counting
      if (zoneRaw === 'Out of office') return;

      // Unknown keys → drop
      if (zoneRaw === 'Unknown Zone') return;

      // ensure bucket exists when we decide to count
      const ensureBucket = (part) => {
        if (!realtime[part]) realtime[part] = { total: 0, Employee: 0, Contractor: 0, floors: {}, zones: {} };
      };


      if (r.Direction === 'OutDirection') {
        // allow certain valid OutDirection zones (Assembly Area, Reception Area, ...)
        const allowedOutZones = new Set(['Assembly Area', 'Reception Area']);
        if (!zoneRaw.endsWith('Outer Area') && !allowedOutZones.has(zoneRaw)) {
          return;
        }

        // safe to count
        ensureBucket(p);
        realtime[p].total++;
        if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
        else realtime[p].Contractor++;

        // floor bucket
        const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
        if (fl !== 'Unknown') {
          realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
        }

        // zone bucket (clean trailing " Zone" for OutDirection cases where appropriate)
        const z = (r.Direction === 'OutDirection' && zoneRaw !== 'Out of office')
          ? zoneRaw.replace(/\s+Zone$/i, '')
          : zoneRaw;
        if (z) realtime[p].zones[z] = (realtime[p].zones[z] || 0) + 1;

        return;
      }

      // ── All other partitions (existing logic) ──
      // fallback logic to determine zone (keeps previous behaviour if normalized lookup not present)
      const normKey = normalizeDoorName(r.Door) + '___' + r.Direction;
      let zone = normalizedDoorZoneMap[normKey];
      if (!zone) {
        const entry = doorMap.find(d =>
          d.normalizedDoor === normalizeDoorName(r.Door) &&
          d.partition === p
        );
        zone = entry
          ? (r.Direction === 'InDirection'
            ? normalizedDoorZoneMap[`${entry.normalizedDoor}___InDirection`]
            : normalizedDoorZoneMap[`${entry.normalizedDoor}___OutDirection`])
          : null;
      }

      // if resolved zone (via fallback) is "Out of office" → skip (strict)
      if (zone === 'Out of office') return;
      if (!zone && zone !== null) {
        // keep going — zone could be null if no mapping found, but Unknown Zone was handled above
      }

      // ok to count
      ensureBucket(p);
      realtime[p].total++;
      if (isEmployeeType(r.PersonnelType)) realtime[p].Employee++;
      else realtime[p].Contractor++;

      const fl = lookupFloor(p, r.Door, r.Direction, unmapped);
      if (fl !== 'Unknown') {
        realtime[p].floors[fl] = (realtime[p].floors[fl] || 0) + 1;
      }

      const z = zone ? (r.Direction === 'OutDirection' && zone !== 'Out of office' ? zone.replace(/\s+Zone$/i, '') : zone) : null;
      if (z) realtime[p].zones[z] = (realtime[p].zones[z] || 0) + 1;
    });

    // Log to server console for quick dev feedback:
    if (unmapped.size) console.warn('Unmapped doors:', Array.from(unmapped));

    res.json({
      success: true,
      today,
      realtime,
      // expose the raw list of partition|door keys that had no mapping:
      unmapped: Array.from(unmapped),
      details    // enriched details with Zone & Floor, with "Out of office" removed
    });

  } catch (e) {
    console.error(e);
    res.status(500).json({ success: false, message: 'Summary failed' });
  }
};


exports.getHistoricalOccupancy = async (req, res) => {
  const location = req.params.location || null;
  try {
    // 1) Pull in rows — each now has non-null PartitionNameFriendly
    const raw = await service.fetchHistoricalOccupancy(location);

    // 2) Dedupe to first swipe per person per day
    const byDate = raw.reduce((acc, r) => {
      // force into a "YYYY-MM-DD" string
      const date = new Date(r.LocaleMessageTime).toISOString().slice(0, 10);
      acc[date] = acc[date] || {};
      if (
        !acc[date][r.PersonGUID] ||
        new Date(r.LocaleMessageTime) < new Date(acc[date][r.PersonGUID].LocaleMessageTime)
      ) {
        acc[date][r.PersonGUID] = r;
      }
      return acc;
    }, {});

    const summaryByDate = [];
    const details = [];

    // 3) Build summaries
    Object.keys(byDate).sort().forEach(date => {
      const recs = Object.values(byDate[date]);
      details.push(...recs);

      // region totals
      const region = { total: 0, Employee: 0, Contractor: 0 };
      // per-partition buckets
      const partitions = {};

      recs.forEach(r => {
        // increment region
        region.total++;
        if (isEmployeeType(r.PersonnelType)) region.Employee++;
        else region.Contractor++;

        // only build partitions if we're not filtering to a single location
        if (!location) {
          // use the friendly name (guaranteed non-null!), with fallback
          const key = r.PartitionNameFriendly || 'EMEA.Default';
          if (!partitions[key]) {
            partitions[key] = { total: 0, Employee: 0, Contractor: 0 };
          }
          partitions[key].total++;
          if (isEmployeeType(r.PersonnelType)) partitions[key].Employee++;
          else partitions[key].Contractor++;
        }
      });

      summaryByDate.push({
        date,
        day: new Date(date).toLocaleDateString('en-US', { weekday: 'long' }),
        region: location
          ? { name: location, ...region }
          : { name: 'EMEA', ...region },
        // if location is provided, you can still emit an empty object (`{}`) or skip:
        partitions: location ? {} : partitions
      });
    });

    // 4) Return
    res.json({ success: true, summaryByDate, details });
  } catch (e) {
    console.error(e);
    res.status(500).json({ success: false, message: 'Historical failed' });
  }
};

