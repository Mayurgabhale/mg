//C:\Users\W0024618\Desktop\emea-occupancy-backend\src\services\occupancy.service.js
const { poolPromise, sql } = require('../config/db');

function quoteList(arr){
  return arr.map(v=>`'${v}'`).join(', ');
}

/**
 * EMEA partition list
 */
const partitionList = [
  'AUT.Vienna',
  'DU.Abu Dhab',
  'IE.Dublin',
  'IT.Rome',
  'LT.Vilnius',
  'MA.Casablanca',
  'RU.Moscow',
  'UK.London',
  'ES.Madrid'
];


/**
 * Live occupancy (today)
 */


// exports.fetchLiveOccupancy = async () => {
//   const pool = await poolPromise;
//   const partitionsSql = partitionList.map(p => `'${p.replace("'", "''")}'`).join(',');

//   const query = `
//     WITH CombinedQuery AS (
//       SELECT
//         DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
//         t1.ObjectName1,
//         t1.ObjectName2            AS Door,
//         CASE
//           WHEN t3.Name IN ('Contractor','Terminated Contractor')
//             THEN t2.Text12
//           ELSE CAST(t2.Int1 AS NVARCHAR)
//         END                       AS EmployeeID,
//         t2.text5                  AS Text5,
//         t1.PartitionName2         AS PartitionName2,
//         t1.ObjectIdentity1        AS PersonGUID,
//         t3.Name                   AS PersonnelType,
//         t2.Text4                   AS CompanyName,   -- ✅ company
//         t2.Text5                   AS PrimaryLocation, -- ✅ location
//         COALESCE(
//           TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
//           TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
//           sc.value
//         )                         AS CardNumber,
//         t5a.value                 AS AdmitCode,
//         t5d.value                 AS Direction
//       FROM [ACVSUJournal_00011028].[dbo].[ACVSUJournalLog] AS t1
//       LEFT JOIN [ACVSCore].[Access].[Personnel]     AS t2
//         ON t1.ObjectIdentity1 = t2.GUID
//       LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
//         ON t2.PersonnelTypeId = t3.ObjectID
//       LEFT JOIN [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxmlShred] AS t5a
//         ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
//       LEFT JOIN [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxmlShred] AS t5d
//         ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
//       LEFT JOIN [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxml] AS t_xml
//         ON t1.XmlGUID = t_xml.GUID
//       LEFT JOIN (
//         SELECT GUID, value
//         FROM [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxmlShred]
//         WHERE Name IN ('Card','CHUID')
//       ) AS sc
//         ON t1.XmlGUID = sc.GUID
//       WHERE
//         t1.MessageType = 'CardAdmitted'
//         AND t1.PartitionName2 IN (${partitionsSql})
//         AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
//             = CONVERT(DATE, GETDATE())
//     )
//     SELECT
//       LocaleMessageTime,
//       CONVERT(VARCHAR(10), LocaleMessageTime, 23) AS Dateonly,
//       CONVERT(VARCHAR(8), LocaleMessageTime, 108) AS Swipe_Time,
//       EmployeeID,
//       PersonGUID,
//       ObjectName1,
//       Door,
//       PersonnelType,
//       CardNumber,
//       Text5,
//       PartitionName2,
//       AdmitCode,
//       Direction,
//       CompanyName,
//       PrimaryLocation
//     FROM CombinedQuery
//     ORDER BY LocaleMessageTime ASC;
//   `;

//   const result = await pool.request().query(query);
//   return result.recordset;
// };

// /**
//  * Core raw‐data fetch for the past N days, all or by location.
//  */
// exports.fetchHistoricalData = async ({ days = 7, location = null }) => {
//   const pool = await poolPromise;
//   const partitionsSql = partitionList.map(p => `'${p.replace("'", "''")}'`).join(',');
//   const locationFilter = location
//     ? `AND t1.PartitionName2 = @location`
//     : `AND t1.PartitionName2 IN (${partitionsSql})`;

//   const query = `
//     WITH Hist AS (
//       SELECT
//         DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
//         t1.ObjectName1,
//         t1.ObjectName2       AS Door,
//         CASE
//           WHEN t3.Name IN ('Contractor','Terminated Contractor') THEN t2.Text12
//           ELSE CAST(t2.Int1 AS NVARCHAR)
//         END                   AS EmployeeID,
//         t2.text5             AS Text5,
//         t1.PartitionName2    AS PartitionName2,
//         t1.ObjectIdentity1   AS PersonGUID,
//         t3.Name              AS PersonnelType,
//         t2.Text4                   AS CompanyName,   -- ✅ company
//      t2.Text5                   AS PrimaryLocation, -- ✅ location
//         COALESCE(
//           TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
//           TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
//           sc.value
//         )                     AS CardNumber,
//         t5a.value            AS AdmitCode,
//         t5d.value            AS Direction,
//         CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC)) AS SwipeDate
//       FROM [ACVSUJournal_00011028].[dbo].[ACVSUJournalLog] AS t1
//       LEFT JOIN [ACVSCore].[Access].[Personnel]     AS t2
//         ON t1.ObjectIdentity1 = t2.GUID
//       LEFT JOIN [ACVSCore].[Access].[PersonnelType] AS t3
//         ON t2.PersonnelTypeId = t3.ObjectID
//       LEFT JOIN [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxmlShred] AS t5a
//         ON t1.XmlGUID = t5a.GUID AND t5a.Name = 'AdmitCode'
//       LEFT JOIN [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxmlShred] AS t5d
//         ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
//       LEFT JOIN [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxml] AS t_xml
//         ON t1.XmlGUID = t_xml.GUID
//       LEFT JOIN (
//         SELECT GUID, value
//         FROM [ACVSUJournal_00011028].[dbo].[ACVSUJournalLogxmlShred]
//         WHERE Name IN ('Card','CHUID')
//       ) AS sc
//         ON t1.XmlGUID = sc.GUID
//       WHERE
//         t1.MessageType = 'CardAdmitted'
//         ${locationFilter}
//         AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
//             >= DATEADD(DAY, -${days}, CONVERT(DATE, GETDATE()))
//     )
//     SELECT *
//     FROM Hist
//     ORDER BY LocaleMessageTime ASC;
//   `;

//   const req = pool.request();
//   if (location) req.input('location', sql.NVarChar, location);
//   const result = await req.query(query);
//   return result.recordset;
// };

// /**
//  * Public wrapper: always last 7 days, all or by location.
//  */
// exports.fetchHistoricalOccupancy = async (location) => {
//   return exports.fetchHistoricalData({ days: 7, location: location || null });
// };

// module.exports.partitionList = partitionList;






// ########################################### 



//ABHISHEK//

//LIVE ocuupacy//

exports.fetchLiveOccupancy = async () => {
  const pool = await poolPromise;
  const parts = quoteList(partitionList);

  const query = `
    WITH CombinedEmployeeData AS (
      SELECT
        t1.ObjectName1,
        t1.ObjectName2             AS Door,
        CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
        t3.Name                    AS PersonnelType,
        t1.ObjectIdentity1         AS PersonGUID,
        COALESCE(
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
          TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
          sc.value
        )                          AS CardNumber,
        CASE
          WHEN t1.ObjectName2 LIKE 'EMEA_AUT_VIE%'   THEN 'Vienna'
          WHEN t1.ObjectName2 LIKE 'EMEA_UAE_DUB%'   THEN 'Abu Dhabi'
          WHEN t1.ObjectName2 LIKE '%VIENNA%'        THEN 'EMEA.Default'
          WHEN t1.ObjectName2 LIKE 'EMEA_IRE_DUB%'   THEN 'Dublin'
          WHEN t1.ObjectName2 LIKE 'EMEA_Rome%' OR t1.ObjectName2 LIKE 'EMEA Rome%' THEN 'Rome'
          WHEN t1.ObjectName2 LIKE 'ES MADRID%'      THEN 'Madrid'
          WHEN t1.ObjectName2 LIKE 'EMEA_LT_VNO_DELTA%' 
             OR t1.ObjectName2 LIKE 'EMEA_LT_VNO_GAMA%' 
             OR t1.ObjectName2 LIKE 'EMEA_LTU_VNO_DELTA%' 
             OR t1.ObjectName2 LIKE 'EMEA_LTU_VNO_GAMA%' 
             OR t1.ObjectName2 LIKE 'LT-VNO-DELTA%'  THEN 'Vilnius'
          WHEN t1.ObjectName2 LIKE 'EMEA_MOR_CASA%'  THEN 'Casablanca'
          WHEN t1.ObjectName2 LIKE 'EMEA_RU%'        THEN 'Moscow'
          WHEN t1.ObjectName2 LIKE 'WU-UK-MH%'       THEN 'London'
          ELSE t1.PartitionName2
        END                        AS PartitionName2,
        DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
        t5d.value                  AS Direction,
        t2.Text4                   AS CompanyName,
        t2.Text5                   AS PrimaryLocation
      FROM ACVSUJournal_00011028.dbo.ACVSUJournalLog t1
      JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
      JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
      LEFT JOIN ACVSUJournal_00011028.dbo.ACVSUJournalLogxmlShred t5d
        ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
      LEFT JOIN ACVSUJournal_00011028.dbo.ACVSUJournalLogxml t_xml
        ON t1.XmlGUID = t_xml.GUID
      LEFT JOIN (
        SELECT GUID, value
        FROM ACVSUJournal_00011028.dbo.ACVSUJournalLogxmlShred
        WHERE Name IN ('Card','CHUID')
      ) AS sc
        ON t1.XmlGUID = sc.GUID
      WHERE
        t1.MessageType = 'CardAdmitted'
        AND t1.PartitionName2 IN (${parts})
        AND CONVERT(DATE, DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC))
            = CONVERT(DATE, GETDATE())
    ), Ranked AS (
      SELECT *,
        ROW_NUMBER() OVER (PARTITION BY PersonGUID ORDER BY LocaleMessageTime DESC) AS rn
      FROM CombinedEmployeeData
    )
    SELECT
      ObjectName1,
      Door,
      PersonnelType,
      EmployeeID,
      CardNumber,
      PartitionName2,
      LocaleMessageTime,
      Direction,
      PersonGUID,
      CompanyName,
      PrimaryLocation
    FROM Ranked
    WHERE rn = 1;
  `;

  const result = await pool.request().query(query);
  return result.recordset;
};



//Historical Data//



exports.fetchHistoricalData = async ({ location = null }) => {
  const pool = await poolPromise;

  // 1. Get all ACVSUJournal_* database names dynamically
  const dbResult = await pool.request().query(`
    SELECT name 
    FROM sys.databases
    WHERE name LIKE 'ACVSUJournal[_]%'
    ORDER BY CAST(REPLACE(name, 'ACVSUJournal_', '') AS INT)
  `);

  // Map DBs and pick last 2 only
  const databases = dbResult.recordset.map(r => r.name);
  const selectedDbs = databases.slice(-2); // newest and previous

  if (selectedDbs.length === 0) {
    throw new Error("No ACVSUJournal_* databases found.");
  }

  // 2. Outer filter
  const outerFilter = location
    ? `WHERE PartitionNameFriendly = @location`
    : `WHERE PartitionNameFriendly IN (${quoteList([
        'Vienna',
        'Abu Dhabi',
        'EMEA.Default',
        'Dublin',
        'Rome',
        'Madrid',
        'Vilnius',
        'Casablanca',
        'Moscow',
        'London'

      ])})`;

  // 3. Build UNION ALL query across selected DBs only
  const unionQueries = selectedDbs.map(db => `
    SELECT
      DATEADD(MINUTE, -1 * t1.MessageLocaleOffset, t1.MessageUTC) AS LocaleMessageTime,
      t1.ObjectName1,
      t1.ObjectName2               AS Door,
      CASE WHEN t2.Int1 = 0 THEN t2.Text12 ELSE CAST(t2.Int1 AS NVARCHAR) END AS EmployeeID,
      t3.Name                      AS PersonnelType,
      t1.ObjectIdentity1           AS PersonGUID,
      t2.Text4                     AS CompanyName,
      t2.Text5                     AS PrimaryLocation,
      COALESCE(
        CASE
          WHEN t1.ObjectName2 LIKE 'EMEA_AUT_VIE%'   THEN 'Vienna'
          WHEN t1.ObjectName2 LIKE 'EMEA_UAE_DUB%'   THEN 'Abu Dhabi'
          WHEN t1.ObjectName2 LIKE '%VIENNA%'        THEN 'EMEA.Default'
          WHEN t1.ObjectName2 LIKE 'EMEA_IRE_DUB%'   THEN 'Dublin'
          WHEN t1.ObjectName2 LIKE 'EMEA_Rome%' OR t1.ObjectName2 LIKE 'EMEA Rome%' THEN 'Rome'
          WHEN t1.ObjectName2 LIKE 'ES MADRID%'      THEN 'Madrid'
          WHEN t1.ObjectName2 LIKE 'EMEA_LT_VNO_DELTA%' 
             OR t1.ObjectName2 LIKE 'EMEA_LT_VNO_GAMA%' 
             OR t1.ObjectName2 LIKE 'EMEA_LTU_VNO_DELTA%' 
             OR t1.ObjectName2 LIKE 'EMEA_LTU_VNO_GAMA%' 
             OR t1.ObjectName2 LIKE 'LT-VNO-DELTA%'  THEN 'Vilnius'
          WHEN t1.ObjectName2 LIKE 'EMEA_MOR_CASA%'  THEN 'Casablanca'
          WHEN t1.ObjectName2 LIKE 'EMEA_RU%'        THEN 'Moscow'
          WHEN t1.ObjectName2 LIKE 'WU-UK-MH%'       THEN 'London'
          ELSE t1.PartitionName2
        END,
        'EMEA.Default'
      ) AS PartitionNameFriendly,
      COALESCE(
        TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID/Card)[1]','varchar(50)'),
        TRY_CAST(t_xml.XmlMessage AS XML).value('(/LogMessage/CHUID)[1]','varchar(50)'),
        sc.value
      ) AS CardNumber,
      t5d.value AS Direction
    FROM ${db}.dbo.ACVSUJournalLog t1
    JOIN ACVSCore.Access.Personnel       t2 ON t1.ObjectIdentity1 = t2.GUID
    JOIN ACVSCore.Access.PersonnelType   t3 ON t2.PersonnelTypeID = t3.ObjectID
    LEFT JOIN ${db}.dbo.ACVSUJournalLogxmlShred t5d
      ON t1.XmlGUID = t5d.GUID AND t5d.Value IN ('InDirection','OutDirection')
    LEFT JOIN ${db}.dbo.ACVSUJournalLogxml t_xml
      ON t1.XmlGUID = t_xml.GUID
    LEFT JOIN (
      SELECT GUID, value
      FROM ${db}.dbo.ACVSUJournalLogxmlShred
      WHERE Name IN ('Card','CHUID')
    ) AS sc
      ON t1.XmlGUID = sc.GUID
    WHERE t1.MessageType = 'CardAdmitted'
  `).join('\nUNION ALL\n');

  // 4. Final query
  const query = `
    WITH Hist AS (
      ${unionQueries}
    )
    SELECT *
    FROM Hist
    ${outerFilter}
    ORDER BY LocaleMessageTime ASC;
  `;

  const req = pool.request();
  if (location) {
    req.input('location', sql.NVarChar, location);
  }
  const result = await req.query(query);
  return result.recordset;
};

// keep this for occupancy
exports.fetchHistoricalOccupancy = async (location) =>
  exports.fetchHistoricalData({ location: location || null });


