
 // selected company from the company table (country||city||company)
  const [selectedCompany, setSelectedCompany] = useState(null);

  // NEW: selected personnel type coming from the summary table ('Employee'|'Contractor'|null)
  const [selectedPersonnel, setSelectedPersonnel] = useState(null);
  // NEW: selected summary partition (country||city) from summary table clicks
  const [selectedSummaryPartition, setSelectedSummaryPartition] = useState(null);


{/* Summary (left) + Company table (right) */}
            <Box sx={{ display: 'flex', gap: 2, width: '100%', flexWrap: { xs: 'wrap', md: 'nowrap' } }}>
              {/* Left: Summary */}
              <Box sx={{ flex: 1, minWidth: 320 }}>
                <Paper elevation={3} sx={{ px: 1, py: 1, border: '3px solid #000', borderRadius: 2 }}>
                  {/* keep same table markup but wrapped in TableContainer with fixed maxHeight */}
                  <TableContainer sx={{ maxHeight: 420 }}>
                    <Table sx={{ border: '2px solid #000' }} size='small'>
                      <TableHead>
                        <TableRow>
                          <TableCell colSpan={isCostaRica ? 6 : 5} align="center"
                            sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#fff', border: '2px solid #000' }}>
                            {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                          </TableCell>
                        </TableRow>

                        <TableRow sx={{ bgcolor: '#FFC107' }}>
                          {[
                            'Country', 'City', 'Employee', 'Contractors',
                            ...(isCostaRica ? ['Temp Badge'] : []),
                            'Total'
                          ].map(h => {
                            // clickable header for global personnel filter
                            if (h === 'Employee' || h === 'Contractors') {
                              const personnelType = h === 'Employee' ? 'Employee' : 'Contractor';
                              const isActive =
                                selectedPersonnel === personnelType && !selectedSummaryPartition;

                              return (
                                <TableCell
                                  key={h}
                                  align="right"
                                  onClick={() => {
                                    // toggle on repeated click
                                    if (isActive) {
                                      setSelectedPersonnel(null);
                                    } else {
                                      setSelectedPersonnel(personnelType);
                                      setSelectedSummaryPartition(null); // global filter only
                                      setSelectedCompany(null);          // clear company filter
                                      setShowDetails(true);
                                    }
                                  }}
                                  sx={{
                                    color: isActive ? '#fff' : '#000',
                                    fontWeight: 'bold',
                                    fontSize: 14,
                                    border: '2px solid #000',
                                    cursor: 'pointer',
                                    textAlign: 'right',
                                    bgcolor: isActive ? '#474747' : '#FFC107', // dark highlight if active
                                    '&:hover': {
                                      backgroundColor: isActive ? '#5a5a5a' : '#f2f2f2',
                                    },
                                  }}
                                >
                                  {h}
                                </TableCell>
                              );
                            }
                            // non-clickable headers (Country/City/Total/Temp Badge)
                            return (
                              <TableCell
                                key={h}
                                align={['Country', 'City'].includes(h) ? 'left' : 'right'}
                                sx={{
                                  color: '#000',
                                  fontWeight: 'bold',
                                  fontSize: 14,
                                  border: '2px solid #000',
                                }}
                              >
                                {h}
                              </TableCell>
                            );
                          })}
                        </TableRow>

                      </TableHead>
                      <TableBody>
                        {partitionRows.map((row, i) => (
                          <TableRow key={i}>
                            <TableCell sx={{ border: '2px solid #000' }}>{row.country}</TableCell>
                            <TableCell sx={{ border: '2px solid #000' }}>{row.city}</TableCell>
                            <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.employee}</TableCell>
                            <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.contractor}</TableCell>
                            {isCostaRica && (
                              <TableCell align="right" sx={{ border: '2px solid #000' }}>{row.tempBadge}</TableCell>
                            )}
                            <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                              {row.total}
                            </TableCell>
                          </TableRow>
                        ))}
                        <TableRow sx={{ bgcolor: '#666' }}>
                          <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            Total
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {partitionRows.reduce((s, r) => s + r.employee, 0)}
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {partitionRows.reduce((s, r) => s + r.contractor, 0)}
                          </TableCell>
                          {isCostaRica && (
                            <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                              {partitionRows.reduce((s, r) => s + r.tempBadge, 0)}
                            </TableCell>
                          )}
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                            {partitionRows.reduce((s, r) => s + r.total, 0)}
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>
                </Paper>
                <Box display="flex" justifyContent="center" sx={{ mt: 1, gap: 2 }}>
                  <Button variant="contained" sx={{ bgcolor: '#FFC107', color: '#000' }}
                    onClick={() => setShowDetails(v => !v)}>
                    {showDetails ? 'Hide Details' : 'See Details'}
                  </Button>
                  {showDetails && (
                    <Button variant="outlined" sx={{ ml: 2, borderColor: '#FFC107', color: '#FFC107' }}
                      onClick={handleExport}>
                      Export to Excel
                    </Button>
                  )}
                  <Button variant="contained" sx={{ ml: 2, bgcolor: '#FFC107', color: '#000' }}
                    onClick={handleExportSummary}
                    disabled={!partitionRows.length}
                  >
                    Export Summary to Excel
                  </Button>
                </Box>
              </Box>
              {/* Right: Company-level table */}
              <Box sx={{ flex: 1, minWidth: 320 }}>
                {/* make Paper a column flex so TableContainer can fill and scroll */}
                <Paper elevation={3} sx={{ p: 1, border: '3px solid #000', borderRadius: 2, display: 'flex', flexDirection: 'column' }}>
                  {/* TableContainer with same maxHeight as left so heights match; overflowY will show scrollbar on right */}
                  <TableContainer sx={{ maxHeight: 270, overflowY: 'auto' }}>
                    <Table sx={{ border: '2px solid #000' }} size="small">
                      <TableHead>
                        <TableRow>
                          <TableCell colSpan={4} align="center"
                            sx={{ fontWeight: 'bold', fontSize: 16, bgcolor: '#000', color: '#FFC107', border: '2px solid #000' }}>
                            {format(pickedDate, 'EEEE, d MMMM, yyyy')}
                          </TableCell>
                        </TableRow>
                        <TableRow sx={{ bgcolor: '#FFC107' }}>
                          {['Country', 'City', 'Company', 'Total'].map(h => (
                            <TableCell key={h} align={h === 'Country' || h === 'City' ? 'left' : 'center'}
                              sx={{ color: '#000', fontWeight: 'bold', fontSize: 14, border: '2px solid #000' }}>
                              {h}
                            </TableCell>
                          ))}
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {companyRows.length > 0 ? companyRows.map((r, i) => {
                          const rowKey = `${r.country}||${r.city}||${r.company}`;
                          return (
                            <TableRow
                              key={`${r.company}-${i}`}
                              onClick={() => {
                                if (selectedCompany === rowKey) {
                                  setSelectedCompany(null);
                                  setShowDetails(true);
                                } else {
                                  setSelectedCompany(rowKey);
                                  setShowDetails(true);
                                }
                              }}
                              sx={{
                                cursor: 'pointer',
                                '&:hover': { backgroundColor: '#474747' },
                                ...(selectedCompany === rowKey ? { backgroundColor: '#474747' } : {})
                              }}
                              tabIndex={0}
                              role="button"
                            >
                              <TableCell sx={{ border: '2px solid #000' }}>{r.country}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.city}</TableCell>
                              <TableCell sx={{ border: '2px solid #000' }}>{r.company}</TableCell>
                              <TableCell align="right" sx={{ bgcolor: '#FFC107', fontWeight: 'bold', border: '2px solid #000' }}>
                                {r.total}
                              </TableCell>
                            </TableRow>
                          );
                        }) : (
                          <TableRow>
                            <TableCell colSpan={4} sx={{ border: '2px solid #000', textAlign: 'center', color: '#666', fontStyle: 'italic' }}>
                              No records for this date.
                            </TableCell>
                          </TableRow>
                        )}

                        <TableRow sx={{ bgcolor: '#666' }}>
                          <TableCell colSpan={2} align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            Total
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', border: '2px solid #000' }}>
                            {/* empty */}
                          </TableCell>
                          <TableCell align="right" sx={{ color: '#fff', fontWeight: 'bold', bgcolor: '#333', border: '2px solid #000' }}>
                            {companyRows.reduce((s, r) => s + r.total, 0)}
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </TableContainer>

                  <Box display="flex" justifyContent="center" sx={{ mt: 1 }}>
                    <Button
                      variant="contained"
                      sx={{ bgcolor: '#FFC107', color: '#000' }}
                      onClick={handleExportCompanies}
                      disabled={!companyRows.length}
                    >
                      Export Companies to Excel
                    </Button>
                  </Box>
                </Paper>
              </Box>
            </Box>




  // Replace the previous companyRows useMemo with this
const companyRows = useMemo(() => {
  if (!data || !pickedDate) return [];

  const ds = format(pickedDate, 'yyyy-MM-dd');

  // base filtered details: same as before (date + optional top-level filterCode)
  const baseFiltered = data.details.filter(r =>
    ((r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds) ||
      (r.SwipeDate && r.SwipeDate.slice(0, 10) === ds)) &&
    (!filterCode || (r.PartitionName2 && r.PartitionName2.startsWith(filterCode + '.')))
  );

  // If a summary partition is selected, parse it into country/city for filtering
  let selCountry = null;
  let selCity = null;
  if (selectedSummaryPartition) {
    const parts = String(selectedSummaryPartition || '').split('||');
    selCountry = parts[0] || null;
    selCity = parts[1] || null;
  }

  // Determine personnel filter predicate (if any)
  const wantPersonnel = selectedPersonnel ? String(selectedPersonnel).toLowerCase() : null;
  const matchesPersonnel = (r) => {
    if (!wantPersonnel) return true; // no personnel filter -> accept all
    const pt = String(r.PersonnelType || '').toLowerCase();
    if (wantPersonnel === 'employee') return pt.includes('employee') || pt === 'emp' || pt === 'e';
    if (wantPersonnel === 'contractor') return pt.includes('contractor') || pt === 'contract' || pt === 'c';
    return true;
  };

  // Build map only from rows that pass (summary partition filter if set) AND personnel filter if set.
  const map = new Map();

  baseFiltered.forEach(r => {
    // derive partition country & city (same code you already use elsewhere)
    const [code, cityRaw] = String(r.PartitionName2 || '').split('.');
    const city = (cityRaw || r.PartitionName2 || 'Unknown').replace('Partition', '').trim();
    const country = codeToCountry[code] || code || 'Unknown';

    // if a summary partition is selected, skip rows outside it
    if (selCountry && selCity) {
      if (country !== selCountry || city !== selCity) return;
    }

    // if personnel filter is active, skip rows that are not that personnel type
    if (!matchesPersonnel(r)) return;

    // canonicalize company (keeps your existing logic)
    const company = getCanonicalCompany(r);

    const key = `${country}||${city}||${company}`;
    const existing = map.get(key);
    if (existing) {
      existing.total += 1;
    } else {
      map.set(key, { country, city, company, total: 1 });
    }
  });

  return Array.from(map.values()).sort((a, b) => {
    if (a.country !== b.country) return a.country.localeCompare(b.country);
    if (a.city !== b.city) return a.city.localeCompare(b.city);
    return a.company.localeCompare(b.company);
  });
}, [data, pickedDate, filterCode, selectedPersonnel, selectedSummaryPartition]);




  // 3) build detailRows exactly like APAC, but support selectedCompany filtering
  const detailRows = useMemo(() => {
    if (!data || !pickedDate || !showDetails) return [];
    const ds = format(pickedDate, 'yyyy-MM-dd');

    // filter by date field (SwipeDate OR LocaleMessageTime) & partition
    const filtered = data.details.filter(r => {
      const inDay = (r.SwipeDate && r.SwipeDate.startsWith(ds))
        || (r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds);

      const inPartition = !filterCode
        || (r.PartitionName2 && r.PartitionName2.startsWith(filterCode + '.'));
      return inDay && inPartition;
    });

    // sort oldest → newest
    filtered.sort((a, b) =>
      (a.LocaleMessageTime || '').localeCompare(b.LocaleMessageTime || '')
    );

    // dedupe by PersonGUID, keep first
    const seen = new Set();
    let rows = filtered.filter(r => {
      if (seen.has(r.PersonGUID)) return false;
      seen.add(r.PersonGUID);
      return true;
    });

    // attach computed company + derived country/city (so UI and exports can use same values)
    rows = rows.map(r => {
      // const company = (r.CompanyName && String(r.CompanyName).trim())
      //   || (r.PersonnelType && String(r.PersonnelType).trim())
      //   || 'Unknown';
      const company = getCanonicalCompany(r);

      const [code, cityRaw] = String(r.PartitionName2 || '').split('.');
      const city = (cityRaw || r.PartitionName2 || 'Unknown').replace('Partition', '').trim();
      const country = codeToCountry[code] || code || 'Unknown';

      // return { ...r, CompanyNameComputed: company, _rowCity: city, _rowCountry: country };
      return { ...r, CompanyNameComputed: company, _rowCity: city, _rowCountry: country };
    });

    // If a company is selected (country||city||company) — filter details strictly to that selection
    if (selectedCompany) {
      const [selCountry, selCity, selCompanyRaw] = selectedCompany.split('||');
      const selCompanyNorm = String(selCompanyRaw || '').replace(/\s+/g, ' ').trim().toLowerCase();

      rows = rows.filter(r => {
        const rnCompany = String(r.CompanyNameComputed || 'Unknown').replace(/\s+/g, ' ').trim().toLowerCase();
        return rnCompany === selCompanyNorm && r._rowCity === selCity && r._rowCountry === selCountry;
      });
    }



    // --- NEW: if the user clicked a summary cell, filter details to that partition + personnel type ---
    if (selectedSummaryPartition || selectedPersonnel) {
      const [selCountry, selCity] = (selectedSummaryPartition || '').split('||');
      rows = rows.filter(r => {
        let ok = true;
        if (selectedSummaryPartition) {
          ok = ok && r._rowCountry === selCountry && r._rowCity === selCity;
        }
        if (selectedPersonnel) {
          const pt = String(r.PersonnelType || '').toLowerCase();
          if (selectedPersonnel === 'Employee') {
            ok = ok && pt.includes('employee');
          } else if (selectedPersonnel === 'Contractor') {
            ok = ok && pt.includes('contractor');
          }
        }
        return ok;
      });
    }

    return rows;
  }, [data, pickedDate, showDetails, filterCode, selectedCompany, selectedPersonnel, selectedSummaryPartition]);


