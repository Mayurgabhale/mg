import requests
import webbrowser

def detect_camera_platform(ip):
    urls_to_try = [
        f"http://{ip}",
        f"https://{ip}"
    ]

    for url in urls_to_try:
        try:
            r = requests.get(url, timeout=3, verify=False)
            html = r.text.lower()

            if "verkada" in html or "/#/login" in html:
                return f"https://{ip}/#/login"
            elif "flir" in html or "userimage" in html:
                return f"http://{ip}/control/userimage.html"
            elif "honeywell" in html or "/www/index.html" in html:
                return f"http://{ip}/www/index.html"
            elif "view/view.shtml" in html or "mjpg" in html:
                return f"http://{ip}/view/view.shtml"
            else:
                return url   # fallback: just open base URL
        except:
            continue
    return None

# Example usage:
ip = "10.199.10.20"  # you can load this from Excel
camera_url = detect_camera_platform(ip)
if camera_url:
    print(f"Opening {camera_url}")
    webbrowser.open(camera_url)
else:
    print(f"Could not detect platform for {ip}")





























function buildUrlFromHints(ip, cameraname = "") {
  // 1) Always try direct IP first
  if (/^\d{1,3}(\.\d{1,3}){3}$/.test(ip)) {
    return `http://${ip}`;  // Open exactly like typing in browser
  }

  // 2) Optional: Brand-based detection (if IP not valid)
  const name = (cameraname || "").toLowerCase();
  if (/\bverkada\b/.test(name))  return `https://${ip}/#/login`;
  if (/\bflir\b/.test(name))     return `http://${ip}/control/userimage.html`;
  if (/\bhoneywell\b/.test(name))return `http://${ip}/www/index.html`;
  if (/axis/.test(name))         return `http://${ip}/view/view.shtml`;

  // 3) Fallback (just open IP)
  return `http://${ip}`;
}

function openCamera(ip, name) {
  const url = buildUrlFromHints(ip, name);
  window.open(url, "_blank", "noopener");
}
