// --- EMEA companyRows: aggregated by CompanyName for pickedDate (EMEA-friendly) ---
const companyRows = useMemo(() => {
  if (!data || !pickedDate) return [];

  const ds = format(pickedDate, 'yyyy-MM-dd');

  // filter details for this date and only for partitions we care about
  const filtered = data.details.filter(r =>
    r.LocaleMessageTime && r.LocaleMessageTime.slice(0, 10) === ds &&
    filteredPartitionKeys.includes(r.PartitionName2)
  );

  const map = new Map();

  filtered.forEach(r => {
    // derive city/country using your partitionToDisplay map
    const city = partitionToDisplay[r.PartitionName2]?.city || (r.PartitionName2 || 'Unknown');
    const country = partitionToDisplay[r.PartitionName2]?.country || 'Unknown';

    // canonical company for EMEA page â€” keep simple: prefer CompanyName or 'Unknown'
    // (do NOT attempt to reuse APAC helpers that don't exist here)
    const company = (r.CompanyName && String(r.CompanyName).trim()) || 'Unknown';

    const key = `${country}||${city}||${company}`;
    const existing = map.get(key);
    if (existing) {
      existing.total += 1;
    } else {
      map.set(key, { country, city, company, total: 1 });
    }
  });

  return Array.from(map.values()).sort((a, b) => {
    if (a.country !== b.country) return a.country.localeCompare(b.country);
    if (a.city !== b.city) return a.city.localeCompare(b.city);
    return a.company.localeCompare(b.company);
  });
}, [data, pickedDate, filteredPartitionKeys]);

// --- Excel export for company summary (EMEA) ---
const handleExportCompanies = async () => {
  if (!pickedDate || !companyRows.length) return;

  const wb = new ExcelJS.Workbook();
  const ws = wb.addWorksheet('Company Summary');

  // set up columns
  ws.columns = [
    { header: 'Country', key: 'country', width: 20 },
    { header: 'City', key: 'city', width: 25 },
    { header: 'Company', key: 'company', width: 40 },
    { header: 'Total', key: 'total', width: 12 },
  ];

  // merge top row for date
  ws.mergeCells('A1:D1');
  const dateCell = ws.getCell('A1');
  dateCell.value = format(pickedDate, 'EEEE, d MMMM, yyyy');
  dateCell.alignment = { horizontal: 'center', vertical: 'middle' };
  dateCell.font = { name: 'Calibri', size: 14, bold: true };

  // blank spacer
  ws.addRow([]);

  // header row
  const headerRow = ws.addRow(['Country', 'City', 'Company', 'Total']);
  headerRow.eachCell(cell => {
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFFC107' } };
    cell.font = { bold: true, color: { argb: 'FF000000' } };
    cell.alignment = { horizontal: 'center', vertical: 'middle' };
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
  });

  // data rows
  companyRows.forEach(r => {
    const row = ws.addRow([r.country, r.city, r.company, r.total]);
    row.eachCell((cell, colNumber) => {
      cell.border = {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      };
      if (colNumber === 4) {
        cell.alignment = { horizontal: 'right', vertical: 'middle' };
        cell.numFmt = '#,##0';
      } else {
        cell.alignment = { horizontal: 'left', vertical: 'middle' };
      }
    });
  });

  // totals row
  const total = companyRows.reduce((s, r) => s + r.total, 0);
  const totalRow = ws.addRow(['Total', '', '', total]);
  totalRow.eachCell((cell, colNumber) => {
    cell.font = { bold: true };
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFD9D9D9' } };
    cell.border = {
      top: { style: 'thin' },
      left: { style: 'thin' },
      bottom: { style: 'thin' },
      right: { style: 'thin' }
    };
    if (colNumber === 4) {
      cell.alignment = { horizontal: 'right', vertical: 'middle' };
      cell.numFmt = '#,##0';
    } else {
      cell.alignment = { horizontal: colNumber === 1 ? 'left' : 'center', vertical: 'middle' };
    }
  });

  // save
  const buf = await wb.xlsx.writeBuffer();
  saveAs(new Blob([buf]), `emea_companies_${format(pickedDate, "yyyyMMdd")}.xlsx`);
};